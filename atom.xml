<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>⋄ Videre Invisibilia ⋄</title>
  
  <subtitle>H.A.R.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://caelica.github.io/"/>
  <updated>2024-12-22T10:09:38.795Z</updated>
  <id>https://caelica.github.io/</id>
  
  <author>
    <name>Caelica</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>绘画（2）</title>
    <link href="https://caelica.github.io/2024/12/22/%E7%BB%98%E7%94%BB%EF%BC%882%EF%BC%89/"/>
    <id>https://caelica.github.io/2024/12/22/%E7%BB%98%E7%94%BB%EF%BC%882%EF%BC%89/</id>
    <published>2024-12-22T01:20:33.000Z</published>
    <updated>2024-12-22T10:09:38.795Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>今年的两张插画作品，以及我的一些想法<a id="more"></a></p></blockquote><img src="/2024/12/22/绘画（2）/b.jpg" title="Kagome"><img src="/2024/12/22/绘画（2）/a.png" title="Lucid"><hr><p><del>要不是WOW开了那个20周年纪念版服务器我都忘了我还有个博客</del></p><p>个人比较满意的近期作品，两张都是同人角色画，第一张是游戏《Maplestory》角色“路西德（Lucid）”，第二张是动画《犬夜叉》角色“日暮戈薇（Higurashi Kagome）”。这也是我第一次认真创作一些同人作品，相比于原创角色来说，同人角色因为省去了一些设计上需要考虑的功夫，画起来其实要更轻松舒适，更重要的是容易获得流量，所以我们可以看到很多画手都会创作大量的同人作品。我虽然对流量没有那么迫切的需要，但看到自己的作品被他人所关注喜欢，收获感还是很强的。所以以后还会继续制作一些同人作品，我还是挺享受这个过程的。</p><p>戈薇这张在画之前就想好了要去模仿TV动画的画风，简单说，就是要能一眼能看出来1990年代那种美少女绘柄的感觉。《犬夜叉》这部作品历经20多年，又是TV又是剧场版的，哪怕就是高桥阿姨全程亲自上阵，画风也难免有所变化，但我还是想模仿那种老款漫画的人物特点，比如近乎多边形的脸轮廓、圆锯片一样的刘海等等，不过，要是模仿得太过头也会丢失自己的风格。上色也是坚持采用赛璐珞风格，不过因为在这方面缺少经验，上衣的阴影做得不太好，话说赛璐珞的细节真是很难就能随便糊弄过去的，尤其是头发，还是花了点时间。于是这么下来，戈薇就成了现在这样。</p><p>我近些年来冒险岛玩的不多，不过路西德的设定还有各种原画还是很让人喜欢，现在我们这些玩家不是小朋友了，那这么可爱的世界里面怎么能没有一个粉毛病娇呢？为了让病娇变得更加性感迷人，我首先计划把原本是二头身的角色设定改为正常比例。然而我个人其实并不太喜欢表现那些疯狂的表情、举止或是残酷激烈的元素，我更喜欢这些角色在卸下防御和演出后，展现出的可怜又可爱的一面。这个角色最大的特点就是她是个短发，要把短发女人画的有魅力好像确实是个挑战，而且我好像以前还真的从来没有画过短头发的女角色。按照一般经验，这样的短发角色应当注重脖颈和肩部，于是不得不花大功夫处理人体结构和皮肤的明暗关系，人体这块我当然也是苦手，做成这样只能说是尽力了。画到最后人也累了，背景也没花太多精力。</p><p>这个礼帽的位置从各种官方原画来看，按理说更应该出现在角色的左上头顶，也就是现在的画面右边。不过鉴于冒险岛是个2D游戏，里面角色通常是能够被镜像翻转的，也就没有再去考虑这点，总的来说这张路西德我还是比较满意的，画的时候也明显能感觉到从起稿到上色都更加的熟练，几乎只花之前一半的时间就能达到比以前作品更高的完成度。</p><hr><p>我在这个博客里还想藏一些东西。关于自己为什么开始画画的故事。今天空闲时间多，也很长时间没发过东西了，就多写点。</p><p>“They say, a man never really knows himself… until his freedom’s been taken away…”</p><p>早上醒来发现手机不连wifi就没信号，原来是附近大学研究生考试，把信号给屏蔽了。看着考场门口站岗的一排保安和交警，一个考完后哭得满脸通红直到再也哭不出来的女孩子，她穿的很厚很厚，手里拎着文具袋，就那样慢慢在街上走。我想起来我的研究生考试，又想起来我当时考研的日子，而画画也正是在那段时间里自学的，可以说要是没有那段时间，我这辈子可能不会认真去画任何东西，也不会去真的打算自学些什么。我在大学和研究生的学习方向和艺术完全没有任何关系，几乎可以说是完全靠爱好走到了现在。</p><p>大概是六年前的现在，也就是2018年12月左右，我从企业里裸辞跑路不长时间，失业的日子还真是能让一个人多去想想自己有几斤几两，我再也不用为了拿那一点点几乎只够房租和吃饭的钱，过那种每天机器程序一般的生活，我自由了，但又好像没自由，和所有失业的年轻人一样，缩在出租屋里，几乎只剩下一台旧电脑和一个电暖器让我能度过这个冬天，每天除了吃喝之外就是玩玩游戏看看动画，却也开心不起来。我和家里人说，我要备考研究生，参加明年底的考试。然而我对上学这件事本身几乎已经失去什么兴趣，回想一下我上了二十年学，究竟最后得到了什么呢？一纸文凭，几篇论文、证书，几箱子作业题，接近满分的试卷？还是那些生产出来就不知去向何方的产品？我不断问自己，这些东西真的究竟有价值吗？如果有人读到这里，也可以想想这个问题的答案，我不强求人们接受我的观点，但我是一个不爱说假话的人，在我看来，我到目前为止可能只是兑现了对教育系统的义务，或者说的更直白一点，这些东西的作用就是证明我对教育系统的忠诚，对社会统治阶级的忠诚，表了忠心罢了！我能够比较好地完成他们安排的任务，这样他们才会放心把这台巨大机器的很小很小一部分的开关和按钮交到我手中，而像我这样的人何止成千上万，所以对于操作这个小按钮的人来说，光有忠诚那还是不够的，还得有效，所以我们的知识、技能等属性，也会像熔融的塑料被注入进一个个指定的模具里面一样，去塑成对应的形状。只有经过了这些，他们才有理由相信，我会按照他们所预期的那样，去按部就班地操作这些按钮。</p><p>但是按这些按钮到底是为了什么，有什么意义，会产生什么样的影响，我们却很少去关心，也不是我们能够关心的事情。每到这里，我就会想到一个极端的情况来佐证这个事实。那就是如果我突然去世了，除了爱我的人会哭，厌恶我的人会笑以外，我到底还能留下什么东西是有价值的或是有意义的，能够让别人意识到——“哦，这个世界上还存在过这样一个人啊。”何况有时候正是因为人死了，那些真正有价值的东西才会浮出水面。像是“慈父”或者“小胡子”之类的人只要还活着一天，就永远不会有人去批评他们的过错，世人也就无法看到他们到底功过几何。我想，如果拿这个标准来衡量，那恐怕很多我们每天所在乎的事情都会立刻褪去光鲜亮丽的外衣，尤其是那些虽然看起来花了大代价，但到最后只是换取了一张张门票和证书的东西：我们尽心尽力地做着按钮操作员，得到的报酬就是一些钱币，而这些印着凯撒头像的钱币在持有者过世之后便会立刻失去个人属性，然后又会被发给其他人；某个部门的某个职位？职位可不是你的个人属性，只要你几天不在岗，立马就会有人顶上来；什么职称、学术成果？我们扪心自问这东西不是门票还能是什么，里面到底有多少是真正有用而不是忽悠人的，做过的人自己都清楚；公司、单位、甚至政府颁发的个人荣誉，这个可以算是充满个人属性了吧？可惜大多数情况下也都没什么价值，我们即使像朝鲜将军那样把功勋章挂满到腿上，也很可能会出现“小伙加班猝死后，留下一抽屉荣誉证书”、“苏联老兵卖勋章换食物”这样类似的尴尬局面；至于高考数学考了多少分那更是连门票都算不上，可是能把这个吹嘘一辈子的人却一抓一大把。举个实际一点的例子，假如我是公司老板，那么公司、资金这些东西的归属权就是没啥真正意义的。真正有意义有价值的是，这个公司在我手里到底做了什么，做的这些事究竟是创造了财富、促进了公平正义？还是只是弄虚作假，干了些“挖一条沟，修一座桥”的无用功。更或者是为了一己私利，制造出了创伤和苦难。我甚至能放出一个更极端的“暴论”：那些一辈子靠弄虚作假，靠这些表忠心、拍马屁得到的虚假地位和名誉混过一生的人，他这一辈子在事业上所贡献的价值和意义，甚至比不上一个拍A片的女演员。因为后者哪怕就是没上过学，一辈子都在社会底层，也多多少少真正服务了社会大众，能让人们看了就开心，这当然是有意义的事情；而当这两个人都去世之后，后者中的一些出色的人甚至能在许多年后仍为人所记起，Non omnis moriar——不会彻底死——仍然会以一种独特的方式显现出来。前者呢？人们甚至可能会觉得，他被抬进棺材的时间还是有点太迟了些。</p><p>现在我再审视一下自己，我活了二十多年，什么也没搞成，最后会被遗忘，而这真他娘的失败。</p><p>我不想像一只没人关心的蟑螂一样，死掉，并被彻底遗忘。</p><p>我其实很早（至少在十几岁）就意识到了这些，我不应该把自己的命运彻底捆死在这条轨道上，但到如今才彻底想明白。那么我还剩下什么呢？和那些成千上万的“按钮操作员”相比，我和他们之间究竟有什么区别，让我只能等于我，而不是等于别人？在没有被挤进这套模具之前，我原本应该是什么样子的？</p><p>我想到了小时候，孩子们一起开心的玩游戏，然后在课间尝试着去临摹玩的游戏里的人物、武器，但最后大家都说，只有我画的东西比较像。在我还是小孩子的时候，我觉得自己是那么擅长画画（虽然我甚至不知道临摹和原创的区别），我当然也会羡慕其他那些同学，他们有人能一脚把足球踢过一整个操场，有的人唱歌很好听，有人游戏等级特别高，有的人写的作文就是讨老师喜欢，当然还有人比我画得更好，以至于我每次画啥东西，都会有人问：“你这么爱画东西，有那谁画得好吗？”、“你俩谁更厉害？”难免叫人羡慕又嫉妒。</p><p>但后来，这些在我看来如此有才华的年轻人，都去“生活”去了，进了那些阿猫银行阿狗厂，变成了一个个按钮操作员，而我也完全一样，不知道从什么时候开始就再也没画过东西，如果再遇到会画画的人，我都不敢告诉他们我曾经也喜欢画画。</p><p>那些天里每天还是那么无聊，碰巧我看到朋友圈里一个同学的画，据他说是用ipad画的（可能是Procreate），是一只画的有些简单的美少女眼睛。我虽然已经好多年没画过东西了，但不知怎么就突然就产生了“我上我也行”的感觉，既然现在都流行画美少女，我拿起平时写字用的自动铅笔，照猫画虎也画了一个，然后感觉只画眼睛还是不够，我决定给她再画成整个头像。不会画怎么办？我下载了一些网上下载的漫画教学书作为参考，硬是在晚上把这个头像画完了。很幸运的是，这个拼凑起来的铅笔画头像，在我看来居然有点像《某科学的超电磁炮》里的女主角之一——白井黑子，这实在是把我惊呆了，这是我第一次画出一个原创的漫画人物——虽然只是一小部分。</p><p>第二天早上我七点就醒了（我那时一般睡到上午10-11点），不顾当时寒冷的空气，在小巷里找到唯一一家开着的文具店，告诉刚睡醒老板说，我要这些铅笔、橡皮和A4纸。练习了几个月后，我又买了我的第一块wacom板子，当天就画出了我的“Miss Practica”（这是一个我自创的词汇，因为据我观察，几乎每个画漫画美少女的画手在刚起步阶段，都会去创作这么样的一个实验性角色）。在今天看来画的相当抽象，不过当时却把我开心坏了。</p><p>后来还是花了几个月去备考研究生，顺利考上，后来也顺利毕业。期间还有人联系我，说要不要在某个平台上接稿，我都没有理会，因为那样在我看来和企业里的机器人生活也没有多大区别。虽然我现在的工作和艺术仍然没有什么关系，我的作品也没有多吸引人。但至少画画这件事让我相信，也证明了我依然有权利、有能力去做我自己，我想学什么就能学什么，更重要的，想不学什么就能不学什么。</p><p>在2021年的时候还有过一个事情，一位网名叫“蛍”（以前也叫秋雲，推号ID为@Uekawakuyuurei）的网友因癌症不幸去世。我之前从未听说过他，也没有看过他的作品。他很擅长创作二战时期的战舰的钢笔画，我们现在仍然能在他留下的推特账号以及Telegram上看到他的作品，以及去世前发送的一些信息。蛍的军舰画画的非常出色，显然他是一个对现代军事装备有相当程度的研究，并且有着很高绘画天赋的人。除了画小众的战舰以外，他也喜欢偶尔画画美少女。可能是他把战舰画的太好，蛍的美少女和他画的战舰比起来就略显稚嫩，这点上和我也挺像，我个人其实对欧洲中世纪的刀剑盔甲有着相当狂热的爱好，但因为种种原因，还是画美少女更多一点，而且直到今天我还觉得我画的美少女就和小学生画的一样。蛍曾经在2020年底取得了日语证书，本来是计划去日本上学，但在2021年查出细胞癌，于2021年9月6日去世。蛍在去世前，把自己的大部分画作都传在了一个独立的Telegram频道里，再加上自己的推特号，成了他在网络上的坟墓，而他去世前最后一条推文“好想在死前喝一大杯冰可乐”，更是让人唏嘘不已。</p><p>蛍不是什么艺术圈子的知名人物，就像我上面说的，我甚至就是因为这个事情才知道了他。但我们反过来想，是蛍的作品和才华实现了他真正的价值，带给了别人哪怕是那样一点点快乐，他的离世才让我们觉得是如此的惋惜，就像他的“萤火虫”的名字，萤火虫在黑夜里发着微光，我们才会因此记住这个可爱的小家伙。而我追求的正是这样的微光，哪怕只有一点点，我都会成为可爱的萤火虫，远离被遗忘的黑暗命运。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今年的两张插画作品，以及我的一些想法&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="绘画" scheme="https://caelica.github.io/tags/%E7%BB%98%E7%94%BB/"/>
    
      <category term="随想" scheme="https://caelica.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《小李的选择》</title>
    <link href="https://caelica.github.io/2024/10/27/%E3%80%8A%E5%B0%8F%E6%9D%8E%E7%9A%84%E9%80%89%E6%8B%A9%E3%80%8B/"/>
    <id>https://caelica.github.io/2024/10/27/%E3%80%8A%E5%B0%8F%E6%9D%8E%E7%9A%84%E9%80%89%E6%8B%A9%E3%80%8B/</id>
    <published>2024-10-27T14:55:26.000Z</published>
    <updated>2024-12-22T00:48:34.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>从来没有在这里写过小说，今天写一个，重生之我在家里洗碗…<a id="more"></a></p></blockquote><p>星期六，累了一周的小李醒了，妻子已经给他和两岁大的女儿做好了早饭，小李走出卧室，秋日的阳光照进他那巴掌大点的租房，终于能有一个休息的日子，小李看着宝贝女儿和辛劳的妻子，就觉得连这些冰冷的水泥地板也看起来那么有温度。</p><p>吃完饭妻子说，今天身体不太舒服，刚吃了药，得去再睡一会，让小李先把碗洗了，然后带着女儿出去玩。小李从来不觉得洗碗是麻烦事，他可喜欢洗碗了，在他看来每解决一个最脏的锅都能让妻子好好休息一下，每刷一个干净光亮的盘子都能保证宝贝女儿下顿饭的卫生，这些都是给自己的家添的一砖一瓦。</p><p>小李才刚刚洗完了两只盘子，一旁的手机就响起那个刺耳的电话铃，是他的老板：</p><p>“小李，怎么不回消息？给你发的那个XXX你看了吗？”</p><p>“啊..这个，你说的那个，我正在看…”</p><p>“没事的话现在就过来，这是今早上面刚公布的项目，任务很紧，我们现在都已经在公司了，就差你没来了。”</p><p>小李顿时感觉血液直往头顶窜，就像被抽了一巴掌一样恼火，而恰好这时，倒霉的女儿又不小心碰碎了一个刚洗好的碗，碎片摔得到处都是，吓得她哇哇就哭。</p><p>然后不知怎么就爆发了一顿大吵，小李最终扔下锅碗和一地狼藉，出门走了，家里只剩下哭泣的妻子和女儿。再后来，几乎每天都是这样。</p><p>多少年的感情，一起走过的路，培养出来的信任，童年的阴影…装订出一个破碎家庭的故事。</p><hr><p>多年后，面对民政局门口的长队，不再年轻的小李却再也想不起那个温暖惬意的周末上午，他无处伸冤，只能反复问自己，这一切都是从哪里开始不对劲的？怎么就走到了这一步呢？他走在街对面的石板路上，又辣又烫的廉价白酒早已弄得他神志不清，这些年发生太多事，他想不起来，也不再愿意去想这了，中年人的吵闹声和快速驶过的汽车鸣笛声混杂在一起，混合得越来越均匀，直至无法分清，昏昏沉沉之间，他好像又听到了什么声音渐渐清晰了起来。</p><p>好像是开水壶的声音。</p><p>小李猛地睁开双眼。</p><p>秋日的阳光从小窗户照进那个狭小的卧室，他爬起来走到门口，年轻的妻子和可爱的女儿正在一起吃早饭，他已经多少年没有见过这么温暖的景象了。</p><p>“我..我这是穿越回过去了吗…？”小李愣在原地。</p><p>“赶快来吃饭啊你，睡那么久，你一会把碗洗一下，我都连续洗了多少天了你也该洗一次碗了吧？”妻子在卧室门外喊道。</p><p>“啊好好，我一定洗！”</p><p>“洗完了带女儿出去转转呗，外面天气挺好的，我吃了药得再睡一会，你带她去玩。”</p><p>“好，我带她去玩！”</p><p>“你今天怎么这么听话了？”妻子的语气总是这么略带戏谑。</p><p>那个电话果然还是响了，看着手机界面上老板山水画风格的大头像，小李没有犹豫，一只手死死地按住了电源键，刺耳的铃声音调在断电的一瞬间失真熄灭，像是一头野兽最后的嚎叫。</p><p>然后是死一般的寂静。</p><p>黑洞洞的手机屏幕上只剩下了自己的脸，小李紧骤眉头，冷冷说出几个字：</p><p>“你吃屎去吧。”</p><p>女儿同样也打碎了碗，小李不慌不忙地收拾完地上所有的碎碗片，就连那些最为细小的碎渣也没漏掉。安慰好受惊的女儿：“没关系啦，这个叫碎碎平安嘛！”</p><p>看着草地上翻来翻去的宝贝女儿，听着孩子们的欢声笑语，小李在草坪上坐了下来，天空好像从来没有这么蓝过。</p><p>周一的例行会议上，小李被老板和同事们骂的狗血淋头，说他是懒虫，说他不求上进，没有事业心，完全跟公司倡导的文化背道而驰，根本不像年轻人该有的样子。甚至连那些和他关系不错的人也开始数落他的种种不是。老板原来觉得，这回必须让小李丢尽脸面才行，结果小李不仅没有一丝悔改认错的意思，反而表情轻松，面带微笑。这让老板十分不爽，他下定决心要把小李赶走，到时候看他还怎么笑的出来！老板开始动用手段，暗自推动同事们孤立小李，事事专挑小李的毛病，扣小李的绩效钱。不出意外，一个月后，小李主动提出了辞职。这下老板大获全胜，他打开公司的监控屏幕，就想看看小李这个故意和他作对的刺头临走前的落魄模样，没想到，这小伙子从头到尾都开开心心的，昂首挺胸健步如飞，头都不回地走了。</p><p>向来喜欢高谈阔论、指点江山的老板，那天吃晚饭的时候却异常地沉默。他知道事情变了，他败了，而这只是个开始。</p><p>小李这下成了“灵活就业人员”，要么出门打打零工，不打零工了就只能运营运营自媒体弄出点饭钱，因为妻子也没有收入，小李家的日子过的十分窘迫，有时候夫妻俩每天就煮几根面条就算一顿饭了，但他在女儿的开销上却从不抠搜，毕竟亲眼看着女儿一天天长大，一想到她再也不用整天面对恐惧和泪水，再穷也都还算是幸福的。</p><p>后来小李和妻子也都找到了工作，妻子就开始经常抱怨说，别人家的男人都赚了多少多少钱啦，房啊车的都买了几个了，谁谁又晋升到什么岗了，而小李总是在找工作——做上几个月——离职上不断循环，折腾多年下来啥都没弄到，简直是废物一个。每当提到这些，小李就会给妻子巴拉巴拉讲一个关于什么平行时空的离谱故事，还说，他是从另一个时间线穿越回来的。</p><p>“得了吧你，一把年纪的人了还看这些东西，你这么牛，还能穿越，咋没见给咱透露一下彩票买几号？金价股票哪年大涨？”</p><p>“这个我没法预测，因为关于未来那端，我不是所有事情都记得，更何况你说的这些东西属于叫二级混沌系统，本来就是没法预测的。”</p><p>“去去去别扯了，洗碗去！”</p><hr><p>又是很多很多年过去了，小李真的老了，变成老李了，头发稀疏，疾病缠身。这期间发生了太多太多事情，女儿早已成家立业远走高飞，而妻子前些年就去世了，老李很想她，每天都在想，他很遗憾的是不能和她老了一起每天散步，如果是那样该多好，他每天就这么幻想着，随便到处走。</p><p>孤身一人的老李不知怎么就走到了民政局的大门口，当年中年人排长队的景象再也没有了，现在只能偶尔看到前来领证的你侬我侬的小年轻们。老李看着看着，就想起了自己和妻子，他感谢妻子是个知足的人，她虽然总是爱叨叨这那，但即便他穷成那样，即便他被所有人看不起，她也从没想过真正抛弃这个家。而他这样一个微不足道的小人物，也总算是在命运的指引下看清了大是大非。正是这些对人性的坚守，让他们共同渡过一个又一个难关，叫那些暗中的黑手，精心设计的把戏，那些摧毁了一个个普通家庭的怪物们，全都在这个小人物这里栽了跟头。</p><p>老李的路也走到头了，他胸口一紧，倒在了地上。</p><p>只剩几口气的老李用力地睁开眼睛，他看到一缕熟悉的阳光透过小树林，照在面前的石板路上，他的脸就贴在路面上，他已经感觉不到石板的冰冷，却似乎能感觉到那阳光的温暖。他闭上眼睛，好像又听见妻子在喊他的名字，而他就像当年走出公司大门时一样开心。谁能定义他这样小人物的成功和失败呢，除了他自己恐怕没有人能。而在他的世界里，他永远都是那个大获全胜，笑到了最后的人。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从来没有在这里写过小说，今天写一个，重生之我在家里洗碗…&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="生活" scheme="https://caelica.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="小说" scheme="https://caelica.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="随想" scheme="https://caelica.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>“确保那里不会发生有意义的事情”</title>
    <link href="https://caelica.github.io/2024/08/23/%E2%80%9C%E7%A1%AE%E4%BF%9D%E9%82%A3%E9%87%8C%E4%B8%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E4%BA%8B%E6%83%85%E2%80%9D/"/>
    <id>https://caelica.github.io/2024/08/23/%E2%80%9C%E7%A1%AE%E4%BF%9D%E9%82%A3%E9%87%8C%E4%B8%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E4%BA%8B%E6%83%85%E2%80%9D/</id>
    <published>2024-08-23T09:00:05.000Z</published>
    <updated>2024-12-22T00:56:21.257Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>Youtube的评论机制一定程度上反映了如今的巨型企业对言论、互联网社区、以及产品运作模式的态度 <a id="more"></a></p></blockquote><h4 id="关于Youtube对评论的限制机制"><a href="#关于Youtube对评论的限制机制" class="headerlink" title="关于Youtube对评论的限制机制"></a>关于Youtube对评论的限制机制</h4><p>&emsp;&emsp;是的，Youtube会限制那些有意义的评论。</p><p>&emsp;&emsp;本次的内容是关于一个ZDF（德国电视二台）于2010年前后的德国历史的纪录片，我尽量用简短的文字描述上下文。该纪录片名叫《Die Deutschen》 (“The Germans”)，每一集都几乎是一个40多分钟小短剧，演出和讲述都相当生动，以一个个关键历史人物为中心讲述德国从查理曼时代到二战的德国历史。我记得大概在2012年前后有人把它搬运到了优酷网并自制了字幕，我当时看过华伦斯坦的那一集，后来我找到了全部的内容，看了很多遍，所以对其中的一些画面印象相当深刻。</p><p>&emsp;&emsp;而今天的视频主体是这个纪录片的一个节选片段，地址为：<a href="https://www.youtube.com/watch?v=xScjkrcaAcc" target="_blank" rel="noopener">https://www.youtube.com/watch?v=xScjkrcaAcc</a> ，这段内容位于《Die Deutschen》的第二季第8集，讲述普奥战争中的克尼格雷茨战役（Battle of Königgrätz），这场1866年的战斗在轻武器历史上具有划时代的意义，普鲁士的德莱赛击针枪（Dreyse-Zündnadelgewehr）首次登场，让后装枪第一次起到了决定性作用。然后我发现，这个发布于2009年的视频和我在《Die Deutschen》中看到的画面并不完全相同，它拥有一段展示德莱赛步枪工作原理的动画，这个动画准确地反映了一些德莱赛区别于现代步枪的设计，并且和剧情场景衔接得非常完美。但我不记得我在《Die Deutschen》中看到过这个画面，我调出我的资源，发现确实不一样，我手中的纪录片长度不仅较短，连配音也不同。我又检查了ZDF官网的纪录片，以及网络上其他的纪录片资源，发现都与我手中的相同。这个视频上传于2009年，而《Die Deutschen》的第二季于2010年12月才发布，显然，ZDF官网于2010年发布的这个纪录片是经过压缩重新剪辑的，这些镜头之前至少已经发布过一次。而我又找不到关于该纪录片是否被翻拍、重制的任何信息，于是我打算在评论区提问，也许有人会知道这其中的原因。</p><p>&emsp;&emsp;评论内容大概如下：</p><blockquote><p>I have a question about this documentary, can anyone answer it?<br>I know that most of the footage in the video is the same as the documentary “The Germans” (Die Deutschen) produced by ZDF, which I have watched many times and impressive. The footage of the Battle of Königgrätz appeared in the season 2 episode 8 “Ludwig II. und die Bayern”, which is 43 minutes long (all the movies in this documentary is 43 minutes). But this video made me realize that the dubbing and some footage are not exactly the same as the documentary I saw, which means that they are two different movies. You can compare this video with the documentary link below:<br>The 43-minute version on Ytb: <a href="https://www.youtube.com/watch?v=4-pAWQG97B8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=4-pAWQG97B8</a><br>The documentary on the official website of ZDF (same as above): <a href="https://www.zdf.de/dokumentation/terra-x/die-deutschen-140.html" target="_blank" rel="noopener">https://www.zdf.de/dokumentation/terra-x/die-deutschen-140.html</a><br>In this video, at 0:15 we can see that the working of the Dreyse needle rifle. Which is quite outstanding because it shows some significant differences between the Dreyse rifle and modern rifle, such as the primer being placed in the middle of the cartridge but not in the end. In contrast, the 43-minute official version edits out this animation, and the entire Königgrätz fighting scene only lasts 60 seconds, which seems to be make together quite hastily.<br>English Wikipedia shows that this episode was produced in December 2010, and I can’t find any information about the documentary being remade. And This video uploaded in 2009, it means, all of these footages had been released at least once before this documentary.<br>This makes me wonder if ZDF has a longer, more complete version of the documentary in Germany? I hope someone can provide useful information on this.</p></blockquote><p>&emsp;&emsp;结果，这段评论发不出去。准确的说，是被ytb的系统删掉了。评论发布后，客户端会看到评论已经被成功发布在了评论列表里，但是，我们只要再次刷新这个视频页面，就会发现似乎什么都没有发生，没有任何已经评论过的痕迹。这点上相当具有迷惑性，因为人们通常并不会对自己发布过的一条评论进行反复检查，这造成了评论已经成功发布的假象。还有为什么说是大概内容呢，因为这段评论发不出去，我反复修改了其中可能影响到正常发布的内容，最可能的就是这两条链接，它们被修改为”ytb deleted my comment so I have to remove links but you can find them easily both on ytb and the official site of ZDF”。结果并没有起作用。rifle、gun之类的不算什么敏感词，因为别人也能正常发布。因为类似的事情我一两年前也碰到过，当时通过换节点的方式解决了这个问题，于是我猜测，是否是因为我的魔法节点被太多人使用，导致Google限制了这个节点呢？我尝试了全局魔法，没有几个亚洲人会用的德国、法国线路等，然而依旧不能评论。</p><p>&emsp;&emsp;难道是这段评论有什么很敏感的字眼，或是视频主体本身较为敏感导致操作被限制？我想大概没有，2009年的视频，讲述19世纪的、和现今欧洲政治格局几乎完全没有冲突和争议的历史，一把枪店里买不到弹药，超市抢匪也看不上，只存在于古董商和博物馆的老枪，能有什么问题？</p><p>&emsp;&emsp;视频太旧太老导致被限制评论？最近一条评论显示在2天前发布。</p><p>&emsp;&emsp;于是，我写下了简短的”well good video!”，点击发布…</p><p>按最新时间排序</p><img src="/2024/08/23/“确保那里不会发生有意义的事情”/1.png" title="a"><p>按照热度排序（自己的评论会自动显示在最上）</p><img src="/2024/08/23/“确保那里不会发生有意义的事情”/2.png" title="b"><p><strong>是的，评论成功…立刻就成功了</strong>，即使过了十几分钟，评论依然好好地挂在那里，这当然算是成功发布了。</p><p>&emsp;&emsp;这相当令人迷惑，为什么要这样做呢，我搜索了相关的问题，发现确实有很多人都遇到了这样的问题。但关键点在于，如果说评论含有敏感内容会被删除，通常这并没有那么难以理解，比如一个人试图发布关于某个奥地利画家的具有煽动性的历史言论而遭到删除，那是因为这个世界上绝大多数社区群体的主流观点都不支持这样做，这种结果至少不和常识冲突。那么要如何解释我的评论被删掉了呢？</p><p>&emsp;&emsp;思来想去，结合上面的实验结果，我觉得只有一种可能，那就是我的评论太长了。对，没错，只是因为它太长了。但准确来说，这段话只是“看起来太长了”，实际上并不长。它只拥有不到2000个英文字符，不到300个单词，也就是说，在计算机数据存储中只会占用不到2kB的容量，而Google的数据中心可能是这个地球上容量最大的服务器之一，不可能容纳不下这小小的2kB。<strong>结论是，一个人说的话被删除，不因为别的，只是因为它看起来有点长</strong>，这听起来相当滑稽，我上学的时候老师通常都会觉得我写太少字数不够，写个论文也怕页数少，然后今天有人反而觉得我写的太多？这和我在国内见到的censorship完全不同，在国内互联网上我当然也被删过无数次，可是从来没有因为“写的多”这种原因而被系统删掉过，为什么ytb倾向于只允许让这些非常简短的评论出现在评论列表里呢？难道论述一个问题，通过列出证据，讲述完整的前因后果，表达自己的猜想和推测，是有问题的吗，不能超过特定的文本长度？</p><h4 id="为什么youtube讨厌的这样的“长篇大论”？"><a href="#为什么youtube讨厌的这样的“长篇大论”？" class="headerlink" title="为什么youtube讨厌的这样的“长篇大论”？"></a>为什么youtube讨厌的这样的“长篇大论”？</h4><p>&emsp;&emsp;基于其他用户的反馈，我们可以对此进行猜测。“长篇大论”评论带来的显而易见的直接后果是用户之间的深度讨论，通常情况下人们的讨论的主体之间总是会存在信息不对称，或者说是一定程度的分歧，这是人类社会里完全正常的现象，这样的讨论就是一种信息互补的过程，否则就没有任何讨论的必要。而ytb显然不希望看到视频的评论区发生过多的讨论，就像我们在其他互联网社区平台看到的那样，那些能够达到上百层评论的“楼中楼”。ytb不希望这些发生的原因也肯定不是硬件容量问题，而是可能担心用户的深度讨论带来的种种麻烦，甚至是法律责任。我们可以看到在很多相当critical的视频内容下是关闭评论区的（显示“评论已关闭”），而从很多信息上可以得知，不止视频发布者拥有关闭评论区的权力，更多情况下是ytb介入强制关闭了特定视频的评论区。</p><p>&emsp;&emsp;ytb官方显然是被这些评论区中带来的种种问题搞得不耐烦了，因为检查海量的视频的评论区必定需要相当的人力成本，所以采用了限制评论长度的方式来变相压制用户之间的深度讨论交互。那为什么又允许用户们评论一些无关痛痒的句子呢？可能对于ytb这样的巨型企业来说，他们要的是一个“花园式”的视频：有很多播放、点赞和收藏，有很多简短的夸赞，一些没有争议、无关痛痒的宣泄，没有踩（这点ytb早已经实装了），就像楚门世界（Truman Show）一样的模拟，花园里的各种植物们（用户）只在有限的互动范围里活动。总的来说，就是在最大化商业流量的情况下避免一切可能的麻烦。</p><p>&emsp;&emsp;但从结果来看，这样的规则当然会把一个互联网社区的整体水平导向客观上的反智主义——用户看不到有意义的论述。这让人感觉到不舒服，我见过一些本地gov主导的项目网站的评论区，并且有过被强制要求发布评论的经历，那里最后呈现的结果是什么呢，就是活人们伪装出的机器人社区，每个人都像机器人一样说着无关痛痒、毫无意义的话和不知道从哪复制粘贴过来的句子，而这一切的目的就是给大家呈现出一个假的评论区，那里不会产生任何麻烦，但当他们消灭掉一切他们认为的麻烦的时候，当然也就跟着消灭了创造力。很可惜，今天硅谷的这些精英们把200X年原本如此具有创造力的社区引向了中庸，引向了与互联网精神相悖的一面。然而我更怕有一天，这些整段整段的话——或者任何超过12个字符长度的单词，都会被自动转写为一个简简单单的“crimethink”，那可能也就只有“goodwise good video”能被发出来了。</p><p>&emsp;&emsp;最后，如果有人能知道本文开头提到的问题的答案，也欢迎解答，我已经移除了ytb的测试评论，可以通过issue通知我。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Youtube的评论机制一定程度上反映了如今的巨型企业对言论、互联网社区、以及产品运作模式的态度&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="网页" scheme="https://caelica.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="随想" scheme="https://caelica.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="文化" scheme="https://caelica.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>解决SSH报错ssh: connect to host github.com port 22: Connection timed out</title>
    <link href="https://caelica.github.io/2024/01/31/%E8%A7%A3%E5%86%B3SSH%E6%8A%A5%E9%94%99ssh-connect-to-host-github-com-port-22-Connection-timed-out/"/>
    <id>https://caelica.github.io/2024/01/31/%E8%A7%A3%E5%86%B3SSH%E6%8A%A5%E9%94%99ssh-connect-to-host-github-com-port-22-Connection-timed-out/</id>
    <published>2024-01-31T06:27:11.000Z</published>
    <updated>2024-01-31T07:05:51.036Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>将SSH端口换到443，解决Git-deploy时22端口的报错timed out(或refused)的情况<a id="more"></a></p></blockquote><p>不出意外这个SSH密钥在我几个月没用Github之后又出意外了。最近hexo deploy的时候发现报错，不过和之前那次需要输账号密码的情况不一样，而是提示端口错误：</p><img src="/2024/01/31/解决SSH报错ssh-connect-to-host-github-com-port-22-Connection-timed-out/1.png" title="a"><p>和之前一样，同样第一反应是没魔法或者网络环境导致的，但是怎么换环境都一样timed out，Ping过了Github的服务器也检查了账号的SSH，服务端肯定是没问题了，防火墙也没开。然后看了一下之前写的东西，发现端口号不对劲，以前用的似乎是443端口，怎么现在又变成22了。于是搜索后发现SSH默认端口就是22,那么肯定就是这个22端口因为其他原因走不通导致的。测试ssh状态发现：</p><img src="/2024/01/31/解决SSH报错ssh-connect-to-host-github-com-port-22-Connection-timed-out/2.png" title="b"><p>于是考虑将其再换回443端口：</p><p>首先来到ssh的本地路径下，为<code>C:\Users\你的用户名\.ssh</code>，在.ssh的文件夹中创建一个名为Config的文本文档，内容为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line"> <span class="built_in"> Port </span>443</span><br></pre></td></tr></table></figure><p>保存后，cmd中运行（Git Bash也可以）测试ssh状态:<br><code>$ ssh -T git@github.com          //注意这里的邮箱地址就是git@github.com</code></p><img src="/2024/01/31/解决SSH报错ssh-connect-to-host-github-com-port-22-Connection-timed-out/3.png" title="c"><p>这个20.205.243.160的地址应为当前国内解析出的Github的服务器地址，位于新加坡。此时会有一行连接确认信息，直接输入yes，会看到：Hi &lt;你的用户名&gt;! You’ve successfully authenticated, but GitHub does not provide shell access.连接成功。</p><p>然后再deploy的时候就没有任何问题了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;将SSH端口换到443，解决Git-deploy时22端口的报错timed out(或refused)的情况&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="软件" scheme="https://caelica.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="服务器" scheme="https://caelica.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="hexo" scheme="https://caelica.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>绘画（1）</title>
    <link href="https://caelica.github.io/2024/01/31/%E7%BB%98%E7%94%BB%EF%BC%881%EF%BC%89/"/>
    <id>https://caelica.github.io/2024/01/31/%E7%BB%98%E7%94%BB%EF%BC%881%EF%BC%89/</id>
    <published>2024-01-31T03:15:41.000Z</published>
    <updated>2024-06-21T08:55:00.092Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>近期两张完成度比较高的插画作品<a id="more"></a></p></blockquote><img src="/2024/01/31/绘画（1）/a.jpg" title="a"><img src="/2024/01/31/绘画（1）/b.jpg" title="b"><hr><p>以前很少画背景图，最近专门花时间整了两个。以后的绘画作品都这么简单展示好了，内容啥的实在是懒得写那么多了，因为整个2023年对我来说就像是一场fever dream，事实证明wlb确实是一个非常非常重要的东西，至少现在在我看来，这比几块钱的收入要重要得多，因为如果人几乎把所有时间精力都花在给别人打工上，如现在随处可见的996、886、007等工作模式，长时间的这么干下去，每天累到只想睡觉的话，真的是就连思考的权利都会被剥夺掉的！更别谈再有什么系统性的学习和提升，再有什么有意义的创作。那样真就彻底变成机器了——“..在生活和精神面貌上都变成了一个真正的学徒…甚至记不起世界上有过罗马人”。</p><p>除了艺术方面以外，今年还有一个值得期待的开端，就是真正开始了一门编程语言的系统性学习，目前的进度是写了一个能够真正对付一些实际问题的控制台小程序，也就100来行，不过目前的代码还不够健壮，当大部分内容得到改进后，我会在这里新开一章放上源码。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;近期两张完成度比较高的插画作品&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="绘画" scheme="https://caelica.github.io/tags/%E7%BB%98%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>《魔兽世界》国服各历史版本时间线（2023版）</title>
    <link href="https://caelica.github.io/2023/08/22/%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E5%9B%BD%E6%9C%8D%E5%90%84%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E6%97%B6%E9%97%B4%E7%BA%BF%EF%BC%882023%E7%89%88%EF%BC%89/"/>
    <id>https://caelica.github.io/2023/08/22/%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E5%9B%BD%E6%9C%8D%E5%90%84%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC%E6%97%B6%E9%97%B4%E7%BA%BF%EF%BC%882023%E7%89%88%EF%BC%89/</id>
    <published>2023-08-22T08:22:51.000Z</published>
    <updated>2024-03-19T10:58:45.432Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>截止2023年底国服魔兽世界各历史版本时间线，包括了小版本以及团本的时间顺序，以及一些重要相关内容的补充说明。 <a id="more"></a></p></blockquote><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>&emsp;&emsp;虽然魔兽世界国服已经关闭了，这个老游戏未来估计也难以再掀起什么风浪，甚至连是否再有国服都是未知数，但我还是想给这个传奇游戏做一个国服版的“时间线”，毕竟它在这里存在过近二十年时间，也是我最喜欢的游戏之一。遗憾的是，中文互联网上的大部分有关这方面的总结性文章不仅错误甚多（主要是时间错误），而且随着游戏热度降低以及停服的到来，大多数此类文章也都没有更新后续的版本内容了，所以我收集资料后就打算自己写一份。资料来源大部分来自中文互联网，如17173、NGA、ZOL等网站的历史页面，以及网友们的讨论内容等，这些内容和页面的时间戳都经过我的相互比对以确保准确性。外服资料来自wowhead、wowpedia以及维基百科等。当然还有我本人以及当年玩游戏的朋友的记忆，以及当年的截图和一些资料辅证，从而进一步提高准确性。但很多早期版本中的内容均是零几年的事件，它们在国内互联网上存在的信息已经所剩无几，因此我不敢保证一些细微之处的事实准确，这也在所难免。不过它仍然可以解决很多在玩家记忆中不是那么明晰的事情——诸如以前玩家口中的“盒子世界”、“亡灵长肉”究竟是哪个版本？装备幻化和随机排5人本是哪个版本实装的，国服玩家错过了哪些团本的开荒，等等，对于这些问题，我相信即使是这个游戏的资深老玩家也不一定记得清楚了。考虑到随着时间继续流逝，那些古早的资料会变得更加稀少，所以我把这些内容都汇总起来，给这二十年的历程做一个存档。</p><p>关于这个时间线，需要说明的要点有：</p><blockquote><ol><li>在事件内容上，均是在描述国服的更新和事件。描述外服的事件均会明确提到外服的服务器区域；</li><li>时间戳上，均采用东八区时间（UTC/GMT+08:00）来描述日期；对于北美地区服务器的时间戳，因暴雪总部在加州尔湾，为太平洋标准时间（PST），即西八区时间（UTC/GMT-8:00）；台服相关时间戳也采用东八区时间（UTC/GMT+08:00）；</li><li>对于国服发布的.x以及..x的小版本，国服的版本号在内容上并不一定与外服（如北美服务器）严格对应，它很可能事实上对应上一两个在外服更早时间发布的小版本；</li><li>该时间线只重点列出到.x小版本的主要更新内容以及关键性的功能改动，本文基本不涉及每个版本中有关职业平衡、技能改动相关的太过细节的更新内容；</li><li>本文不专门列出5人副本的开放日期，只重点列出各大团队副本的开放日期；对于魔兽世界后期资料片中的那些阶段性开放的团队副本，时间戳对应的是其普通难度的首次开放日期；</li><li>本文不列出没有关键性变动的..x小版本，且对于一些..x小版本的补丁号，因资料较少可能存在时间戳上的细节错误；</li><li>某些..x的小版本存在官方命名，但对应版本的国服更新补丁历史上根本就不存在，要么就是未有正式发布官方翻译名称。文末列出了大部分被命名的小版本（.x和..x）名称及其中英对照，其中已确认被国服实装的翻译名称将被注明。</li><li>对于于有关部门的审批信息发布的时间戳，均采用有关部门发布新闻公示的日期，而非文件批号本身的法定生效日期。想了解文件批号法定生效日期的可以在某总局官网自行查询相关文件。</li></ol></blockquote><h3 id="2-时间线"><a href="#2-时间线" class="headerlink" title="2. 时间线"></a>2. 时间线</h3><h4 id="《魔兽世界》"><a href="#《魔兽世界》" class="headerlink" title="《魔兽世界》"></a>《魔兽世界》</h4><p>2004年4月1日，第九城市（简称“九城”）取得《魔兽世界》中国地区独家代理权，授权费300万美元。可以说九城凭借《魔兽世界》的这份独家代理权，自此取代了之前常年代理暴雪系列游戏的奥美电子（其代理过《暗黑破坏神》、《星际争霸》、《魔兽争霸3》等暴雪游戏），成为暴雪游戏在国内市场的代言人。九城时代自此开始。<br>2004年11月23日，《魔兽世界》在北美正式发布。<br>2005年2月28日，国服《魔兽世界》限量测试报名开始。<br>2005年3月21日，国服《魔兽世界》限量测试开始。<br>2005年4月23日，国服《魔兽世界》最后一天限量测试，上线“末日审判”活动，服务器刷新大量恐惧魔王、地狱火等怪物攻击了六大主城。<br>2005年4月26日，国服《魔兽世界》公测开始，国服直接上线了1.4.0版本，玩家等级上限为45级，开放一区、二区。团队副本熔火之心在公测时就已经开放。<br>2005年5月24日，更新至1.4.3“战争的召唤”，实装PvP荣誉系统、军衔系统，副本等级限制，新增古拉巴什竞技场宝箱。<br>2005年6月7日，国服《魔兽世界》正式运营。并解除公测时45级等级上限并开放至60级，开放艾泽拉斯大部分地图内容。<br>2005年6月28日，更新至1.5.2版本“战场争锋”，开放新战场战歌峡谷和奥特兰克山谷，新增“荣誉击杀”、“非荣誉击杀”等荣誉系统相关内容。<br>2005年8月9日，国服从1.5.2更新至1.6.1版本“进军黑翼之巢”，开放团队副本黑翼之巢，暗月集市活动，新荣誉装备，新增主城中的战场管理员。<br>2005年9月27日，更新至1.7.1版本“血神的复苏”，开放第一个20人团队副本祖尔格拉布，新战场阿拉希盆地开放。<br>2005年10月11日，更新至1.8.0版本“噩梦之龙”，开放希利苏斯地图及暮光之锤相关任务，四条绿色巨龙作为世界boss将出现在四个翡翠梦境的入口。<br>2006年1月9日，更新至1.9.0版本“安其拉之门”，新增40人团队副本安其拉神殿、20人团队副本安其拉废墟，以及服务器级别的全民史诗任务——安其拉开门任务，只有完成该事件的服务器才能挑战两个安其拉副本。<br>2006年4月4日，更新至1.10版本“勇者归来”，可通过完成任务获得T0.5套装、部分地区实装了天气系统，60级之后完成任务所得经验转化为金钱。新增希利苏斯搬沙子、东瘟疫抢哨塔等PvP玩法。<br>2006年6月27日，更新至1.11版本“纳克萨玛斯之影”，开放60版本最后一个团队副本纳克萨玛斯（40人），这也是整个魔兽世界历史中最后一个40人副本。开放橙杖“埃提耶什，守护者的传说之杖”任务线。<br>2006年10月3日，更新至1.12.2版本“战鼓震天”，新增跨服战场系统。这是国服《魔兽世界》在2012年《熊猫人之谜》未上线之前，最后一个基本与世界同步更新的版本内容，后续版本迟到一年半载变成家常便饭。玩家们将九城当时的魔兽宣传广告词“做你从未做过的事”，调侃为“做别人早就做过的事”。</p><h4 id="《魔兽世界：燃烧的远征》"><a href="#《魔兽世界：燃烧的远征》" class="headerlink" title="《魔兽世界：燃烧的远征》"></a>《魔兽世界：燃烧的远征》</h4><p>2006年12月5日，北美上线《燃烧的远征》前夕补丁，版本为2.0.1“风暴前夕”，新增天赋树选项、竞技场比赛、荣誉系统和PvP机制改动等内容。<br>2007年1月16日，北美《魔兽世界：燃烧的远征》正式上线，开放外域地图，玩家最高等级提升至70，新增可选种族血精灵和德莱尼，新增珠宝加工专业、英雄难度副本、风暴之眼战场等内容。<br>2007年4月3日，台服《魔兽世界：燃烧的远征》正式上线。</p><p>2007年6月26日，国服《燃烧的远征》前夕补丁“风暴前夕”上线，国服前夕补丁上线的版本号实际上已经是2.1.2，客户端已经更新资料片的数据文件，但服务器并未开放资料片的主要内容。因为实装的新TBC荣誉系统能够用荣誉点直接购买PvP装备，故该版本也被称为“全民刷战场”、“全民大元帅”时代。此外，玩家还发现游戏里的很多模型被“河蟹”，诸如亡灵长出了肉，玩家死掉后的骷髅变成墓碑等，引发玩家热烈抗议，此次更新是国服魔兽世界第一次遭到大规模河蟹。<br>2007年8月28日，“燃烧的远征”资料片通过板薯审批，第九城市取得新资料片版号，并宣布国服将于9月全面上线。<br>2007年9月6日，“特别迟”的国服资料片《魔兽世界：燃烧的远征》正式开放，迟到了半年时间。国服直接开放的是2.1版本，包含外服已经开放的团队副本卡拉赞、格鲁尔的巢穴、玛瑟里顿的巢穴、毒蛇神殿、风暴要塞、海加尔山、黑暗神殿。盗贼职业在新版本上线后被改名为“潜行者”，从此这个名字在国服不再改变。<br>2007年11月20日，更新至2.3版本“邪神禁地：祖阿曼”，开放团队副本祖阿曼，新增公会银行功能。<br>2008年4月1日，更新至2.4版本“决战太阳之井”，开放新地图奎尔丹纳斯岛，开放团队副本太阳之井高地。</p><h4 id="《巫妖王之怒》，国服的万年版末，以及换代理、审批权等风波"><a href="#《巫妖王之怒》，国服的万年版末，以及换代理、审批权等风波" class="headerlink" title="《巫妖王之怒》，国服的万年版末，以及换代理、审批权等风波"></a>《巫妖王之怒》，国服的万年版末，以及换代理、审批权等风波</h4><p><em>（注：这可能是国服《魔兽世界》历程中最复杂的一部分，本文因为主要还是记录游戏相关，感兴趣的可以自行搜索延伸阅读。我们不得不提到一些与游戏内容本身无关的事件，一些时间戳也会提前，但也就是这些本和游戏无关的东西，却实实在在的改变了国服《魔兽世界》的一草一木，把独特的经历刻进了所有国服玩家的记忆中）</em></p><p>2007年4月至5月期间，陆续传来游戏巨头EA（美国艺电）入股九城的消息；2007年5月22日，第九城市正式承认EA以1.67亿美元购入九城15%股权，并获得EA旗下网游《FIFA OL》的独家代理权。九城和EA这个当时暴雪公司的最大竞争对手之一开展合作，自然惹怒了暴雪；此外，在代理《魔兽世界》期间九城还购入了其他很多国外游戏的代理权，并发力自研国产网络游戏，这些举动实际上是九城本身不甘一辈子做暴雪小弟，力求在合作中掌握话语权，和暴雪在谈判桌上多一些筹码。九城的这些决策，从一般的互联网游戏代理公司发展的思路上看，确实是没有太大问题的，但是后来的事实证明，九城的高层严重低估了当时如日中天的暴雪公司和《魔兽世界》及其后续资料片的威力，也高估了自身的本事。九城代理、自研的其他网络游戏和业务后来基本均告失败，而暴雪和魔兽却成了整个网络游戏行业的王中王。再加上九城在运营《魔兽世界》时和暴雪公司之间的种种博弈和矛盾，如互相挖员工墙角，九城运营、更新服务器的巨额成本带来的合作矛盾（直接导致“燃烧的远征”资料片开放推迟）等等因素，《魔兽世界》的开发商暴雪公司终于开始暗自寻找另一家代理厂商接手国内业务。和众多国内大厂洽谈后，这个代理权最终落到了网易头上。</p><p>2008年8月13日，网易正式宣布，获得由暴雪开发的《星际争霸2》以及暴雪游戏平台战网的中国代理权。《星际争霸2》为暴雪于1998年发行的《星际争霸》的续作，是当时玩家期待颇高的重磅级作品。虽然此时《魔兽世界》的代理权还在九城手里，但网易获得《星际争霸2》以及战网平台的代理权，无疑是官宣了与暴雪未来的合作关系，这让九城的魔兽代理权变得危在旦夕。据称第二天（8月14日）九城股价就暴跌20.46%，而网易股价则上涨6%。</p><p>2008年10月14日，北美上线《巫妖王之怒》前夕补丁，版本为3.0.2，实装新天赋和技能，猎人宠物天赋树，暴风城港口和部落新飞艇，新增铭文专业、理发店等内容。<br>2008年11月13日，北美《魔兽世界：巫妖王之怒》正式上线。开放诺森德地图，玩家最高等级提升至80，修改了大量旧版本游戏机制，新增死亡骑士职业等。<br>2008年11月18日，台服《魔兽世界：巫妖王之怒》正式上线。</p><p>2008年12月9日，国服《巫妖王之怒》前夕补丁3.0.5“末日回响”上线。这个版末发生的种种事件导致《燃烧的远征》资料片的游戏内容在国服共持续了1090天之久。因《燃烧的远征》的游戏中有一句台词“我被囚禁了一万年”，这个版末又被玩家戏称为“万年TBC”。</p><p>2009年4月14日，北美版本更新至3.1.0版本“奥杜尔的秘密”。开放团队副本奥杜尔。</p><p>2009年4月16日，美国暴雪娱乐公司和网易公司宣布，网易正式获得《魔兽世界》国服代理权。<br>2009年6月7日，九城关闭魔兽世界服务器。九城发布“九城致国服《魔兽世界》玩家的告别信”，九城时代正式终结，网易时代开启。<br>2009年7月1日，网易魔兽官网及中文战网上线。</p><p>如果只是单纯的换代理，事情到这里也该尘埃落定了，但偏偏这个国服啊，就是没那么简单。这部分内容由于比较sensitive，还是老规矩感兴趣的自行搜索延伸，我们长话短说。因为按照有关规定，进口游戏代理商变更后需要重新申请版号。但自从2009年4月开始，《魔兽世界》的相关审批事件又引发了萌化部和板薯关于网络游戏管理、审批权的激烈争端，而且可以说网络游戏管理责任的归属权直到今天依然没有完全彻底地明确。当时的九城虽然名义上已经失去魔兽世界的代理权，但相比起网易来说，九城的公关做的一直很不错，尤其是和板薯的关系非常密切。结果是两大部门对刚期间，板薯连续发通知警告网易要求其停止服务，神仙打架玩家遭殃，严重影响了《巫妖王之怒》的上线进程。</p><p>2009年7月30日，网易代理的魔兽世界正式开启内测。魔兽世界在国服已经运营近四年居然又再次内测，不得不让玩家们感叹这就是国服。然而新上线的玩家惊奇的发现之前游戏内许多图标和模型被河蟹成了盒子、墨水瓶和面粉袋，网易的“盒子世界”由此得名。</p><p>2009年8月4日，北美版本更新至3.2.0版本“北伐的召唤”，开放团队副本十字军的试炼。<br>2009年9月19日，网易代理的《魔兽世界》在中国大陆重新开始正式运营，版本更新为3.1.3，国服中该版本并未开放《巫妖王之怒》的主要内容，即诺森德大陆，实则是在巫妖王之怒的游戏框架下剔除了诺森德内容的国服畸形版本正式上线。<br>2009年12月8日，北美版本更新至3.3.0版本“巫妖王的陨落”，开放团队副本冰冠堡垒。</p><p>2010年7月26日，《魔兽世界：巫妖王之怒》通过板薯审批。<br>2010年8月9日，《魔兽世界：巫妖王之怒》通过萌化部审批。<br>2010年8月31日，迟到将近两年的“忘了开”《魔兽世界：巫妖王之怒》国服终于正式上线，国服直接从3.1.3更新到了3.2.2版本“北伐的召唤”，开放团队副本十字军的试炼，该版本包含外服已开放的团队副本——纳克萨玛斯（80版本）、黑曜石圣殿、永恒之眼、奥妮克希亚的巢穴（80版本）、阿尔卡冯的宝库、奥杜尔。同时该版本的游戏内容再遭大规模河蟹，到处都是面粉袋和稻草人，是国服魔兽世界被河蟹内容最多的版本。</p><p>2010年10月12日，北美上线《大地的裂变》前夕补丁，版本为4.0.1，修改天赋树，新增装备重铸系统。<br>2010年12月7日，北美《魔兽世界：大地的裂变》正式发布，开放海加尔山、瓦丝琪尔、奥丹姆、暮光高地、深岩之洲五个新地图，玩家最高等级提升至85级，重制了艾泽拉斯地图和任务，新可选种族狼人和地精等。<br>2010年12月9日，台服《魔兽世界：大地的裂变》正式上线。</p><p>2011年1月20日 ，国服版本直接从3.2.2更新至3.3.5“巫妖王的陨落”，开放团队副本冰冠堡垒及冰冠堡垒副本群，但并未开放团队副本红玉圣殿。新增跨服随机副本查找器系统。<br>2011年5月10日，国服开放《巫妖王之怒》资料片最后一个团队副本红玉圣殿。</p><h4 id="《大地的裂变》"><a href="#《大地的裂变》" class="headerlink" title="《大地的裂变》"></a>《大地的裂变》</h4><p>2011年6月13日，《魔兽世界：大地的裂变》通过萌化部审批。<br>2011年6月17日，《魔兽世界：大地的裂变》通过板薯审批。<br>2011年7月12日 ，《魔兽世界：大地的裂变》国服正式上线，迟到了7个月时间。国服直接开放了4.1.0版本“赞达拉的崛起”，该版本包含外服已经开放的团队副本巴拉丁监狱、暮光堡垒、风神王座、黑翼血环。<br>2011年10月11日，更新至4.2.2版本“火焰的愤怒”，开放团队副本火焰之地，火源日常任务，橙杖“巨龙之怒，泰蕾苟萨的寄魂杖”任务，新增地下城首领手册等内容。<br>2011年12月13日，更新至4.3.0版本“暮光审判”，开放团队副本巨龙之魂，盗贼传说匕首“龙父之牙”任务，全新暗月马戏团任务；新增随机跨服团队副本查找器系统，装备幻化系统，虚空仓库等新功能。</p><h4 id="《熊猫人之谜》"><a href="#《熊猫人之谜》" class="headerlink" title="《熊猫人之谜》"></a>《熊猫人之谜》</h4><p>2012年9月5日，《魔兽世界：熊猫人之谜》通过萌化部审批。<br>2012年9月6日 ，国服开放《熊猫人之谜》前夕补丁，版本为5.04，开启塞拉摩场景战役，共享成就功能，传统天赋树改为新的每层三选一天赋系统等内容。<br>2012年9月17日，《魔兽世界：熊猫人之谜》通过板薯审批。<br>2012年10月2日，《魔兽世界：熊猫人之谜》国服正式上线，开放潘达利亚地图，玩家最高等级提升至90级，新可选种族熊猫人及新职业武僧，新天赋系统等内容。<br><em>（“熊猫人之谜”是国服魔兽第一次基本实现与世界同步进度开服的大版本资料片。自此，国服新版本的更新通常只比北美服务器晚数天时间）</em><br>2012年10月9日，开放团队副本魔古山宝库。<br>2012年11月6日，开放团队副本恐惧之心。<br>2012年11月20日，开放团队副本永春台。<br>2012年12月4日 ，更新至5.1.0版本“夺岛奇兵”，新增搏击俱乐部，卡桑琅丛林野战日常任务等。<br>2013年3月12日 ，更新至5.2.0版本“雷神再临”，开放团队副本雷电王座，开放雷神岛、巨兽岛地图。<br>2013年5月23日 ，更新至5.3.0版本“绝地反击”，新增4个场景战役，新战场深风峡谷，按专精拾取的功能等。<br>2013年9月12日，更新至5.4.0版本“决战奥格瑞玛”，开放团队副本决战奥格瑞玛，开放永恒岛地图，试炼场，拉希奥后续/传说披风“阿什拉·卡马斯，决意之护”任务。</p><h4 id="《德拉诺之王》"><a href="#《德拉诺之王》" class="headerlink" title="《德拉诺之王》"></a>《德拉诺之王》</h4><p>2014年10月16日，国服开放《德拉诺之王》前夕补丁，版本为6.0.2“钢铁部落入侵”，增加角色模型翻新等内容，开放诅咒之地钢铁部落入侵事件。<br>2014年11月2日，《魔兽世界：德拉诺之王》通过总局审批。（2013年3月板薯并入广某总局合并为新某总局）<br>2014年11月20日，《魔兽世界：德拉诺之王》国服正式上线，开放德拉诺地图，玩家最高等级提升至100级。<br>2014年12月4日，开放团队副本悬槌堡。<br>2015年2月5日，开放团队副本黑石铸造厂。<br>2015年2月26日，更新至6.1.0，要塞内容更新，增加了新的追随者任务等相关内容。<br>2015年6月25日，更新至6.2.0版本“地狱火危机”，开放塔纳安丛林地图，要塞船坞系统，同时开放团队副本地狱火堡垒。<br>2015年9月3日，更新至6.2.2，开放德拉诺飞行；11月19日，更新至6.2.3，新增大地的裂变时空漫游地下城、跨服团本等内容。</p><h4 id="《军团再临》"><a href="#《军团再临》" class="headerlink" title="《军团再临》"></a>《军团再临》</h4><p>2016年7月21日，国服开放《军团再临》前夕补丁，版本为7.0.3，开放军团入侵事件以及新职业恶魔猎手。<br>2016年8月3日，《魔兽世界：军团再临》通过总局审批。<br>2016年9月1日，《魔兽世界：军团再临》国服正式上线，开放破碎群岛地图，玩家最高等级提升至110级。<br>2016年9月22日，开放团本翡翠梦魇。<br>2016年10月27日，更新至7.1.0版本“重返卡拉赞”，开放新五人本重返卡拉赞，苏拉玛后续任务线等。<br>2016年11月10日，开放团队副本勇气试炼。<br>2017年1月19日，开放团队副本暗夜要塞。<br>2017年3月30日，更新至7.2.0版本“萨格拉斯之墓”，开放破碎海滩地图，法师塔挑战，破碎群岛飞行等。<br>2017年6月22日，开放团队副本萨格拉斯之墓。<br>2017年8月31日，版本更新至7.3.0版本“阿古斯之影”，开放阿古斯地图及相关任务线。<br>2017年11月30日，开放团队副本“安托鲁斯，燃烧王座”。</p><h4 id="《争霸艾泽拉斯》"><a href="#《争霸艾泽拉斯》" class="headerlink" title="《争霸艾泽拉斯》"></a>《争霸艾泽拉斯》</h4><p><em>（注：2018年3月开始的“版号寒冬”导致网易没从总局那拿到8.0的批号，因此只能在原7.0的版号上运作，从而变相继续销售游戏。故从版号角度来讲，在2018年之后所有的国服魔兽世界的新资料片均是《军团再临》版本的“巨大补丁”。玩家看到的具体表现就是任何地图加载画面中的LOGO均只显示“魔兽世界”而没有小标题，游戏登陆界面也仍然是《军团再临》的场景。画面中的两个守门大哥拄着大斧，从此一站就站到了2023年的关服之日。）</em></p><p>2018年7月19日，国服开放《争霸艾泽拉斯》前夕补丁，版本为8.0.1，开放战争模式，泰达希尔之战和洛丹伦之战活动。<br>2018年8月14日，《魔兽世界：争霸艾泽拉斯》国服正式上线，开放库尔提拉斯和赞达拉地图，玩家最高等级提升至120级。<br>2018年9月6日，开放团队副本奥迪尔。<br>2018年12月13日，版本更新至8.1.0版本“复仇之潮”，开放战争前线：黑海岸之战、海岛探险等内容。<br>2019年1月24日，开放团队副本达萨罗之战。<br>2019年4月18日，开放团队副本风暴熔炉。<br>2019年6月27日，更新至8.2.0版本“艾萨拉的崛起”，开放纳沙塔尔地图、麦卡贡地图，开放库尔提拉斯群岛和赞达拉飞行等内容。<br>2019年7月11日，开放团队副本永恒王宫。<br>2019年8月27日，魔兽世界经典怀旧服（60版本）正式开服。<br>2020年1月16日，更新至8.3.0版本“恩佐斯的幻像”，新增奥丹姆和锦绣谷的腐化区域，黑暗帝国突袭，传说披风等内容。<br>2020年1月23日，开放团队副本“尼奥罗萨，觉醒之城”。</p><h4 id="《暗影国度》"><a href="#《暗影国度》" class="headerlink" title="《暗影国度》"></a>《暗影国度》</h4><p>2020年10月15日，国服开放《暗影国度》前夕补丁，版本为9.0.1，开放新的角色定制系统，全种族通用新手村流放者离岛等，将原本120级的玩家最高等级压缩至50级（前夕阶段结束后该上限提升至60级）。<br>2020年11月24日，《魔兽世界：暗影国度》国服正式上线，开放暗影界地图内容。<br>2020年12月10日，开放团队副本纳斯里亚堡。<br>2021年6月2日，魔兽世界经典怀旧服（燃烧的远征）正式开服。<br>2021年7月1日，更新至9.1.0版本“统御之链”，开放地图噬渊：刻希亚。<br>2021年7月8日，开放团队副本统御圣所、大型地下城塔扎维什：帷纱集市。<br>2022年2月24日，更新至9.2.0版本“永恒的终结”，开放扎雷殁提斯地图。<br>2022年3月3日，开放团队副本初诞者圣墓。<br>2022年9月27日，魔兽世界经典怀旧服（巫妖王之怒）正式开服。</p><h4 id="《巨龙时代》、网易关服以及微软收购案"><a href="#《巨龙时代》、网易关服以及微软收购案" class="headerlink" title="《巨龙时代》、网易关服以及微软收购案"></a>《巨龙时代》、网易关服以及微软收购案</h4><p>2022年1月18日，微软宣布将以687亿美元的价格收购动视暴雪。</p><p>2022年10月27日，国服开放《巨龙时代》前夕补丁，版本为10.0.0，添加了新的天赋树系统，新UI界面。<br>2022年11月17日，更新《巨龙时代》前夕补丁第二阶段，版本为10.0.2，开放禁忌离岛地图、新种族龙希尔（Dracthyr）和新职业唤魔师（Evoker），元素入侵事件玩法。<br>2022年11月17日14:36（北京时间），暴雪中国称，同网易现有授权合约将在2023年1月23日到期，届时将在中国大陆暂停多数暴雪游戏服务。<br>2022年11月29日，《魔兽世界：巨龙时代》国服正式上线，开放巨龙群岛地图内容，玩家最高等级提升至70级。<br>2022年12月12日，国服开放团队副本化身巨龙牢窟。<br>2023年1月18日，国服《魔兽世界》实装游戏进度下载机制，被玩家戏称为“电子骨灰盒”。<br>2023年1月20日，国服魔兽世界经典怀旧服（巫妖王之怒）停止P2阶段“奥杜尔的秘密”的全球同步更新，时隔十多年的国服玩家再次错过奥杜尔副本（但就算更新了也只能玩4天）。<br>2023年1月24日0:00，网易代理的国服魔兽世界所有服务器关闭，同时，网易代理的暴雪战网平台以及其他大部分暴雪旗下游戏（如《星际争霸2》、《炉石传说》、《守望先锋》等游戏）也关闭了服务器。网易时代也在这里告一段落。</p><h4 id="《巨龙时代》在外服的后续更新内容"><a href="#《巨龙时代》在外服的后续更新内容" class="headerlink" title="《巨龙时代》在外服的后续更新内容"></a>《巨龙时代》在外服的后续更新内容</h4><p>2023年5月2日，北美正式服更新至10.1.0版本“奈萨里奥的余烬”，开放新地图查拉雷克洞窟（Zaralek Cavern），跨阵营工会等。<br>2023年5月9日，北美正式服开放团队副本“亚贝鲁斯，焰影熔炉（Aberrus, the Shadowed Crucible）”。<br>2023年7月11日，北美正式服更新至10.1.5版本“时光的裂痕”，开放地下城永恒黎明，时间裂隙玩法，幼鳞托育所，以及龙希尔唤魔师的第三个专精“增辉（Augmentation）”。</p><p>2023年10月13日（伦敦时间），英国反垄断监管机构“竞争与市场管理局（CMA）”宣布批准微软收购动视暴雪的交易。历经20个月后，微软正式完成对动视暴雪的收购。也就是说自此暴雪加入了微软大家庭，微软也成为仅次于腾讯和索尼的全球第三大游戏公司。鉴于微软在国内良好的运营基础，不少人认为这对未来国服回归是一个有利因素。</p><p>2023年11月7日，北美正式服更新至10.2.0版本“梦境守护者”，开放新地图翡翠梦境，超然盛放以及翡翠赏金玩法。<br>2023年11月14日，北美正式服开放团队副本“阿梅达希尔，梦境之愿（Amirdrassil, the Dream’s Hope）”。<br>2024年1月16日，北美正式服更新至10.2.5版本“复兴之种”，现允许驭龙术在游戏所有飞行区域使用，龙希尔种族解锁完整飞行能力，艾泽拉斯档案馆任务，暗夜精灵新主城贝拉梅斯（Bel’ameth）任务线以及收复吉尔尼斯任务线，5人地下城查找器实装添加AI机器人队友打本的功能。</p><h3 id="3-大小版本名称中英对照及缩写"><a href="#3-大小版本名称中英对照及缩写" class="headerlink" title="3. 大小版本名称中英对照及缩写"></a>3. 大小版本名称中英对照及缩写</h3><h4 id="大版本中英对照"><a href="#大版本中英对照" class="headerlink" title="大版本中英对照"></a>大版本中英对照</h4><p>《魔兽世界》- Classic/Vanilla/Era<br>《魔兽世界：燃烧的远征》- The Burning Crusade (TBC)<br>《魔兽世界：巫妖王之怒》- Wrath of the Lich King（国服玩家通常叫WLK，外服玩家更喜欢叫WotLK和Wrath）<br>《魔兽世界：大地的裂变》- Cataclysm（国服叫CTM，外服通常叫Cata）<br>《魔兽世界：熊猫人之谜》- Mists of Pandaria (MoP)<br>《魔兽世界：德拉诺之王》- Warlords of Draenor (WoD)<br>《魔兽世界：军团再临》- Legion（没有非常通行的缩写，如果硬要有的话，LEG更符合传统文法）<br>《魔兽世界：争霸艾泽拉斯》- Battle for Azeroth (BfA)<br>《魔兽世界：暗影国度》- Shadowlands (SL)<br>《魔兽世界：巨龙时代》- Dragonflight (DF)</p><h4 id="小版本中英对照"><a href="#小版本中英对照" class="headerlink" title="小版本中英对照"></a>小版本中英对照</h4><p>如前言说明7所述，某些小版本存在官方命名，但国服未有中文官方翻译。下文中打上黑括号的翻译内容表示这个翻译是本人（笔者）自己补写的，并非国服官方当年正式发行的小版本名称（后来怀旧服再度发布的中文名称不在本文考虑范围）。不带黑括号的则是官方在宣传、发行过程中正式使用过的名称。因国服小版本号不一定与外服对应，故这里一律采用美服的版本号。</p><blockquote><p>1.1.0 “World of Warcraft” - “魔兽世界”<br>1.2.0 “Mysteries of Maraudon” - 【“玛拉顿的奥秘”】<br>1.3.0 “Ruins of the Dire Maul” - 【“厄运之槌的废墟”】<br>1.4.0 “The Call to War” - “战争的召唤”<br>1.5.0 “Battlegrounds” - “战场争锋”<br>1.6.0 “Assault on Blackwing Lair” - “进军黑翼之巢”<br>1.7.0 “Rise of the Blood God” - “血神的复苏”<br>1.8.0 “Dragons of Nightmare” - “噩梦之龙”<br>1.9.0 “The Gates of Ahn’Qiraj” - “安其拉之门”<br>1.10.0 “Storms of Azeroth” - “勇者归来”<br>1.11.0 “Shadow of the Necropolis” - “纳克萨玛斯之影”<br>1.12.0 “Drums of War” - “战鼓震天”<br>2.0.1 “Before the Storm” - “风暴前夕”<br>2.0.3 “The Burning Crusade” - “燃烧的远征”<br>2.1.0 “The Black Temple” - 【“黑暗神殿”】<br>2.2.0 “Voice Chat!” - 【“开黑聊天！”】<br>2.3.0 “The Gods of Zul’Aman” - “邪神禁地：祖阿曼”<br>2.4.0 “Fury of the Sunwell” - “决战太阳之井”<br>3.0.2 “Echoes of Doom” - “末日回响”<br>3.0.3 “Wrath of the Lich King” - “巫妖王之怒”<br>3.1.0 “Secrets of Ulduar” - 【“奥杜尔的秘密”】<br>3.2.0 “Call of the Crusade” - “北伐的召唤”<br>3.3.0 “Fall of the Lich King” - “巫妖王的陨落”<br>3.3.5 “Defending the Ruby Sanctum” - 【“保卫红玉圣殿”】<br>4.0.1 “Cataclysm Systems” - 【“系统巨变”】<br>4.0.3a “The Shattering” - 【“天崩地裂”】<br>4.1.0 “Rise of the Zandalari” - “赞达拉的崛起”<br>4.2.0 “Rage of the Firelands” - “火焰的愤怒”<br>4.3.0 “Hour of Twilight” - “暮光审判”<br>5.0.4 “Mists of Pandaria” - “潘达利亚的迷雾”<br>5.1.0 “Landfall” - “夺岛奇兵”<br>5.2.0 “The Thunder King” - “雷神再临”<br>5.3.0 “Escalation” - “绝地反击”<br>5.4.0 “Siege of Orgrimmar” - “决战奥格瑞玛”<br>6.0.2 “The Iron Tide” - “钢铁部落入侵”<br>6.0.3a “Warlords of Draenor” - “德拉诺之王”<br>6.1.0 “Garrisons Update” - 【“要塞升级”】<br>6.2.0 “Fury of Hellfire” - “地狱火危机”<br>7.0.3 “Legion” - “军团再临”<br>7.1.0 “Return to Karazhan” - “重返卡拉赞”<br>7.2.0 “The Tomb of Sargeras” - “萨格拉斯之墓”<br>7.3.0 “Shadows of Argus” - “阿古斯之影”<br>8.0.1 “Battle for Azeroth” - “争霸艾泽拉斯”<br>8.1.0 “Tides of Vengeance” - “复仇之潮”<br>8.2.0 “Rise of Azshara” - “艾萨拉的崛起”<br>8.3.0 “Visions of N’Zoth” - “恩佐斯的幻像”<br>9.0.2 “Shadowlands” - “暗影国度”<br>9.1.0 “Chains of Domination” - “统御之链”<br>9.2.0 “Eternity’s End” - “永恒的终结”<br>10.0.2 “Dragonflight” - “巨龙时代”<br>10.0.5 “Trading Post” - “贸易站”<br>10.0.7 “Return to the Forbidden Reach” - “重返禁忌离岛”<br>10.1.0 “Embers of Neltharion” - “奈萨里奥的余烬”<br>10.1.5 “Fractures in Time” - “时光的裂痕”<br>10.2.0 “Guardians of the Dream” - “梦境守护者”<br>10.2.5 “Seeds of Renewal” - “复兴之种”</p></blockquote><hr><p>最后，让我放这么一张图吧</p><img src="/2023/08/22/魔兽世界国服各历史版本时间线（2023版）/a.jpg" title="a">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;截止2023年底国服魔兽世界各历史版本时间线，包括了小版本以及团本的时间顺序，以及一些重要相关内容的补充说明。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="文化" scheme="https://caelica.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>通过Restream在国内实现Twitch游戏直播</title>
    <link href="https://caelica.github.io/2023/07/16/%E9%80%9A%E8%BF%87Restream%E5%9C%A8%E5%9B%BD%E5%86%85%E5%AE%9E%E7%8E%B0Twitch%E5%BC%80%E6%B8%B8%E6%88%8F%E7%9B%B4%E6%92%AD/"/>
    <id>https://caelica.github.io/2023/07/16/%E9%80%9A%E8%BF%87Restream%E5%9C%A8%E5%9B%BD%E5%86%85%E5%AE%9E%E7%8E%B0Twitch%E5%BC%80%E6%B8%B8%E6%88%8F%E7%9B%B4%E6%92%AD/</id>
    <published>2023-07-16T02:29:31.000Z</published>
    <updated>2024-05-03T06:12:44.146Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>在国内通过Restream的转发服务，在不走特殊加速器的前提下，实现在国外直播平台开直播的一种方法。 <a id="more"></a></p></blockquote><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&emsp;&emsp;虽然本文主要是讨论技术方面的问题，但我还是想借机先分析一下国外主流直播平台和国内主流游戏直播平台在游戏直播上的优缺点。本文主要讨论游戏直播方面的内容，不包含其他方面的直播内容。</p><p>&emsp;&emsp;在游戏直播方面，国内直播平台（如虎牙、斗鱼、B站等）最大的劣势在于受到的限制太多，变数也非常大。首先就存在很多不能直播的游戏，如GTA系列、生化危机系列、黎明杀机等，虽然像什么GTA、钢4等游戏被封掉的理由比较显而易见，但其他一些游戏就只能用莫名其妙来形容。比如《黑暗之魂》，作为一个2012年的游戏系列，在201X年直播刚兴起的时候一直都是能播的，直到2018年发布了一批名单后，给一大批游戏主播们打了个措手不及，黑魂也在各大平台陆续不能播了。但这件事里最令人费解的却是，为何同厂家出品、同属“魂系列”的《血源诅咒》却一直可以播？去年大火的《艾尔登法环》和黑魂在游戏题材、内容上可以说几乎是相差无几，故游戏刚发售时就有人预测《艾尔登法环》的直播将会很快被封禁，不过意想不到的是，《艾尔登法环》直到今天亦可以在各大平台进行直播。其次的话，就是审查元素的泛滥导致很多游戏的直播受到影响（无论是有意还是无意），严重的甚至导致主播账号被封，典型例子就是今年1月的“鹅鸭杀”事件，很多主播被“炸弹人“炸房。这些种种变数确实让人难以预料。</p><p>（补充：2023年11月20日，传出魂系列的直播全面解禁的消息，各大平台陆续正常开播，至于解封的原因同样和当初封禁时一样，也是众说纷纭莫名其妙）</p><p>&emsp;&emsp;再者，因受限于政策原因，国内直播平台要想进行直播必须通过实名认证，主流平台经常还必须上传身份证、照片、刷脸等等内容。而这些实名认证信息一旦上传后都是无法解除的，并且通常情况下，通过实名认证的账号会更加难以被注销掉（国内平台账号难注销是个普遍问题，通常平台都会通过各种手段变相不给注销）。这给个人信息安全也造成了问题。</p><p>&emsp;&emsp;国内直播平台的好处在于门槛较低，受众面广，容易积累人气，收益提现等等功能也方便不少。而且就游戏直播来说，国内直播平台因为对版权管理不严格，通常不会涉及到版权相关的审查问题。通俗点说，就是使用版权音乐，直播盗版游戏，甚至是直播游戏私服都不太会有人管。某一些小众平台甚至连主播开作弊外挂都不管的，这样的局面也给一些商人造就了可乘之机。</p><p>&emsp;&emsp;然后再说国外的直播平台。这里以Twitch、Youtube等美国直播平台为例。相比于国内的直播平台，没有上述列举的对游戏的种种限制可以说是最大的优势。劣势在于，国外服务器的连接门槛较多，推流通常都不如国内平台那样稳定，并且国外的这些平台一直对版权问题抓得比较严，像上面说的那些内容在Twitch或Youtube上都是违反了用户协议的。最后是在这些平台上和观众互动的话，英语交流能力也是不可或缺的。</p><p>&emsp;&emsp;总的来说，如果是国内的主播想做职业主播的话，在国内平台进行直播是更为靠谱的。笔者并不打算做职业主播，只是对新功能感兴趣，这里就介绍一下如何实现这个功能。</p><h4 id="1-Twitch平台注册"><a href="#1-Twitch平台注册" class="headerlink" title="1. Twitch平台注册"></a>1. Twitch平台注册</h4><p>&emsp;&emsp;Twitch是美国亚马逊旗下的一个直播平台，主要提供电子游戏实况、电子竞技比赛等的直播内容，网址为：<a href="https://www.twitch.tv/" target="_blank" rel="noopener">https://www.twitch.tv/</a> 。登陆这个网站需要一个魔法。我们首先从右上角注册一个Twitch账号，注意在电话号码验证这一步选择“使用电子邮件”。推荐微软Outlook邮箱。能够登录进Twitch并看到自己的频道，且能进入“创作者仪表板”界面就算成功。</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/0.png" title="a"><h4 id="2-Restream注册和配置"><a href="#2-Restream注册和配置" class="headerlink" title="2. Restream注册和配置"></a>2. Restream注册和配置</h4><p>&emsp;&emsp;Restream是一个流媒体推流服务网站，网址是：<a href="https://app.restream.io/" target="_blank" rel="noopener">https://app.restream.io/</a> 。它的主要功能是可以把单个用户的直播推流同时推到多个直播平台去，实现一对多的散布宣传。我们这里只需要利用它的转发服务，将本地的直播推流“转推”到Twitch平台上。我们先不开启任何代理工具，直接在cmd里ping一下这个网址，在目前这个时间点上，我的测试结果是可以正常裸连的：</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/1.png" title="b"><p>&emsp;&emsp;然后我们登入app.restream.io的页面，如果网站的响应速度并不是太慢（大约在5秒之内能够进入网页页面），就证明我们在裸连的情况下是能够正常使用Restream的。</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/2.png" title="c"><p>&emsp;&emsp;接下来在登陆页面上点击Sign Up注册一个新的账号，需要提供一个邮箱地址，这里还是使用Outlook邮箱。这一步应该必须使用一个魔法，因为该网站注册或登录时涉及到ReCaptcha的自动验证，而ReCaptcha的服务涉及到其他不能够直连的地址。如果遇到过不了ReCaptcha（显示Recaptcha didn’t load等）的问题，则开启魔法即可解决。进入Home主页面后，点击Connect to OBS, Zoom…这个按钮块：</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/3.png" title="d"><p>&emsp;&emsp;在右边点击Add Channel，添加一个Twitch频道进去：</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/4.png" title="e"><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/5.png" title="f"><p>&emsp;&emsp;这时因为我们已经在此计算机上登陆过Twitch的账号，通常会自动弹出一个Oauth的授权界面请求Twitch的授权，我们当然要给与这个授权。频道添加成功后我们就能在Add Channel下看到自己的Twitch频道的ID和头像。Restream的免费用户只能同时添加2个频道，不过我们目前还用不着更多的。</p><p>&emsp;&emsp;接下来还是在这个面板上点Stream Settings（红圈位置），弹出的面板中，Restream Server建议选择香港位置，这样生成的服务器URL就是rtmp://hongkong.restream.io/live 。然后Reset一下Stream Key，即推流密钥，然后把新生成的Key复制保存下来。</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/6.png" title="g"><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/7.png" title="h"><p>&emsp;&emsp;有人可能会问，我直接把Twitch的流密钥输入直播软件，然后全程走一个特殊加速器（强力魔法）进行直播，难道不行么？实测这样的操作确实可能是可以的，但坏处在于，直播通常是一个持续性大流量过程，所需的流量不是一星半点，魔法的流量通常也是收费的。而且魔法商家通常都对流媒体服务或多或少做了一些限制，稳定程度肯定不如能够正常直连渠道。所以这就是为什么我一开始要ping Restream看看是否能够直连Restream，能直连的当然要舒服得多。其他的方法比如国内常见的游戏加速器等工具也都不太行，例如网易UU这种，如果用网易UU加速“魔兽世界”或者“暗黑破坏神IV”的话，你会发现Twitch平台居然也被同时加速了，此时可以正常观看Twitch上的直播内容，但聊天功能、涉及到账号与创作者设置等的功能都遭到了封锁，这可能是加速器厂商为国内那些电竞比赛服务商、直播转播服务用户等提供的后门渠道，总的来说，这种方法对用户开直播这块还是很废物的。</p><h4 id="3-OBS配置"><a href="#3-OBS配置" class="headerlink" title="3. OBS配置"></a>3. OBS配置</h4><p>&emsp;&emsp;OBS Studio是一款强大实用的直播推流软件，关键是这个软件还是开源免费的，可以说在无论国内外的任何一个直播平台上都可以看到大量使用这个软件进行直播的主播。我也是强烈推荐这个软件，很容易上手。我们可以在OBS Studio官网下载这个软件并安装：<a href="https://obsproject.com/" target="_blank" rel="noopener">https://obsproject.com/</a></p><p>&emsp;&emsp;我们在OBS的设置界面里的“流”中将服务选为“自定义”。注意到这里有一个Twitch选项，本来是可以直接对接Twitch平台的，因为我们不能直接对接Twitch，所以得走Restream。这里填入之前在Restream生成的服务器URL和Key。“设置”中的选项其实就可以就按图上进行配置。编码器我们选择软件编码x264，x264其实是靠CPU的编码，效果一般比较稳定，而硬件解码NVENC则是英伟达显卡的专用编码，吃GPU。考虑到游戏过程一般已经对GPU造成了很高的负载，所以我们一般都选择x264，效果一般比较稳定，如果你的显卡非常强大，或者运行的游戏非常吃CPU，也可以考虑使用NVENC硬件编码。不过，这里最重要的是得解释下“比特率”这个重要项目：</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/8.png" title="i"><h5 id="开直播到底需要多少码率？"><a href="#开直播到底需要多少码率？" class="headerlink" title="开直播到底需要多少码率？"></a>开直播到底需要多少码率？</h5><p>&emsp;&emsp;<strong>这个“比特率”是直播中非常关键的参数，也就是主播们口中通常说的“码率”，即每秒钟上传推流的内容大小。码率的高低决定性限制了你直播物理质量的好坏（如画质、音质、帧率等等）</strong>。码率的单位一般是kbps，即千比特/秒。如有时候会听到主播说开到一万码率，即码率为10000 Kbps，这等于10 Mbps，说明上传速度为10 MB/s，这需要相当好的网络条件。所以码率当然是越高越好，但受条件限制，码率上限理论上直接取决于你的上传速度或网络带宽，以及你要推流直播的物理质量。根据国内直播平台的一般经验，我们将直播推荐码率值和推流物理参数的关系总结如下（该表只是推荐的理论值）：</p><blockquote><p>4K/2160p 60fps（分辨率：3840x2160）。码率范围：20000-51000 Kbps<br>4k/2160p 30fps（分辨率：3840x2160）。码率范围：13000-34000 Kbps<br>1440p 60fps（分辨率：2560x1440）。码率范围：9000-18000 Kbps<br>1440p 30fps（分辨率：2560x1440）。码率范围：6000-13000 Kbps<br>1080p 60fps（分辨率：1920x1080）。码率范围：4500-9000 Kbps<br>1080p 30fps（分辨率：1920x1080）。码率范围：3000-6000 Kbps<br>720p 60fps（分辨率：1280x720）。码率范围：2250-6000 Kbps<br>720p（分辨率：1280x720）。码率范围：1500-4000 Kbps<br>480p（分辨率：854x480）。码率范围：500-2000 Kbps</p></blockquote><p>&emsp;&emsp;而直播时真正需要考虑的问题在于，我们所说的直播服务的“码率”、和单纯观看网络上静态视频的“码率”，虽然在物理参数上可以等同，但在的概念上其实是有显著差异的，因为虽然理论上码率越高直播物理质量就越好，<strong>但直播还需要考虑到观众的观看效果</strong>。以下的例子可以显示出它们的区别：如在直播过程中，画面质量的抖动、一两帧甚至数帧画面的丢失，往往可能对直播流程的进行影响不大；而在静态视频中，这些情况可能都会成为难以妥协的缺陷。另外，超高的码率虽然能够运载极好的直播物理效果，但观众的下载速度却不一定能跟得上推流的速度，因为推流是实时进行的，这会对网速不佳的观众造成极其严重的卡顿，这个情况通常是难以妥协的。而在静态视频中则不同，理论上只要观众有足够多的加载时间，特别高的码率也不会对观看效果造成致命影响。</p><p>&emsp;&emsp;所以我们可以看到，即使是在国内平台，很多主播们的“码率”也不一定就会开到特别高，一般来说6000 Kbps的码率已经非常足够了。且在目前这个时间点上，一般来说1920x1080分辨率、30帧的效果，基本就能够获得一个最基础的直播观感。考虑到我们的推流也并非是国内平台，网络条件受到更多的限制，故我们这里将直播码率设置为3000 Kbps、分辨率1920x1080、帧率为30fps。经测试，这个配置能够稳定实现推流，如果网络条件好的话，可以考虑将码率适当提高，但在这个框架下不建议超过5000 Kbps。</p><h5 id="用Restream-Chat配置聊天框"><a href="#用Restream-Chat配置聊天框" class="headerlink" title="用Restream Chat配置聊天框"></a>用Restream Chat配置聊天框</h5><p>&emsp;&emsp;如果需要和观众进行互动的话，一个实时的聊天框是必不可少的。这里我们用Restream的另一个工具Restream Chat实现这个功能，下载地址为：<a href="https://restream.io/chat" target="_blank" rel="noopener">https://restream.io/chat</a> 。安装后我们在这个软件中登录之前注册的Restream账号（可能需要魔法），它会自动连接到Restream和Twitch，并且自带了一个聊天框，用它就可以实现聊天室实时聊天，可以从Settings中的Appaerance中设置这个聊天框的字体大小和风格等参数。如果我们想把这个聊天框添加到OBS作为一个内容块的话，需要打开Restream Chat的设置，找到Embed in Stream，复制下Embed in Chat的地址：</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/9.png" title="j"><p>&emsp;&emsp;然后在OBS的来源里新建一个“浏览器”内容，将URL部分填入刚才Embed in Chat中的地址,其他涉及文字大小、位置等的参数可以依据偏好调整：</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/10.png" title="k"><h4 id="4-开播"><a href="#4-开播" class="headerlink" title="4. 开播~"></a>4. 开播~</h4><p>&emsp;&emsp;OBS简单易用，有关它的教程也很多，故布局、细节操作等内容不再展开。一切都准备妥当后，我们就可以点击OBS右边的“开始推流”按钮开播。开播后，需要注意右下角的方框是不是绿色的，数据流量是否和你设置的码率相近（没有数量级上的差异），有无较高的丢帧现象。一般来说如果方框是绿色的则处于正常推流状态。也可以打开任务管理器看一下网络上传速度，如果比码率略高就是正确的。此时在Restream Chat中打字，可以看到配置好的直播间将会显示出展示给观众的对应文字，如下图所示：</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/11.png" title="l"><p>&emsp;&emsp;最后，还需要在Twitch的“创作者仪表板&gt;设置&gt;直播”中配置几个关键的配置点：</p><img src="/2023/07/16/通过Restream在国内实现Twitch开游戏直播/12.png" title="m"><ol><li><p>低延迟选项建议开启，本来延迟就非常高，实测开启后仍有10秒左右的延迟；</p></li><li><p>版权音频警告建议关闭，等于用户声明自己承担责任；</p></li><li><p>存储过往直播强烈建议开启，这个选项默认是关闭的，开启后Twitch会自动对你的直播进行录像记录，然后你可以在“创作者仪表板&gt;内容&gt;视频创作室”看到自己的直播记录，并可以选择下载其中的内容，或是发布其中的内容到Twitch上。这对于游戏实况直播来说可以说是必不可少的功能。缺憾就是免费用户只能保存14天以内的记录，想要提高则需要升级账户，或是将直播记录发布为精选或剪辑。故更多人的选择是，直接从Twitch上下载到自己的直播录像，然后全丢到Youtube去就完事了xD</p></li><li><p>始终发布视频点播，这个选项在开启了3之后是默认开启的，即每次直播后的录像都会被自动发布，这里建议关闭，这样可以手动决定发布的内容。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在国内通过Restream的转发服务，在不走特殊加速器的前提下，实现在国外直播平台开直播的一种方法。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="软件" scheme="https://caelica.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="攻略" scheme="https://caelica.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>暴雪战网美区注册避税指南</title>
    <link href="https://caelica.github.io/2023/03/08/%E6%9A%B4%E9%9B%AA%E6%88%98%E7%BD%91%E7%BE%8E%E5%8C%BA%E6%B3%A8%E5%86%8C%E9%81%BF%E7%A8%8E%E6%8C%87%E5%8D%97/"/>
    <id>https://caelica.github.io/2023/03/08/%E6%9A%B4%E9%9B%AA%E6%88%98%E7%BD%91%E7%BE%8E%E5%8C%BA%E6%B3%A8%E5%86%8C%E9%81%BF%E7%A8%8E%E6%8C%87%E5%8D%97/</id>
    <published>2023-03-08T07:57:01.000Z</published>
    <updated>2023-07-08T11:34:59.176Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>第二篇关于暴雪外服战网的使用指南。<a id="more"></a></p></blockquote><h4 id="1-前情与背景提要"><a href="#1-前情与背景提要" class="headerlink" title="1. 前情与背景提要"></a>1. 前情与背景提要</h4><p>&emsp;&emsp;2020年在玩WOW怀旧服的时候我写过一篇文章，里面介绍了如何玩暴雪欧服战网游戏（见:<a href="https://caelica.github.io/2020/08/03/%E6%80%80%E6%97%A7%E6%9C%8D%E6%AC%A7%E6%9C%8D%E6%B8%B8%E7%8E%A9%E6%94%BB%E7%95%A5/"><font color="blue">《怀旧服欧服游玩攻略》</font></a>）。这篇文章中我认为账号注册地区首选是美国和俄罗斯，理由是美国账号和付款都比较稳定，俄罗斯则是价钱便宜。最终注册了俄罗斯的战网账号，利用这个账号成功游玩了WOW怀旧服欧服，以及2021年的Diablo2重制版。但现在时过境迁，包括暴雪战网、Steam在内的很多游戏平台的俄罗斯区都在2022年受到了封锁制裁，具体表现为无法充值消费、游戏无法入库等。而且即使是在2023年的现在，这场战争仍然看不到结束的迹象，所以俄区账号可以说基本是报废了。说来也很是倒霉，咱为了逃避国服的工作室和石油遍地，反而却变成了战争受害者。除了这以外，今年的另一个境况就是网易这个代理14年暴雪游戏的代理商终于和暴雪分手，国服战网一夜完蛋，无数玩家的账号变成电子骨灰盒。不管以后有没有下家继续做代理，我相信我们不论从哪个角度考虑，国服战网这种东西都是不建议再碰了。</p><p>&emsp;&emsp;总结种种条件，还是美区比较靠谱。这篇文章就以今年即将上线的DiabloIV为例，介绍美区战网账号的注册和购买。原理性的内容在之前的文章中已介绍过很多，这里不再多述。同时这篇文章也是对之前的补遗和订正，如有冲突以本文为准。</p><h4 id="2-美区战网注册"><a href="#2-美区战网注册" class="headerlink" title="2. 美区战网注册"></a>2. 美区战网注册</h4><p>&emsp;&emsp;我们首先需要一个邮箱账号，之前是用谷歌邮箱注册的，但现在，<strong>本人强烈建议</strong>使用微软的<strong>Outlook邮箱</strong>，原因很简单，Outlook邮箱不需要手机号码，想注册多少个就注册多少个，安全性也没差到哪去。Outlook邮箱网页地址为：<a href="https://outlook.com" target="_blank" rel="noopener">https://outlook.com</a></p><p>&emsp;&emsp;注册好Outlook邮箱后，需要开启一个<strong>强力全局魔法</strong>，以将IP地址改到美国。怎么才算改成功了？我们去<a href="https://whatismyipaddress.com" target="_blank" rel="noopener">https://whatismyipaddress.com</a> 这个网址查看我们的IP地址。如下图所示：</p><img src="/2023/03/08/暴雪战网美区注册避税指南/0.png" title="a"><p>&emsp;&emsp;左下角可以看到这个地点在美国，这就算成功了。如果发现已指定了节点A，开了全局，可以魔法上youtube等网站，但这个结果中的IP地点不在A而在别的地方，那说明你的魔法不够强力，需要考虑更换运营商，或找别人来注册也行。这里说一下，这一步是必须要做到的，如果忽略则会在注册时造成致命性的阻碍，原理在下文详述。之后进入暴雪战网官网<a href="https://us.shop.battle.net/zh-tw" target="_blank" rel="noopener">https://us.shop.battle.net/zh-tw</a> 或者<a href="https://us.shop.battle.net/en-us" target="_blank" rel="noopener">https://us.shop.battle.net/en-us</a> ，然后点击新建账号的按钮。这里不做详细描述是因为网站UI布局甚至网址都有可能在今后出现变动，故只将关键环节做重点说明。</p><p>进入注册页面后长这样：</p><img src="/2023/03/08/暴雪战网美区注册避税指南/1.png" title="b"><p>&emsp;&emsp;注意，这个网址一打开就显示的国家地区名称才是真实的，因为它会自动检测你的IP位置，然后给你匹配一个对应的国家地区。这个地址<strong>不可</strong>通过手动更改。如果一开始显示的地区不是美国，通过手动更改到美国是不行的！因为最后一步完成注册的时候，网站会在人机验证的环节再检测一遍你的IP位置做验证对比，如果IP地址和你手动选择的国家地区不匹配，则人机验证会出现无限循环，这样永远也过不了人机验证，也就无法完成注册。这就是为什么我们必须将IP地址真正改到对应国家地区，若一打开就自动显示是美国的话，就说明成功了。点击继续下一步。</p><img src="/2023/03/08/暴雪战网美区注册避税指南/2.png" title="c"><p>&emsp;&emsp;姓和名可以自定义，但建议使用英文，并且将注册的姓名记录保存好。点击继续下一步。</p><img src="/2023/03/08/暴雪战网美区注册避税指南/3.png" title="d"><p>&emsp;&emsp;邮箱填入我们之前注册好的Outlook邮箱地址，电话号码这一栏不用管。点击继续下一步。</p><img src="/2023/03/08/暴雪战网美区注册避税指南/4.png" title="e"><img src="/2023/03/08/暴雪战网美区注册避税指南/5.png" title="f"><p>&emsp;&emsp;两个勾勾可以都打上，第一个勾去掉可以不接广告邮件。继续下一步。然后是BattleTag和密码的设定，都可以自定义，BattleTag就是战网账号对外显示出的昵称，这里还是建议用英文。这一步点击继续后会自动进行人机验证和IP地址检测，如果上面的步骤都做对了，人机验证是可以自动通过的。如果出现要手动做人机验证的情况，可以先尝试做一遍人机验证，如果发现还要做第二遍，就说明已经被IP检测卡住出现无限循环，可以重来了。</p><img src="/2023/03/08/暴雪战网美区注册避税指南/6.png" title="g"><p>&emsp;&emsp;注册成功后，我们去Outlook邮箱内找到一封邮箱验证邮件，点击里面的链接即可验证邮箱，这样就算完全注册好了。</p><img src="/2023/03/08/暴雪战网美区注册避税指南/7.png" title="h"><p>&emsp;&emsp;在<strong>个人资料-账号详细资料</strong>里，可以看到这个账号是美区账号。</p><h4 id="3-美区避税大法"><a href="#3-美区避税大法" class="headerlink" title="3. 美区避税大法"></a>3. 美区避税大法</h4><p>&emsp;&emsp;这一步很简单，我们需要添加一个免税州的购买地址，就不用给美国政府上交消费税了。因为之前的文章没有提到过，就在这里详细说一下：</p><p>&emsp;&emsp;美国的消费税由两部分构成：每个州统一的州消费税（State Sales Tax），以及一个州内、但不同区域的地方消费税（Local Sales Tax）。也就是说，同一个州内买东西，交的州消费税都是一样的，交的地方消费税会有略微差异。这两个税加起来合称综合消费税，综合消费税即是通常说的美国消费税。税率分布图如下（2021年的税率，图片来自Wikipedia）：</p><img src="/2023/03/08/暴雪战网美区注册避税指南/8.png" title="i"><p>&emsp;&emsp;其中有五个州是免消费税的：俄勒冈州（Oregon, OR）、阿拉斯加州（Alaska, AK）特拉华州（Delaware, DE，有时候也翻译为德拉瓦州）、蒙大拿州（Montana, MT）、新罕布什尔州（New Hampshire, NH）。这五个州的绝大部分地方没有综合消费税（阿拉斯加没有州消费税但部分区域有地方消费税）。可以看出，这些不收消费税的州以及消费税低的州多是一些人口较少、位置较偏的州，这些免税州通常都在个人所得税、地税房产税等税上比其他州收的多，这样可以让低收入人群交税少，让富人多交税，某种意义上是对低收入人群的一种福利。但每个州税率政策不一也有弊端，普通民众更不容易搞懂每个州到底都在收什么税，最后稀里糊涂就把税乖乖交了，混乱的税率也给很多富人提供了逃税漏税的路子，比如特拉华州就素有避税天堂之称。当然，咱又不是俄国人，是属于war refugee的，你美国自己搞出的制裁，然后还要别人给上税，那就是岂有此理了xD</p><img src="/2023/03/08/暴雪战网美区注册避税指南/9.png" title="j"><p>&emsp;&emsp;比如我们一般情况下要购买DiabloIV的标准版，可以看到游戏价钱是70美元，但还多了一条7美元的消费税，等于要多掏50块钱。我们在个人资料-账号详细资料里找到联络资讯一栏，添加一个购买地址。如果有旧的非免税州的购买地址就点红圈中的更新：</p><img src="/2023/03/08/暴雪战网美区注册避税指南/10.png" title="j"><p>&emsp;&emsp;这里我把地址填到蒙大拿州。可以这样填：（也可以在这个网站查看美国所有地区的邮政编码：<a href="https://usa.youbianku.com/zh-hans" target="_blank" rel="noopener">https://usa.youbianku.com/zh-hans</a> ）</p><blockquote><p>State：Montana（MT, 免税州）<br>City：Missoula<br>Address：University of Montana  （蒙大拿大学）<br>Zip-code: 59812      (UNIV OF MT MISSOULA)</p></blockquote><p>&emsp;&emsp;更新保存后，再购买游戏的话可以看到税变成0了：</p><img src="/2023/03/08/暴雪战网美区注册避税指南/11.png" title="k"><p>&emsp;&emsp;现在美元汇率基本维持在7.0左右，且可以使用支付宝或微信支付，很是方便，490块成功预购了DiabloIV的标准版。对于这个游戏里来说，美区其实不算太贵，土耳其区现在都要450（什么阿根廷区土耳其区都没法用支付宝，PayPal好像也没法用），欧洲和香港台湾这些均在500以上（港区现在也是新台币结算，很不划算）。只需要等到六月就可以玩咯~</p><img src="/2023/03/08/暴雪战网美区注册避税指南/12.png" title="l">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;第二篇关于暴雪外服战网的使用指南。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="软件" scheme="https://caelica.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="攻略" scheme="https://caelica.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>对Warcraft、StarCraft以及Minecraft的原意的小考</title>
    <link href="https://caelica.github.io/2023/01/24/%E5%AF%B9Warcraft%E3%80%81StarCraft%E4%BB%A5%E5%8F%8AMinecraft%E7%9A%84%E5%8E%9F%E6%84%8F%E7%9A%84%E5%B0%8F%E8%80%83/"/>
    <id>https://caelica.github.io/2023/01/24/%E5%AF%B9Warcraft%E3%80%81StarCraft%E4%BB%A5%E5%8F%8AMinecraft%E7%9A%84%E5%8E%9F%E6%84%8F%E7%9A%84%E5%B0%8F%E8%80%83/</id>
    <published>2023-01-24T15:16:51.000Z</published>
    <updated>2024-10-04T07:24:45.708Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>从词源上简单分析一下这些某某craft的真实含义。在探讨词汇的本意的同时对一些命名和翻译作了评价。<a id="more"></a></p></blockquote><p>下表是这几个经典游戏的原名，以及简体中文和繁体中文的翻译：</p><table><thead><tr><th align="center">原文</th><th align="center">简体中文（zh-CN）</th><th align="center">繁体中文（zh-TW）</th></tr></thead><tbody><tr><td align="center">Warcraft</td><td align="center">魔兽争霸</td><td align="center">魔獸爭霸</td></tr><tr><td align="center">StarCraft</td><td align="center">星际争霸</td><td align="center">星海爭霸</td></tr><tr><td align="center">Minecraft</td><td align="center">我的世界</td><td align="center">當個創世神</td></tr><tr><td align="center">World of Warcraft</td><td align="center">魔兽世界</td><td align="center">魔獸世界</td></tr></tbody></table><h3 id="1-craft是什么意思？"><a href="#1-craft是什么意思？" class="headerlink" title="1. craft是什么意思？"></a>1. craft是什么意思？</h3><p>&emsp;&emsp;英语中craft这个词/词缀的历史相当古老，因此如今含义众多。现代英语中，craft的直接词源是古英语（Old English）中的cræft或kreft。而它们被认为是来自于原始日耳曼语（Proto-Germanic，一种假定的所有日耳曼语系语言的共同祖先）中的kraf-，这些词汇最早的意思是指“力量”、“体力”、“能力”（见<a href="https://www.etymonline.com/word/craft" target="_blank" rel="noopener">https://www.etymonline.com/word/craft</a> ）。我们可以在其他日耳曼语系语言中找到相似的例子，如在现代德语中，Kraft表示力量、力气、精力、动力等，如Kraftwagen或Kraftfahrzeug，直译是“动力车”，故用来表示“汽车”、“机动车辆”。回到原始日耳曼语上，这个词后来在古英语中演变成表示某种能力、技巧、艺术、才能等的含义。17世纪后还出现表示船只的含义，再后来，就衍生到了与某种特定功能或技能相关联的物品、装置、工具上。不难看出，到这里craft已经和它的原始含义相距甚远了。而现代英语里带-craft的词汇基本上均可以对应到以上的一种解释，我们可以举出一些例子：</p><p>巫术（witchcraft），即女巫（witch）所拥有的某种能力或才能、技巧；<br>治才，治国方略（statecraft），即在管理国家（state）上的技术或能力；<br>手工艺、手工制品（handcraft或handicraft），即与手相关的技术，或与手工技术相关联的制品；<br>航空器/航天器/船舶（aircraft/spacecraft/watercraft），即能够在air/space/water中发挥特定功能的装置或设备；<br>气垫船（hovercraft），具有悬浮（hover）能力的一种特定装置；<br>职业技能（tradecraft），trade这个词本身最早有“行当、职业”的含义，类似于tools of the trade中的用法。故tradecraft即为从事某种特殊职业所需的专业本领或能力。</p><p>（我知道现在一定有某些相当具有流行文化和文学功底以及致命般好奇心与探索欲望的早期阿斯伯格综合征同学会注意到一个显而易见的事实并且产生这样的疑问：H. P. Lovecraft他那如同他所构想的事物一样奇怪的姓氏“Lovecraft”，不也带了个-craft词尾吗？它会是什么意思？我只能说，这个问题的答案不甚明确，但是它很可能不是我们根据上述理论推算出的那样。）</p><h3 id="2-Warcraft和StarCraft"><a href="#2-Warcraft和StarCraft" class="headerlink" title="2. Warcraft和StarCraft"></a>2. Warcraft和StarCraft</h3><p>&emsp;&emsp;回到游戏话题上，先解释暴雪的Warcraft和StarCraft。（这里注意以下所有的大小写用法，在暴雪游戏中，StarCraft的C是大写的，而Warcraft与World of Warcraft都没有大写其中的C）。</p><p>&emsp;&emsp;首先要说明的一点是，warcraft和starcraft都不是游戏作者自造的，而是英语里已经存在的词汇。warcraft的原意是指战争中所运用的技术或技巧，即skill in warfare，类似于the Art of War的字面意思。所以，虽然我们可能很难找到一个完全反映原意的汉译词汇，但至少可以说，今天这个字面上令人看不太明白的RTS游戏以及著名IP的原意其实就是【战争艺术】，至少是相当接近于这个含义；而StarCraft（1998）发行在Warcraft I（1994）及Warcraft II（1995）之后，通常认为，StarCraft的命名在一定程度上是对Warcraft命名方式的承袭，而其大写了C，是因为starcraft本身并不是生造的词汇，其原本含义接近于占星术（astrology），即“与星星（star）相关的技术或才能（-craft）”。C的大写很明显是一种防止歧义避免混淆的措施，从这里也能看出StarCraft这个命名还是比较严谨的。但因为这并不是starcraft的原意，故严格来讲StarCraft是一个自造词。这也是为什么Warcraft没有做大写C这个处理，是因为它使用的就是原本的含义。根据之前说明的craft的用法和对Warcraft命名方式的承袭，我们可以将StarCraft理解为【在星河太空中（作战）的技艺】。</p><h3 id="3-Minecraft"><a href="#3-Minecraft" class="headerlink" title="3. Minecraft"></a>3. Minecraft</h3><p>&emsp;&emsp;接下来是Minecraft，首先它确实是一个自造的词，这个词汇的本意应理解为【挖掘开矿的技艺】。Mine在这里既可理解为名词“矿物（显然不可能是其他含义）”，亦可理解为动词“开采、挖掘”，结合Minecraft的游戏内容，这两种解释都有符合前文的构词方式的理由，不过作动词解释的适配性更好一点，因为Minecraft游戏中除了挖掘矿物以外还能够挖掘其他东西。但要说明的是，这里的craft不是动词“制作、合成”，而只是一个词尾，也就是我们上面说的-craft，否则不符合英语中常规的构词规则，若强行理解为动词，则Mine &amp; Craft才会是正确的命名方式。至于Minecraft的名称到底对暴雪的游戏有没有借鉴，有人认为创始人Notch可能参考了StarCraft，我个人也倾向于有，但Notch本人从来没有在正式场合说明过这点，故不得而知。</p><h3 id="4-World-of-Warcraft"><a href="#4-World-of-Warcraft" class="headerlink" title="4. World of Warcraft"></a>4. World of Warcraft</h3><p>&emsp;&emsp;虽然Warcraft的游戏名称确实使用了“战争艺术”的含义。但World of Warcraft显然不是World of warcraft，不应该被直接理解为“战争技艺的世界”。World of Warcraft发行于2004年。2003年的《魔兽争霸3冰封王座（WarcraftⅢ: Frozen Throne）》发行后，此时“Warcraft”这个IP已经具有了成熟的市场规模，应当认为Warcraft这个词也派生出了自己的含义。故World of Warcraft应理解为【于前作Warcraft系列的世界观基础上——所构建的世界】，即【Warcraft世界】。</p><h3 id="5-对通行翻译的想法与评价"><a href="#5-对通行翻译的想法与评价" class="headerlink" title="5. 对通行翻译的想法与评价"></a>5. 对通行翻译的想法与评价</h3><p>&emsp;&emsp;必须强调的是，对于影视、游戏娱乐文化中一些关键名称的翻译，大部分情况下是无所谓对错的，只能说有优劣好坏之分。游戏或是影视作品的种种名称有时候通常更会选择去意译，而不是直译，也是考虑到很多词汇并不能很好地翻译成其他语言（如汉语）。而且更为重要的是，对于电子游戏或是影视作品这样的娱乐产品来说，一个响亮、简单易懂且朗朗上口的命名，对于商业运作的重要程度是不言而喻的，甚至可以说做到这一点的重要程度已经远超过其原文本身的真实含义。故在这一原则下，传统的“信达雅”框架不再生效，重点则其实移到了“宣传”上，这其中的一个优秀的翻译结果甚至可以彻底抛弃掉“信”，可以完全不按照原文来。一直有些争议的“我的世界”是不能算作错误翻译的，我们不能拿本意去套意译，甚至我认为这个翻译还算可以。又如我们看到“Tracer”这个词本身既不“猎空”也不“闪光”，“Optimus Prime”里既不擎天，也没有柱子，但能说它们翻译错了或翻译的不好吗，是很难讲的。</p><p>&emsp;&emsp;其实不仅翻译如此，游戏制作者在给游戏命名的时候，也会遵循某种潜在的“商业规律”：例如我曾经看到过一个统计了Steam上所有游戏的名称的项目，然后将词汇的出镜率做一个排名，前五名分别是War、Space、World、Dark、Heros。他们说，要是将前五名综合起来写出一个游戏名称，那就会变成——《黑暗太空世界：战争英雄》（World of Dark Space: War Heroes），听起来很是带劲对吧，我已经能想象到一个类似HALO中士官长的海报形象，当然，也很是俗套，但电子游戏娱乐相关的产业命名确实很多情况下就是这么运作的。</p><img src="/2023/01/24/对Warcraft、StarCraft以及Minecraft的原意的小考/1.png" title="a"><p>&emsp;&emsp;最后是我个人对本文开头列出的游戏原名、以及现在市面上通行的翻译结果的一个很主观的个人评价，会淡化游戏本身取得的成绩，更多从名称角度去考虑，满分按5分，首先是原文部分：</p><p>Warcraft：3分。优势在于开头直接就是上面说的游戏名一哥“war”，晴天霹雳当头一棒；劣势在于带war的游戏数不胜数，这个名称也没能说明出是哪一类、哪一种风格的war，难以突出这款游戏独有的特点。其实Warcraft最早就是一个很简单的以人类战兽人为卖点的游戏，说白了就是在罗马vs蛮族的原型上又套了一些美洲印第安人的设定，当然也直接参考了《魔戒》以及桌面游戏《战锤》等作品。只是估计暴雪当初在命名的时候，也没想到这个IP将来能做那么久。</p><p>StarCraft：3分。优势在于暴雪的前作Warcraft II已经在RTS上初露锋芒，继续使用-craft的命名方式很容易让玩家能联想到这是一款同公司制作的太空未来题材的全新RTS游戏，Star也点明了主题内容相关的元素；劣势在于，这让这个词汇变得比Warcraft更加难以理解了，相比起Star Wars这样简单明了的名字，很多人可能都不能看懂这个star和craft在这里究竟想要说什么。</p><p>Minecraft：2分。虽然这是一款相当成功的游戏，但从命名上却很难吸引人，这个自造词实在是显得有些过于生硬、晦涩了，加上Mine这个词汇本身对玩家也没有特别强的吸引力；要说优点可能就是在于让人能联想到Warcraft和StarCraft（这两个游戏那个时候还相当出名）。</p><p>World of Warcraft：5分。虽然Warcraft本身并不是那么易懂，但经过暴雪多年铺垫后Warcraft这个名字已经在玩家群体中深入人心。从来电子游戏和“世界”似乎都有着无限的亲和力，游戏名称中带着“世界”自然有着很好的吸引力，而这款游戏的目的正就是要带给玩家们一个Warcraft背景下的MMO世界。而其缩写WoW——就和LoL一样，也是相当好记，这在宣传上是很有优势的。</p><p>&emsp;&emsp;再是对现行中文翻译的想法：</p><p>魔兽争霸/魔獸爭霸：3分。优势在于“争霸”一词纳入了War所带来的特点，“魔兽”这个词汇从流行文化的角度看也有些冲击力，让人一看就觉得这是一款以奇幻题材的作品，可以吸引那些期待出现造型夸张的怪物的消费者，算是对起到了对Warcraft世界观的一个扩展解释的作用；劣势在于，合在一起后的“魔兽争霸”略微有些偏离了游戏本身的内容，其实并不是“魔”和“兽”要争霸，而是“人”和“兽”在争夺生存空间。“魔兽”这个具有冲击力叫法也不太容易为普通大众所接受，如2008年著名的反互联网娱乐纪录片《战网魔》中更是以标题《谁把天才变成了魔兽》为噱头，抓住了这一点大加渲染和批驳。至于“魔兽”的翻译本身其实来自于台湾，最早1994年的Warcraft I中只有人类联盟（Humans）和兽人（Orcs）两个可以选择的势力，用魔兽背景故事里面的术语讲，就是“洛丹伦联盟”和“旧部落”两个阵营。其中人类联盟一方因为具有“牧师（cleric）”和“魔法师（Conjurer）”两个可以施放魔法技能的单位，因而人族被称作了“魔族”，加上与之敌对的兽人族，就变成了“魔兽争霸”；但是事实上，兽人族在Warcraft I中亦拥有“死灵法师（Necrolyte）”和“邪术士（Warlock）”的法系单位，还能召唤出邪恶的怪物，这样看来，这个游戏中的兽人族似乎是要比人族更“魔”一些的…</p><p>星际争霸/星海爭霸：5分。这个翻译真的非常出色，首先它补全了原文中为了和Warcraft格式严格对齐从而缺失掉的“War”的这部分含义，星际/星海突出了游戏最大的主题，争霸本身也相当贴切：因为故事背景中的三个种族确实都有在这片星区中称王称霸的计划或倾向。而关于太空争霸题材多说一句，1997年正好上映了一部火爆的科幻电影《星河战队（Starship Troopers，原著小说通常称星船伞兵）》，内容也刚好是人类在外太空和异种虫族发生战争的故事，而《星际争霸》于1998年发行后，作为一款当红的电子游戏当然立刻吸引到了大量原本就对《星河战队》感兴趣的用户群体，甚至导致有激进的《星河战队》铁杆粉丝认为《星际争霸》是在抄袭《星河战队》的艺术设定。20世纪后半叶也正好是种种“太空歌剧”类文艺作品最火热的黄金年代，此时将翻译定为“星际争霸”，是相当适合的。</p><p>我的世界：4分。优点在于这种表达方式点出了游戏的很大一块主题，这确实是一个玩家能够随意编辑掌控的沙盒世界。缺点在于光看名字的话很难想到进一步的玩法，“我”究竟要在“我的世界”里做些什么？</p><p>當個創世神：5分。很优秀的名字，这个游戏在“创造模式”中，玩家扮演的就是“创世神”一般的人物，就算是在“生存模式”，世界上往往也只有玩家这样能够改造世界的人（村民：villagers lives matter!），那不是神还是什么？这个用法不仅告诉玩家这个世界就是你的，你可以随意编辑、改造，祈使句的用法也更具吸引力，特别是对小孩子们来说（Minecraft在ESRB中的评级是E10+，而Warcraft和StarCraft都是Teen）。</p><p>魔兽世界/魔獸世界：5分。经过前作的铺垫后“魔兽”当然也在中文玩家圈子里成为了一个响亮的名字，于是到了World of Warcraft上，可以说是没有理由不翻译成“魔兽”的。世界也是直截了当地告诉玩家这就是一个游戏世界，而且相比于“魔兽争霸”，这回真的是既有“魔”又有“兽”了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从词源上简单分析一下这些某某craft的真实含义。在探讨词汇的本意的同时对一些命名和翻译作了评价。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="翻译" scheme="https://caelica.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>SPT-AKI常用功能修改指南</title>
    <link href="https://caelica.github.io/2022/12/16/SPT-AKI%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E4%BF%AE%E6%94%B9%E6%8C%87%E5%8D%97/"/>
    <id>https://caelica.github.io/2022/12/16/SPT-AKI%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E4%BF%AE%E6%94%B9%E6%8C%87%E5%8D%97/</id>
    <published>2022-12-16T10:55:05.000Z</published>
    <updated>2023-07-09T13:13:22.479Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>SPT（SinglePlayerTarkov）-AKI是一个《逃离塔科夫》的单机端模拟器（以下简称AKI端），本文介绍AKI端的常用功能修改方法以及对应的一些游戏机制，目的是获得舒适的塔科夫游戏体验。<a id="more"></a></p></blockquote><p><strong><font color="#EA0000">本指南对应的版本：</font><br>AKI端版本：SPT-AKI-3.2.5-19428 RELEASE<br>逃离塔科夫客户端版本：Client.0.12.12.31.19428</strong></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;《逃离塔科夫（Escape from Tarkov）》是由俄罗斯Battlestate Games公司制作的一款军事题材FPS游戏。但由于诸如外挂、游戏机制、官方运营因素等等各种原因，导致该游戏的线上模式的体验并不能够令人完全满意。SPT-AKI端经过一年多的完善，已经成为了目前塔科夫离线端中比较主流的一个端，AKI端截至目前2022.12.16已经更新到了3.3.0版本。本文所对应的是AKI-3.2.5版本，客户端对应0.12.12，已经实装了新出的灯塔地图、MGL榴弹炮武器等新版本元素，整体表现十分稳定。本人也修改过1.0版本的AKI端，2.0和3.0新版本的AKI端架构已经有所改变，不排除后面SPT制作组还会继续改变架构，但总体来说，原理是大同小异的。SPT-AKI的官方网址为：<a href="http://www.sp-tarkov.com" target="_blank" rel="noopener">www.sp-tarkov.com</a></p><h2 id="修改项目及方法"><a href="#修改项目及方法" class="headerlink" title="修改项目及方法"></a>修改项目及方法</h2><p><em>\*注意修改的时候需要关闭服务端，否则修改不生效。修改完成后再启动服务端再进游戏即可生效。</em></p><p>&emsp;&emsp;首先说明此版本AKI端主要文件的结构（以根目录为EFT文件夹为例）：<br>…\EFT\user文件夹下是账号的游戏数据。user\profiles下的.json为个人账号的角色数据，包含了现有的所有游戏进度、物品、状态等。从这里可修改个人角色的所有数据。<br>…\EFT\Aki_Data\Server下是服务端的配置信息，包含了服务端上游戏的各类参数。修改这些文件将改变游戏自身的性质，一般来说是全局生效的。但它通常无法直接立即影响角色数据中已经建立了的数据，必须重新获得才可显示生效。</p><h3 id="修改人物等级"><a href="#修改人物等级" class="headerlink" title="修改人物等级"></a>修改人物等级</h3><ol><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>直接看前几行即为角色基本属性，不要改其中的”Level”，直接改”Experience”到2500000（即250w经验），再次启动大概就是40级左右。</li></ol><h3 id="改钱"><a href="#改钱" class="headerlink" title="改钱"></a>改钱</h3><ol><li>将一叠卢布（建议超过1w）放在仓库最左上角，确保整个仓库根目录下只有这一叠卢布（即箱子中不含钱）；</li><li>记住这一叠卢布的具体数值；</li><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>搜索这个数值，检查该词条的x、y位置是否为x=0 y=0，如果是，则修改该数值为300000000（3亿），足够花很久了。</li></ol><h3 id="修改血量（变身塔科夫超人）："><a href="#修改血量（变身塔科夫超人）：" class="headerlink" title="修改血量（变身塔科夫超人）："></a>修改血量（变身塔科夫超人）：</h3><ol><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>搜索词条”BodyParts”，其下拥有的Head、Chest等变量即是各个部位的血量；</li><li>修改每个变量下的Maximum和Current即可，Current不能大于Maximum，最大值不建议超过5000。<br>（新版本AI疯狂锁胸，所以建议将胸部的生命值改高一点，不然很容易扑街…）</li></ol><h3 id="修改护甲（变身无畏战士）："><a href="#修改护甲（变身无畏战士）：" class="headerlink" title="修改护甲（变身无畏战士）："></a>修改护甲（变身无畏战士）：</h3><ol><li><p>打开目录 EFT\Aki_Data\server\database\templates\items.json</p></li><li><p>搜索词条”heavy_trooper”，找到name为”item_equipment_helmet_tk_heavy_trooper”的物品。这个物品是一个可以挂载在Fast MT头盔上的长得很像斯巴达的面罩，本身没有视野遮挡特效，也能兼容夜视仪和耳机。选择它是因为目前这个服务端版本下没有任何敌方单位会装备这个部件，否则修改常见物品后容易导致敌人也变成无畏战士。（同理，带twitch logo的紫色paca甲也是一个不错的选择）</p></li><li><p>向下拉一直找含有”Durability”、”armorClass”的段落，可以看到这个面罩只有40点耐久，4级护甲等级。我们将”Durability”改为5000，”armorClass”改为10。这样它就变成了耐久5000的10级甲。</p></li><li><p>修改防护范围。在”armorZone”字段，严格按照格式填写对应的防护范围，参考如下：</p> <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Durability"</span>: <span class="number">5000</span>,</span><br><span class="line"><span class="string">"MaxDurability"</span>: <span class="number">5000</span>,</span><br><span class="line"><span class="string">"armorClass"</span>: <span class="string">"10"</span>,</span><br><span class="line"><span class="string">"speedPenaltyPercent"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"mousePenalty"</span>: <span class="number">-2</span>,</span><br><span class="line"><span class="string">"weaponErgonomicPenalty"</span>: <span class="number">-2</span>,</span><br><span class="line"><span class="string">"armorZone"</span>: [</span><br><span class="line">  <span class="string">"Head"</span>,</span><br><span class="line">  <span class="string">"LeftArm"</span>,</span><br><span class="line">  <span class="string">"RightArm"</span>,</span><br><span class="line">  <span class="string">"Chest"</span>,</span><br><span class="line">  <span class="string">"Stomach"</span>,</span><br><span class="line">  <span class="string">"LeftLeg"</span>,</span><br><span class="line">  <span class="string">"RightLeg"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"Indestructibility"</span>: <span class="number">0.9</span>,</span><br><span class="line"><span class="string">"headSegments"</span>: [</span><br><span class="line">  <span class="string">"Top"</span>,</span><br><span class="line">  <span class="string">"Eyes"</span>,</span><br><span class="line">  <span class="string">"Nape"</span>,</span><br><span class="line">  <span class="string">"Ears"</span>,</span><br><span class="line">  <span class="string">"Jaws"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li><p>可以考虑更改”ArmorMaterial”的属性，即护甲材质。一般建议修改为”Combined”（复合材料）或”UHMWPE”（超高分子量聚乙烯）。</p></li></ol><p>&emsp;&emsp;这样单靠这个面罩就能够挡住全身的伤害，但像脚这种护甲无法防护的部位是不生效的。修改其他护甲的原理同理。保存后，再次从跳蚤市场购买一个新的HeavyTrooper，即可生效。这些全部改完后基本就无敌了，但也会减弱游戏的挑战性，推荐休闲玩家使用。不过实话说这个版本的AI强的实在有点离谱了，老版本的AI要好玩多了。</p><h3 id="修改技能："><a href="#修改技能：" class="headerlink" title="修改技能："></a>修改技能：</h3><ol><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>搜索词条”Skills”，如果看到其下拥有Endurance、Strength等变量即是各技能经验值；</li><li>将需要修改的技能的”Progress”值改为5100，5100即为满级。推荐将人物属性相关项目（力量、耐力、活力等）以及狙击枪等级全部改到满级。改狙击枪等级是因为猎人（Jaeger）的某些任务需要这个等级。</li></ol><h3 id="修改商人等级"><a href="#修改商人等级" class="headerlink" title="修改商人等级"></a>修改商人等级</h3><p>&emsp;&emsp;首先说明商人升级的原理：升级需要满足三个条件：玩家等级、好感度、总消费值。打开商人交易界面屏幕右上角会显示升到下一级商人需要的三个数值以及你目前的数值，不够的会被标记为红色。</p><ol><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>搜索词条 “TradersInfo”，找到其之前一行没有Bonuses字样的那一段代码；</li><li>TradersInfo 其下共有8个代码段分别对应8个商人，顺序从上到下依次是：俄商（Prapor）、大妈（Therapist）、黑商（Fence）、Skier、美商（Peacekeeper）、机械师（Mechanic）、护甲商（Ragman）、猎人。和游戏中顺序相同；</li><li>不要修改其下的”loyaltyLevel”，没有用。直接修改好感度和商人的消费值即可满足需求，条件都满足后商人自动升级。玩家等级修改方法见上文。</li><li>黑商的好感度最高为6.0，在现版本有独特的作用，在最高好感度时，某些地图的Boss就不会主动攻击玩家扮演的scav了。</li></ol><h3 id="修改仓库大小，以黑边版为例："><a href="#修改仓库大小，以黑边版为例：" class="headerlink" title="修改仓库大小，以黑边版为例："></a>修改仓库大小，以黑边版为例：</h3><ol><li>打开目录 EFT\Aki_Data\Server\database\templates 下的items.json；</li><li>搜索词条 566abbb64bdc2d144c8b457d，然后注意下面的名称是否为”Edge of darkness stash 10x68”，即为黑边版；</li><li>往下拉将”cellsV”的值从68改为100（千万不要动 cellsH 的数字），仓库即变为10x100的大小。</li></ol><h3 id="修改负重和安全箱大小："><a href="#修改负重和安全箱大小：" class="headerlink" title="修改负重和安全箱大小："></a>修改负重和安全箱大小：</h3><p>&emsp;&emsp;原理是将安全箱的重量改为负值，这里我们以黑边3x3裤裆Gamma安全箱为例：</p><ol><li>打开目录 EFT\Aki_Data\Server\database\templates 下的items.json；</li><li>搜索词条 “Gamma”</li><li>将代码段中的”Weight”由1.2修改为-9999。这样它的重量变成了-9999 kg。</li><li>还可以将下面的”cellsH””cellsV”由3都改成9，这样Gamma安全箱就变成9x9的超大空间了。</li></ol><h3 id="修改口袋大小（如何拥有超大口袋）："><a href="#修改口袋大小（如何拥有超大口袋）：" class="headerlink" title="修改口袋大小（如何拥有超大口袋）："></a>修改口袋大小（如何拥有超大口袋）：</h3><ol><li>打开目录 EFT\Aki_Data\server\database\templates\items.json</li><li>搜索词条 627a4e6b255f7527fb05a0f6，可见name为Карманы 1 на 4 со спец слотами，意为带特殊槽的1x4口袋，即玩家Pmc的口袋类型；往下拉找到name为“pocket1”到“pocket4”的代码段（该文件里还存在其他的名为pocket1-4的代码段，所以要搜索这个特定的词条，这样不会搞错）</li><li>在”pocket1”的部分中，找到”cellsH””cellsV”，这里两个变量的初值均为1，代表了第一个口袋的大小为1x1，H为宽（横轴），V为高（纵轴）。将”pocket1”的H由1改为6；V改为10。这样第一个口袋就变成了一个六列十行的大空间；</li><li>将”pocket2-4”的H和V均改为0，即取消后三个口袋只保留第一个大口袋，此举一定程度避免了口袋超出UI界面的bug。不要动SpecialSlot里的东西。</li></ol><h3 id="将跳蚤市场改为战局发现（市场和商人买到的物品将直接拥有对勾）："><a href="#将跳蚤市场改为战局发现（市场和商人买到的物品将直接拥有对勾）：" class="headerlink" title="将跳蚤市场改为战局发现（市场和商人买到的物品将直接拥有对勾）："></a>将跳蚤市场改为战局发现（市场和商人买到的物品将直接拥有对勾）：</h3><ol><li>打开目录 EFT\Aki_Data\Server\configs\inventory.json</li><li>将 this.newItemsMarkedFound = false; 改为 this.newItemsMarkedFound = ture</li></ol><h3 id="修改战局撤离时间："><a href="#修改战局撤离时间：" class="headerlink" title="修改战局撤离时间："></a>修改战局撤离时间：</h3><ol><li>打开目录为 EFT\Aki_Data\Server\database\locations，该目录下的文件夹名均为对应的地图名称，地图对应关系见文末的【附录2：地图名称对照】；</li><li>以bigmap（海关）为例，打开里面的base.json，搜索”EscapeTimeLimit”（在老版本中为escape_time_limit）词条，将后面的45改为3000，这样撤离时间变成了两个小时。</li></ol><h3 id="修改空投几率（每局必出空投飞机）："><a href="#修改空投几率（每局必出空投飞机）：" class="headerlink" title="修改空投几率（每局必出空投飞机）："></a>修改空投几率（每局必出空投飞机）：</h3><ol><li>打开目录 EFT\Aki_Data\Server\configs\airdrop.json</li><li>修改词条”airdropChancePercent”下的每一个地图的概率数值到100，这样每把都必出空投。（空投有可能刷出初始商人买不到的东西比如.338大狙等稀有物品）</li></ol><h3 id="修改Boss刷新几率（每局必刷boss）："><a href="#修改Boss刷新几率（每局必刷boss）：" class="headerlink" title="修改Boss刷新几率（每局必刷boss）："></a>修改Boss刷新几率（每局必刷boss）：</h3><ol><li>以海关为例，打开目录 EFT\Aki_Data\Server\database\locations\bigmap</li><li>打开里面的base.json，搜索”BossLocationSpawn”词条，”BossChance”为boss刷新几率，找到对应boss的名称（如Killa，boss名称对应关系见文末的【附录1：地图Boss列表与机制】），修改为100则必出boss。</li></ol><h2 id="附录1：地图Boss列表与机制"><a href="#附录1：地图Boss列表与机制" class="headerlink" title="附录1：地图Boss列表与机制"></a>附录1：地图Boss列表与机制</h2><p><strong>储备站：</strong>Gluhar，武器通常是Ash-12，带有6个小弟。通常会刷在直升机附近、黑马楼、火车站或火车站地堡（D1地堡）的地下仓库。</p><p><strong>海关：</strong>Reshala，武器通常是AK系自动步枪，带有4个小弟。刷在宿舍楼（两个楼都有可能）或新加油站。</p><p><strong>森林：</strong>Shturman，武器通常是SVD狙击枪，带有2个小弟。刷在地图中央的大锯木厂。<br>    该boss在服务端配置参数中名为”bossKojaniy”。</p><p><strong>海岸线：</strong>Sanitar，武器通常是sks或vss。带有2个小弟，除了小弟以外boss周围还可能聚集一些scav。刷在海岸港务局码头、别墅、疗养院一层附近。</p><p><strong>立交桥：</strong>Killa，武器通常是RPK轻机枪，没有小弟。最常见于立交桥商场中心区域，即Kiba（武器房）、Mantis（医疗房）、Brutal、以及坦克房这块区域。但也有概率运动到商场的其他地方去。</p><p><strong>工厂：</strong>Tagilla，武器通常是Saiga-12霰弹枪，近战会掏出大锤。没有小弟。刷新在工厂坑道及地下部分，但很快会运动到工厂各个区域。</p><p><strong>灯塔：</strong>Knight、BigPipe、Birdeye。这是一个三人精英小队。Knight持榴弹炮，BigPipe持突击步枪，Birdeye持射手步枪。<br>        刷新点：这个boss之前只在灯塔的污水处理厂（即叛乱USEC营地）的1、2号厂房、以及地图中间的豪宅区，他们和叛乱USEC是盟友。但现在这个boss还会刷新在其他地图，如海关的ZB-1013厂房、森林的scav地堡、以及海岸线的气象雷达站。<br>        boss在服务端配置参数中名为”bossKnight”。</p><p><strong>游荡者（Rouges）</strong>：这个阵营目前只有在灯塔污水处理厂的叛乱USEC（现版本俗称美军），分为几个小队分布在污水处理厂各处巡逻或驻守，一个小队通常有2-3人。因每个小队都有刷新概率，故每局总人数不固定，通常一局不到10人，但最多可达15-20人。会操作厂房顶部的固定武器。他们和Knight三人队是同一阵营，有可能同时出现。<br>        叛乱USEC的机制比较独特，如果玩家选择的阵营也是USEC，第一次接触叛乱USEC时会被警告离开，而不会被直接视为敌对。玩家长时间不离开则会被视为敌对，若触发了敌对则之后三局都将被视为敌对状态。玩家是BEAR或组队中有BEAR的USEC玩家会都被直接视为敌对；任何玩家靠近厂房顶部的固定武器位也会被视为敌对；玩家scav不会被直接视为敌对，除非靠得太近；任何人攻击叛乱USEC会被直接视为敌对。<br>        后续版本可能会新增属于BEAR的Rouges阵营。</p><p><strong>掠夺者（Raiders）</strong>：背景设定中Raiders由前USEC、前BEAR及精锐scav组成，但在远古版本中亦被玩家俗称为美军（美军：什么仇什么怨？），其实是高级电脑scav。装备比一般的scav好，一个小队通常有2-4人。目前只在储备站和实验室有。<br>        储备站raider：raider出现在地下D2地堡通道区域、D1地堡（火车站地堡）、火车站及月台周边。开局有几率直接刷一队，储备站现在有两个闸，拉地下闸（D2闸）有几率在闸后面的办公室刷出一队；拉地面闸（D1闸）有几率在火车站刷一队。火车开进车站后也有可能在火车附近立即刷一队。<br>        实验室raider：游戏一开始或进行一段时间都有可能在实验室的某层自动刷一队raider，也有可能刷第二队。实验室现在有6个闸，每拉一个闸都有几率在对应地点刷新一、二队raider。<br>        raider在文件参数的boss列表中名为”pmcBot”，不同地图、点位的刷新概率不一，大多数在30-40%左右。</p><p><strong>邪教徒（Cultists）</strong>：这个boss只在夜间22:00至7:00的战局刷新，会刷新在海关的17号仓库附近，森林河边的废弃村庄以及大锯木厂旁邪教圈附近树林，在海岸线则会刷在疗养院或沼泽教堂后面的荒地。<br>        Boss是一个小队，由一个牧师（Priest）带领2-4个战士（Warrior）组成，装备独特的毒匕首，会倾向于埋伏并偷偷背刺接近的玩家。被毒刀击中的玩家会获得一个名为未知毒素的debuff持续伤害其生命值。只有xTG-12解毒针或力百汀抗生素可以解毒，否则玩家在撤离前都会一直掉血直到死亡。他们阵营在游戏中显示为”???”。<br>        该boss在服务端配置参数中名为sectantPriest，原始刷新概率很低。</p><h2 id="附录2：地图名称对照"><a href="#附录2：地图名称对照" class="headerlink" title="附录2：地图名称对照"></a>附录2：地图名称对照</h2><blockquote><p>bigmap：            海关（游戏里称作Custom，但文件结构里大多叫bigmap）<br>factory4_day：    工厂- 白天<br>factory4_night：工厂- 夜晚<br>interchange：    立交桥/商场<br>laboratory：        实验室<br>rezervbase：        储备站/军事基地<br>shoreline：        海岸线/疗养院<br>woods：            森林<br>lighthouse：        灯塔<br>tarkovstreets：    塔科夫市街（未开放）<br>town：            城镇（未开放）<br>suburbs：        郊区（未开放）<br>terminal：        码头（未开放）<br>develop:         竞技场（Arena）（未开放）<br>privatearea:     别墅区（Private Sector）（未开放）<br>hideout:         （藏身处的地图）</p></blockquote><p><strong><em>注意，hideout不是战局地图，不要修改其内容。所有未实装的地图也不要改。</em></strong></p><hr><p>&emsp;&emsp;最后是个我发现的彩蛋。原画（左图）是前苏联画家维克多·伊万诺维奇·哥沃尔科夫（Viktor Ivanovich Govorkov）于1954年创作的一张反酗酒的宣传画，俄语”Hет”相当于”No”，表示向饮酒说不。塔科夫中也出现了这张画，但被制作组恶搞调换了酒杯和食物的位置，变成了“宁肯不吃饭也要喝酒”：</p><img src="/2022/12/16/SPT-AKI常用功能修改指南/no.png" title="No！">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SPT（SinglePlayerTarkov）-AKI是一个《逃离塔科夫》的单机端模拟器（以下简称AKI端），本文介绍AKI端的常用功能修改方法以及对应的一些游戏机制，目的是获得舒适的塔科夫游戏体验。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="软件" scheme="https://caelica.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="攻略" scheme="https://caelica.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>Q版二头身第二弹</title>
    <link href="https://caelica.github.io/2022/11/12/Q%E7%89%88%E4%BA%8C%E5%A4%B4%E8%BA%AB%E7%AC%AC%E4%BA%8C%E5%BC%B9/"/>
    <id>https://caelica.github.io/2022/11/12/Q%E7%89%88%E4%BA%8C%E5%A4%B4%E8%BA%AB%E7%AC%AC%E4%BA%8C%E5%BC%B9/</id>
    <published>2022-11-12T04:10:42.000Z</published>
    <updated>2024-12-22T01:08:02.029Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>再次挑战萌系二头身的制作 <a id="more"></a></p></blockquote><img src="/2022/11/12/Q版二头身第二弹/Caelica_C.png" title="You deserve this name"><p>在上次制作了第一个二头身之后，有了更多的制作经验。这次应该说更加贴近冒险岛（Maplestory）近年来的画风了，事实上是因为我又玩了100多小时的美服冒险岛…不过话说回来，历史上那些艺术家们整天不上班，出去闲逛出去浪，那都不叫浪，曰采风也，像高更（Paul Gauguin）这样的人为了艺术般的生活都跑到太平洋上的小岛去了，咱因为太平洋加了盖，比不过他，那怎么办？遁入虚拟世界呗！所以咱玩游戏那能叫玩游戏吗，当然不叫玩了，故从今往后这就定调：再遇到normies觉得我老大一人怎么还玩游戏，我就笑笑，因为他们不明白——</p><p>&emsp;&emsp;<em>normies玩游戏，叫打发时间，叫消磨人生。因为他们对游戏艺术和ACG文化没有信仰，所以连他们自己都会这么觉得；</em></p><p>&emsp;&emsp;<em>我玩游戏，至少在我这里永远都不那样叫，现在我造了个新名词</em>——<strong><em>赛博采风（Cyber Art &amp; Design Tour）</em></strong>！！</p><p>言归正传，相对于之前的作品，除了整体的画风比例之外，这次着重处理了线稿的粗细分布问题，花了不少功夫，但最终的实际效果让我觉得很值，这个粗细的感觉一出来整个画面都看起来舒服了许多。之前对最外层轮廓线做了加厚加深的优点也得到了进一步发挥。</p><p>色彩上优化了一级阴影的分布，减弱了一级阴影的渐变程度，总之这次喷枪式的渐变用的很谨慎，这样整体看起来更“二次元”而不是像一个厚涂作品，这可能是近年来漫画插画的绘柄特点，观察冒险岛十年前的风格也能明显看出这个变化。</p><p>最后采用了PS自带的噪声生成添加了一个噪声材质图层，并用波点式贴图处理了服饰的材质。这样能看起来不是那么单调。</p><p>泳衣样式是临时起意搞得，因为有人说我画的女人个个都包的严严实实，不够色，所以身材故意弄的比较…前凸后翘的那种感觉。冒险岛本身其实一直还是比较子供向，大概是很难找到这种的，所以这样也不至于因过度模仿而失去特点。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;再次挑战萌系二头身的制作&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="绘画" scheme="https://caelica.github.io/tags/%E7%BB%98%E7%94%BB/"/>
    
      <category term="设计" scheme="https://caelica.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>利用Youtube的版权审查功能来识别音乐或歌曲</title>
    <link href="https://caelica.github.io/2022/10/02/%E5%88%A9%E7%94%A8Youtube%E7%9A%84%E7%89%88%E6%9D%83%E5%AE%A1%E6%9F%A5%E5%8A%9F%E8%83%BD%E6%9D%A5%E8%AF%86%E5%88%AB%E9%9F%B3%E4%B9%90%E6%88%96%E6%AD%8C%E6%9B%B2/"/>
    <id>https://caelica.github.io/2022/10/02/%E5%88%A9%E7%94%A8Youtube%E7%9A%84%E7%89%88%E6%9D%83%E5%AE%A1%E6%9F%A5%E5%8A%9F%E8%83%BD%E6%9D%A5%E8%AF%86%E5%88%AB%E9%9F%B3%E4%B9%90%E6%88%96%E6%AD%8C%E6%9B%B2/</id>
    <published>2022-10-02T04:05:33.000Z</published>
    <updated>2023-07-16T08:29:18.189Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>这个“邪门歪道”确实很令人吃惊，能准确有效地找到一些不为人知的罕见音乐的对应源。<a id="more"></a></p></blockquote><h3 id="方法简介"><a href="#方法简介" class="headerlink" title="方法简介"></a>方法简介</h3><p>首先我们将视频下载下来，获得视频文件。如果手里的是音频格式的话可以考虑通过录像软件等工具转成视频格式。只要是常见格式应该都是可以的。然后在Youtube频道上上传这个视频。YouTube这里默认上传成私享视频，因此不用担心侵权问题。上传过程中我们先简单填写视频信息，上传成功后，Youtube会自动进行有关的版权审查，此时发现红色叹号提示视频中音乐出现版权问题：</p><img src="/2022/10/02/利用Youtube的版权审查功能来识别音乐或歌曲/1.png" title="a"><p>点击“查看详情”：</p><img src="/2022/10/02/利用Youtube的版权审查功能来识别音乐或歌曲/2.png" title="b"><p>我们可以看到视频中所采用的所有音乐的名称和Youtube上对应的版权源。我们只需复制这些信息然后在YouTube上搜索即可找到源：</p><img src="/2022/10/02/利用Youtube的版权审查功能来识别音乐或歌曲/3.png" title="c"><p>观察《Now may we singen》这首歌。可以看到，牛津卡梅拉塔合唱团（Oxford Camerata）的专辑发布于1993年，但视频是2018年的，2018年前是否有Youtube视频版本暂不清楚，不过《Now may we singen》实际上是一首15世纪的英国传统歌曲，它在YouTube上还存在其他同样版本的作品，所以到这一步可以说就已经找到了。</p><p>Oxford Camerata版本的歌曲链接如下：<br><a href="https://www.youtube.com/watch?v=Loi4Dh9-KbA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Loi4Dh9-KbA</a></p><h3 id="它的优势在哪"><a href="#它的优势在哪" class="headerlink" title="它的优势在哪"></a>它的优势在哪</h3><p>一些歌曲/音乐可能会非常难找。如果你看完下面的文字，你就能体会到这个难度。如网易云之类的常规的听歌识曲软件对偏门歌曲的识别率不仅低，而且更是无法识别库存中没有的音乐（虽然这个音乐碰巧是有的）。而基于Youtube视频形式的音乐源其实更为广泛，因其可能并不仅仅有于官方账号发布的源，故其库存量更大，更容易找到音乐。</p><p>如上面视频中的音乐《Now may we singen》，对我来说是一个整整十年级别的找歌难题。一切的起因是大约在2012年，优酷网上有人上传了一些关于欧洲长剑（longsword）相关的视频，推测是从Youtube搬运的，当时在优酷上关注度还挺高，至少在那时候中世纪相关的圈子里是这样。优酷网目前还有这个视频，但从上传时间（2014年）和叠加的水印来看可能已经被翻录了多次：<a href="https://v-wb.youku.com/v_show/id_XODE4NTE3MDY0.html" target="_blank" rel="noopener">https://v-wb.youku.com/v_show/id_XODE4NTE3MDY0.html</a></p><p>视频中相关的音乐我一直都没找到，视频内容中也没有给出背景音乐的信息。当我也开始使用Youtube后，在Youtube甚至连这个视频源都找不到了（有点讽刺的是，优酷网居然还留着有）。根据视频开头的元素，这个视频实际上是一个美国纽约州的剑术团体Lake Ontario Fechtschule制作的教学演示，由Todd Sullivan表演。网址为：<a href="https://toddsullivan.webs.com" target="_blank" rel="noopener">https://toddsullivan.webs.com</a> 。Lake Ontario Fechtschule从属于美国一个名为Selohaar Fechtschule的HEMA剑术团体，以德式长剑为主。而Selohaar Fechtschule又从属于美国一个名为The Order of Selohaar的民间神秘学团体，似乎至今仍有活动。他们的网址为：<a href="http://www.selohaar.org" target="_blank" rel="noopener">www.selohaar.org</a></p><p>了解这些是为了找到视频源或者上传者，以求获得音乐的相关信息，但这个Lake Ontario Fechtschule可能早已经停止活动了，故有可能是上传者自行下架了视频。并且在整个Google上也无法找到这个视频，这个方法就行不通了。</p><p>鉴于得不到任何相关的信息，于是我先是尝试了原始的笨办法：尝试听出歌词并搜索。对于有歌词的歌曲，很多情况下这是一个行之有效的方案，我曾经这样找到了好些日语歌曲。但这回实在是被彻底难倒了：开始我从听感上判断它可能是拉丁语，但实际上，它的歌词的主体是中古英语（Middle English），但加入了少量拉丁语，并且其中的很多英语词汇没有使用现代英语的读法和发音，而是采用了类似拉丁语的中世纪读法。种种变数导致我听的一头雾水，导致这个方法也告吹了。（如果你看到这里，可以先试试在不看下面歌词的前提下能听出几个“英语”单词xD）</p><p>最终通过文首的方法终于找到了这个歌曲。现在我们再来分析一下这个东西究竟是何方神物。下文的大多数结论均来自这个页面：<a href="https://www.hymnsandcarolsofchristmas.com/Hymns_and_Carols/now_may_we_syngyn_as_it_is.htm" target="_blank" rel="noopener">https://www.hymnsandcarolsofchristmas.com/Hymns_and_Carols/now_may_we_syngyn_as_it_is.htm</a></p><p>根据说法，《Now may we singen》是一首15世纪的英国歌曲，属于一种Medieval Carol，最早的音乐和诗歌均记录在一张15世纪的羊皮纸卷轴上，作者已不可考。现存于英国剑桥三一学院图书馆（Library of Trinity College），18世纪后的作家记录了一些不同的版本副本。</p><p>现代版本（19世纪版本）的歌词和乐谱如下，其中副歌（Refrain）中反复出现的拉丁语“Quod puer natus est nobis”意为“（因为）那个孩子是为我们而生”。：</p><blockquote><p>Now may we singen as it is,<br>Quod puer natus est nobis</p><ol><li>This babe to us that now is born,<br>Wonderful workës He hath ywrought,<br>He would not lose what was forlorn,<br>But boldly again it bought;<br> And thus it is<br> For sooth I wis,<br> He asketh nought but that is His.</li><li>This bargain lovëd He right well,<br>The price was high and bought full dear,<br>Who would suffer and for us feel<br>As did that Prince withouten peer?<br> And thus it is, etc.</li><li>His ransom for us hath ypaid.<br>Good reason have we to be His.<br>Be mercy asked and He be prayed<br>We may deserve the heavenly bliss.<br> And thus it is, etc.</li><li>To some purpose God made man;<br>I trust well to salvation.<br>What was His blood that from Him ran.<br>But fence against damnation?<br> And thus it is, etc.</li><li>Almighty God in Trinity,<br>Thy mercy we pray with whole heart<br>Thy mercy may all woe make flee<br>And dangerous dread from us to start.<br> And thus it is, etc.</li></ol></blockquote><img src="/2022/10/02/利用Youtube的版权审查功能来识别音乐或歌曲/4.jpg" title="d"><p>而Oxford Camerata所演唱的版本（即视频中的音乐）用的是原汁原味的15世纪原版歌词，相当难懂，据说一些字符甚至不能在HTML下正确显示出来：</p><blockquote><p>Now may we syngyn as it is<br>Quod puer natus est nobis.</p><ol><li>This babe to us that now is bore.<br>Wundyrful werkys he hath i wrowt.<br>He wil not lese that was I lore.<br>But boldly aƺen it bowth.<br> And thus it is<br> ffor sothe I wys<br> he askyth nouth but that is hys.</li><li>This chaffare fouyd he rith weel.<br>The prys was hey &amp; bowth ful dere<br>Qwo wold suffre and for us feele<br>As dede that prince was owtyn pere<br> And thus it is, (etc.)</li><li>Hys raunsum for us hath I payd.<br>Of resoun than we owyn to ben hys<br>Be mercy askyd and he be prayd.<br>We may be rith kalange blys.<br> And thus it is, (etc.)</li><li>To sum parpos god made man.<br>I leue weel to saluacyoun<br>Qwat was his blood that fro hym ran.<br>But defens aƺens dampnacyoun.<br> And thus it is, (etc.)</li><li>Almythy god in trynyte.<br>Thy mercy we pray wyth hool herte<br>Thy mercy may all woo make fle.<br>And daungerous dreed fro us do sterte.<br> And thus it is, (etc.)</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个“邪门歪道”确实很令人吃惊，能准确有效地找到一些不为人知的罕见音乐的对应源。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="音乐" scheme="https://caelica.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="艺术" scheme="https://caelica.github.io/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="文化" scheme="https://caelica.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>小荷尔拜因-吕策尔伯格《死亡之舞》全套高清图</title>
    <link href="https://caelica.github.io/2022/09/11/%E5%B0%8F%E8%8D%B7%E5%B0%94%E6%8B%9C%E5%9B%A0-%E5%90%95%E7%AD%96%E5%B0%94%E4%BC%AF%E6%A0%BC%E3%80%8A%E6%AD%BB%E4%BA%A1%E4%B9%8B%E8%88%9E%E3%80%8B%E5%85%A8%E5%A5%97%E9%AB%98%E6%B8%85%E5%9B%BE/"/>
    <id>https://caelica.github.io/2022/09/11/%E5%B0%8F%E8%8D%B7%E5%B0%94%E6%8B%9C%E5%9B%A0-%E5%90%95%E7%AD%96%E5%B0%94%E4%BC%AF%E6%A0%BC%E3%80%8A%E6%AD%BB%E4%BA%A1%E4%B9%8B%E8%88%9E%E3%80%8B%E5%85%A8%E5%A5%97%E9%AB%98%E6%B8%85%E5%9B%BE/</id>
    <published>2022-09-11T07:20:31.000Z</published>
    <updated>2024-10-27T11:33:57.168Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>16世纪著名的《死亡之舞》艺术作品，由小汉斯·荷尔拜因设计、吕策尔伯格雕刻的木版画。 <a id="more"></a></p></blockquote><embed src="./Hans Holbein's Dance of Death (pdf).pdf" width="100%" height="700" type="application/pdf"><p>&emsp;&emsp;在之前的文章《<a href="https://caelica.github.io/2021/07/19/%E4%B8%80%E4%BA%9B%E6%8B%89%E4%B8%81%E8%AF%AD%E8%B0%9A%E8%AF%AD%E7%9A%84%E5%90%AB%E4%B9%89%E8%80%83%E6%8D%AE%E4%B8%8E%E6%B4%BE%E7%94%9F%E7%94%A8%E6%B3%95/"><font color="blue">一些拉丁语谚语的含义考据与派生用法</font></a>》中简单提到了这个在16世纪的各类“死亡之舞”中具有代表意义的作品，但一直没能找到这个作品的高清全集。后来我发现一个丹麦的网站上收录了全部内容，还做了详细解释，于是我下载了全部原图并以PDF的形式整合到了一起。网站原址为：<a href="http://www.dodedans.com/Eindex.htm" target="_blank" rel="noopener">http://www.dodedans.com/Eindex.htm</a></p><p>&emsp;&emsp;这套作品初版创作于1522年至1526年之间，由文艺复兴时期著名画家小汉斯·荷尔拜因（Hans Holbein）和著名雕刻艺术家汉斯·吕策尔伯格（Hans Lützelburger）共同创作的木版画，可谓是16世纪两位大师强强联手的典范。完整版共41+10张。以下是我按照剧情顺序，自己制作的目录列表，德语部分采用16世纪原文以对应原图上的标题：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Die Schöpffung aller ding (the Creation of All Things)万物的创始</span><br><span class="line"><span class="number">2.</span> Adam Eua im Paradiss (Adam <span class="keyword">and</span> Eve <span class="keyword">in</span> Paradise)亚当夏娃在乐园</span><br><span class="line"><span class="number">3.</span> Vsstribung Ade Eue (The Expulsion)亚当夏娃被驱逐</span><br><span class="line"><span class="number">4.</span> Adam bawgt die erden (Adam Tills the Soil)亚当在翻耕土地</span><br><span class="line"><span class="number">5.</span> Der Bapst (The Pope)教皇</span><br><span class="line"><span class="number">6.</span> Der Keyser (The Emperor)皇帝</span><br><span class="line"><span class="number">7.</span> Der Künig (The King)国王</span><br><span class="line"><span class="number">8.</span> Der Cardinal (The Cardinal)红衣主教</span><br><span class="line"><span class="number">9.</span> Die Keyserinn (The Empress)皇后/女皇（现代德语为kaiserin，二者都可以指，下面的王后女伯爵等同理）</span><br><span class="line"><span class="number">10.</span> Die Küniginn (The Queen)王后/女王</span><br><span class="line"><span class="number">11.</span> Der Bischoff (The Bishop)主教</span><br><span class="line"><span class="number">12.</span> Der Hertzog (The Duke)公爵</span><br><span class="line"><span class="number">13.</span> Der Apt (The Abbot)修道院长</span><br><span class="line"><span class="number">14.</span> Die Aptissinn（The Abbess)女修道院长</span><br><span class="line"><span class="number">15.</span> Der Edelman (The Nobleman)贵族</span><br><span class="line"><span class="number">16.</span> Der Thumherr (The Canon)司铎</span><br><span class="line"><span class="number">17.</span> Der Richter (The Judge)法官</span><br><span class="line"><span class="number">18.</span> Der Fürspräch (The Lawyer)律师</span><br><span class="line"><span class="number">19.</span> Der Ratssherr (The Senator)议员</span><br><span class="line"><span class="number">20.</span> Der Predicant (The Preacher)传教士</span><br><span class="line"><span class="number">21.</span> Der Pfarrherr (The Priest)牧师</span><br><span class="line"><span class="number">22.</span> Der Münch (The Monk)僧侣</span><br><span class="line"><span class="number">23.</span> Die Nunne (The Nun)修女</span><br><span class="line"><span class="number">24.</span> Dass Altweyb (The Old Woman)老妇人</span><br><span class="line"><span class="number">25.</span> Der Artzet (The Physician)医师</span><br><span class="line"><span class="number">26.</span> Der Sternensecher (The Astrologer)占星者</span><br><span class="line"><span class="number">27.</span> Der Rychman (The Rich man)富人</span><br><span class="line"><span class="number">28.</span> Der Kauffman (The Merchant)商人</span><br><span class="line"><span class="number">29.</span> Der Schiffman (The Sailor)水手</span><br><span class="line"><span class="number">30.</span> Der Ritter (The Knight)骑士</span><br><span class="line"><span class="number">31.</span> Der Groff (The Count)伯爵</span><br><span class="line"><span class="number">32.</span> Der Altman (The Old Man)老人</span><br><span class="line"><span class="number">33.</span> Die Greffinn (The Countess)伯爵夫人/女伯爵</span><br><span class="line"><span class="number">34.</span> Die Edelfraw (The Lady)女贵族</span><br><span class="line"><span class="number">35.</span> Die Hertzoginn (The Duchess)公爵夫人/女公爵</span><br><span class="line"><span class="number">36.</span> Der Krämer (The Peddler)小贩</span><br><span class="line"><span class="number">37.</span> Der Ackerman (The Peasant)农民</span><br><span class="line"><span class="number">38.</span> Dass Jung kint (The Young Child)小孩子</span><br><span class="line"><span class="number">39.</span> Gebeyn aller menschen (Bones of All Men)众人的尸骨</span><br><span class="line"><span class="number">40.</span> Dass Jüngst gericht (The Last Judgment)最后的审判</span><br><span class="line"><span class="number">41.</span> Die Wapen dess Thotss - Gedenck das end (the Escutcheon of Death - Remember the End)死神的纹章盾徽 - 记住一切的结局</span><br><span class="line"><span class="number">42.</span> Soldier士兵</span><br><span class="line"><span class="number">43.</span> Waggoner马车夫</span><br><span class="line"><span class="number">44.</span> Gambler赌徒</span><br><span class="line"><span class="number">45.</span> Robber强盗</span><br><span class="line"><span class="number">46.</span> Blind man 盲人</span><br><span class="line"><span class="number">47.</span> Beggar乞丐</span><br><span class="line"><span class="number">48.</span> Drunkard酒鬼</span><br><span class="line"><span class="number">49.</span> Fool 愚者</span><br><span class="line"><span class="number">50.</span> Young woman年轻女人</span><br><span class="line"><span class="number">51.</span> Young man 年轻男人</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;1526年的初版是40幅木版画，这个版本被称为“印刷校样版”，即“Printer’s proofs”或”proof impressions”，此版本不含有“占星师”，可能是为了凑40个的整数；而1538年出版商梅尔基奥尔和加斯帕.特雷克塞（Brothers Melchoir and Gaspard Trechsel）兄弟在法国里昂正式出版了这套木版画，补上了缺少的“占星师”。虽然吕策尔伯格在1526年去世，荷尔拜因在1543年也去世了，但后续的一些艺术家在大约于1545年至1562年的时间中，在模仿两位大师风格的基础上又向其中陆续增添了士兵、车夫、赌徒、强盗等十幅作品。共同组成了41+10的完整作品集。这部作品集被后世的许多画家临摹或参考创作过。其中一些经典篇目如“骑士”、“富人”、“士兵”等，更是广受欢迎。</p><p>&emsp;&emsp;据说这部作品一经问世就被法国名为维达尔·德·贝卡尼斯（Vidal de Bécanis）的宗教审判长（General inquisitor）下令禁止，可能是认为它有丑化宗教人士的嫌疑。有必要说明的是，当时正值宗教改革最为激烈残酷的时期，在荷尔拜因创作这部作品的时候，也就是1525年，德意志中部爆发了著名的闵采尔农民起义，最终于1525年5月15日的弗兰肯豪森战役（Battle of Frankenhausen）中，7000名农民起义者被诸侯联军包围，约5000人被杀害，各地起义也均在一年之内遭镇压。在德意志文化圈出生长大的荷尔拜因不可能不知道这些事，这部作品直到12年后即1538年才有人在法国出版，也很可能和当时的社会情况有关。</p><p>&emsp;&emsp;关于“死亡之舞”的背景已在前文中叙述过，在此不赘述。从荷尔拜因这41幅画来看，故事是从亚当和夏娃的传统圣经故事开端，而死神则在亚当夏娃被逐出伊甸园就开始跟随着他们，即死神从此常伴人类。接下来则是社会各个阶层的角色被死神拖入死亡的场景。死神既动作滑稽、又所向披靡，且不止出现了一个，沙漏也是一个几乎和死神并排出现的元素，暗示着生者时日无多。虽然死神最终带走了所有人，但我们仍能在其中隐约看出作者的创作倾向——死神在带走穷苦百姓的时候显得较为礼貌、平和；而在带走那些作威作福、目中无人的角色时则是生拖死拽、百般嘲弄。作者甚至直接描绘出这些角色的恶行现场——如【17.法官】中展现了一位收受贿赂的法官；而在【8.红衣主教】中更是直接展示了红衣主教出售赎罪券的场景，其中的批判意图可谓直截了当。也难怪这部作品被那位审判长当成了眼中钉。</p><p>&emsp;&emsp;而值得注意的是倒数三张图片（即39、40、41），在【39.众人的尸骨】中，绘制的是经典的题材“死神胜利”的场景，所有人都已死去，只剩下得胜的骷髅们吹起了乐器敲起了鼓；而在【40.最后的审判】中，上帝终于出现，人类又似乎重新复活了。而骷髅们则全部消失，故事也没有明确交代这些大获全胜的死神究竟怎么样了。是上帝像在《浮士德》中制裁墨菲斯托那样一般，阻止了死神的阴谋大计，并让死去的人们都得救了吗？作者没有明说。不过整个故事也就到此结束了，整部作品的主题可以看作是以死神的元素复刻了传统的宗教故事。</p><p>&emsp;&emsp;而最后一张图【41.死神的纹章盾徽】，则是荷尔拜因为死神这一主题设计的纹章形象，并将这个纹章放在1538年版本的最后，这是那时的“死亡之舞”作品中的一个常见的做法。这个图片伴随着一条圣经中的引用，即武加大本（Vulgate）中的《西拉书（Sirach）》第7章节的最后一句：</p><blockquote><p>…in omnibus operibus tuis memorare novissima tua et in aeternum non peccabis.<br>…无论你做任何事情，都要记住最后的结局（这里指的当然是死亡以及最后的审判），这样你就永远不会犯大错。</p></blockquote><hr><p>&emsp;&emsp;最后额外说一点，上面说的《西拉书》又称《便西拉智训（Ecclesiasticus）》，中文也通常翻译为《德训篇》、《次经传道书》（并非《传道书》）或《智训》。此书在天主教或东正教圣经中为旧约中的【正典】（Canon），也就是正式篇目，但在新教中则属于【次经】（Apocrypha），而非正典篇目。因我们今天能看到的《圣经》以新教圣经居多，故《西拉书》通常无法在一些圣经中找到，属于是圣经不同版本的问题。</p><p>【次经】即Apocrypha或Deuterocanonical Books，有时又称作“伪经”、“旁经”、“外经”等，中文并没有一个约定俗成的通行翻译，但需要指出的是，“伪经”这个翻译是错误的。</p><p>真正的【伪经】应该写作Pseudepigrapha，字面意思是“伪名书、托名假作”，即假冒其他作者之名号而创作的作品，目的是增加作品的可信度。而在【次经】的名称中，Apocrypha的词根是“隐藏的”的含义，Deuterocanonical的字面意思则是“第二类正经”。一般在宗教历史学上认为，Apocrypha也是真正的古代犹太经典著作，与正典具有同等的地位，故在宗教意义上也具有同等的信仰价值，只是由于种种历史原因，没有被列入后世一些不同宗派、不同版本的圣经中。像《西拉书》、《犹滴传》这类就属于Apocrypha。20世纪如死海古卷等一些重要古籍的出土，侧面说明了仍可能存在没有被发掘出的次经，也说明即使是古代的希伯来抄本圣经也绝非只有一个标准版本。综上所述，次经是真经，不是伪经。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;16世纪著名的《死亡之舞》艺术作品，由小汉斯·荷尔拜因设计、吕策尔伯格雕刻的木版画。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="艺术" scheme="https://caelica.github.io/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="文化" scheme="https://caelica.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>读胡适的《请大家来照照镜子》</title>
    <link href="https://caelica.github.io/2022/08/27/%E8%AF%BB%E8%83%A1%E9%80%82%E7%9A%84%E3%80%8A%E8%AF%B7%E5%A4%A7%E5%AE%B6%E6%9D%A5%E7%85%A7%E7%85%A7%E9%95%9C%E5%AD%90%E3%80%8B/"/>
    <id>https://caelica.github.io/2022/08/27/%E8%AF%BB%E8%83%A1%E9%80%82%E7%9A%84%E3%80%8A%E8%AF%B7%E5%A4%A7%E5%AE%B6%E6%9D%A5%E7%85%A7%E7%85%A7%E9%95%9C%E5%AD%90%E3%80%8B/</id>
    <published>2022-08-27T07:31:55.000Z</published>
    <updated>2022-12-23T07:55:11.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>一九二八年的文章。 <a id="more"></a></p></blockquote><p>《请大家来照照镜子》，可以在wiki页面直接查看原文：<a href="https://zh.wikisource.org/zh-hans/%E8%AB%8B%E5%A4%A7%E5%AE%B6%E4%BE%86%E7%85%A7%E7%85%A7%E9%8F%A1%E5%AD%90" target="_blank" rel="noopener">https://zh.wikisource.org/zh-hans/%E8%AB%8B%E5%A4%A7%E5%AE%B6%E4%BE%86%E7%85%A7%E7%85%A7%E9%8F%A1%E5%AD%90</a></p><p>&emsp;&emsp;偶然看到这篇胡适先生在1928年写的文章，其文笔可谓锐利无比，在今天看来也很通俗易懂。我并没有读过太多胡适和鲁迅的文章，因为我个人来说其实向来都和鲁迅先生的那句话保持一致：“我以为要少——或者竟不——看中国书，多看外国书”。这不代表中国没有好书，只是实在少到可怜，与其在垃圾堆里找食，不如老老实实坐到餐桌前吃一顿好的。不过可以肯定的是，像鲁迅胡适这些人的作品在20世纪初无疑是具有启蒙性质和指导意义的，但对于今天的人来说，最让人感触颇深的却是意识到这是一百年前的文字，面对的居然是一百年都没有解决的难题。</p><p>&emsp;&emsp;在今天看来，一百年前安诺德先生提出的“三个大问题”：即全国的铁路和交通问题、教育和工业化问题、个人的责任心问题，似乎是被解决了，但我们也都明白，问题只是在表面上解决了，实际上并没有解决得很好很彻底。而胡适本人在文章中给出的两个解决方案：肯认错，和死心塌地的去学，则是决绝从来都没有做到过的。为什么我们永远都在落后，即使是眼看就要有那么一点追上的机会，却还是被一股怪力给无情地拉了回去？我想答案也很明白，就是我们从来都没有真正低头认错，而正是因为没有低头认错、承认自己不如人，才做不到“死心塌地的去学”，学不到“死心塌地”的核心内容。</p><blockquote><p>这种急需的新觉悟就是我们自己要认错。我们必须承认我们自己百事不如人，不但物质上不如人，不但机械上不如人，并且政治社会道德都不如人…</p></blockquote><blockquote><p>因为我们从不曾悔祸，从不曾彻底痛责自己，从不曾彻底认错。二三十年前，居然有点悔悟了，所以有许多遣责小说出来，暴扬我们自己官场的黑暗，社会的卑污，家庭的冷酷。十余年来，也还有一些人肯攻击中国的旧文学，旧思想，旧道德宗教，——肯承认西洋的精神文明远胜于我们自己。但现在这一点点悔悟的风气都消灭了。现在中国全部弥漫着一股夸大狂的空气：义和团都成了应该崇拜的英雄志士，而西洋文明只须“帝国主义”四个字便可轻轻抹煞！政府下令提倡旧礼教，而新少年高呼“打倒文化侵略！”。</p></blockquote><p>&emsp;&emsp;不论是鲁迅也好，胡适也好，还是文中的这位安诺德先生，不知这些老先生如果活到今天会是如何感想，不，他们都是没有“资格”活在这个社会的，这些人如果活到今天，都会被全网fs，重则那啥，虽然我们知道人家老爷子活着的时候早就远走高飞，62年就去世了。但我猜，就是强如他，智慧如他，他写这篇文章的时候恐怕也无法预料到一件事：</p><p>&emsp;&emsp;那就是低头认错、承认自己不如人，承认西洋的精神文明远胜于自己，居然是如此之难！简直难于上青天——难过了洋枪洋炮，难过了全民普及教育，难过了全国铁路交通网，难过了大学里的量子力学，难过了全国电气化、核电站和载人航天，难到了一百年都做不到的水平上。</p><p>&emsp;&emsp;古时候洋人送来咕咕钟，我们曰“淫技奇巧”；洋人送来洋枪洋炮，我们认为没比自家的好到哪去；终有一天洋人把步枪顶在头上了，才真正下决心去学点什么先进的东西，好来打败洋人。19世纪的人只看到了咕咕钟和洋枪洋炮背后的近代化工厂和生产线设备，却没有意识到工厂和设备的背后，是一套工业体系和适应工业化的社会结构；接下来的事情，我们这几十年的教科书的口径也都是这样完全一致的：从学西方人的技术到学西方人的思想和制度，似乎就是走上了正道。但后面这一百年的经历告诉我们，事情似乎远远不止这么简单。首先我们学来的所谓“思想”、所谓“制度”，其实更大程度上说是偏向政治和经济方面的思想和制度，这些所谓的制度和思想本质上来说是偏功利性的，是为了建设工业化社会的制度和思想。虽然功利性本不是坏事，但它们从来都没有在合理的框架下运行，各路先进的制度和思想到了这里就如同掉进了一个“大染缸”，产生出千奇百怪的“本地化版本”，连发达国家的人看了都要目瞪口呆。</p><p>&emsp;&emsp;而工业化的社会、制度、经济、政治等思想理论体系的背后是什么？这一层的概念因为脱离了直接利益，就很少有人去思考了。按照胡适那个年代的观点，可能会说是教育体系，是培养现代化人才的教育体系，只要有了列强们的教育体系，就有了可以比肩列强的人才，就能诞生后面的一切。就像胡适和安诺德提出的兴办教育的方案，“用教育来打倒愚昧，用实业来打倒贫穷，用机械来征服自然”，固然没错，但最关键的问题来了，教育体系和老师出了问题的教育还算不算教育？这样的教育还能不能打倒愚昧，成为后续一切内容的First Cause？</p><p>&emsp;&emsp;显然，不行。这也正是那个年代的人难以考虑到的问题，也是站在现代这个时间点才能得出的一个推想，这并不容易，放到发达国家，也起码得是第二次世界大战后才逐渐认识到这个问题：</p><p>&emsp;&emsp;教育体系的背后站着的是一个个大大小小的老师，而老师也是人，也是需要被培养被教育的。而这并不是一个鸡生蛋蛋生鸡的问题——因为人并不一定要有老师才能成为老师。这个概念最终推向的是什么才能真正培养人——即一个社会（注意，是社会，不是教育机构）如何培养出现代意义上的人的问题，再次强调是在排除了教育体系的情况下——一个没有老师、上不起学、没有文凭，甚至从来就没有踏官方进教育机构一天的人，能否在这个环境中成长为现代意义上的人的问题。最后我们发现，可能是一个社会的整体状态和精神风貌在影响着这个问题的结果，是它们决定了这个人在成长过程中能接触到什么东西，从而产生什么样的思考和判断。而老师们和教育机构只是这个大框架中的小小一环。</p><p>&emsp;&emsp;而这背后又是什么呢？很明显到了这一层，就相当的抽象了，它可能是一个社会芸芸众生的<strong>潜意识中</strong>对一些基本概念的认识理解程度，如对是非善恶、法治精神、信仰等的理解水平，对科学精神、人文精神的认同程度或持有状态，对自由和奴役、生存和死亡等终极问题的态度和思考，等等。<strong>这些东西甚至难以用语言表达，它们是人类精神活动的底层逻辑，是比白纸黑字的规章制度、思想理论更加虚无缥缈，更加看不见摸不着的东西</strong>。而教育机构从不能解决这些问题，我甚至认为，教育机构也不应负全责去处理这些问题，因为无论是官方的还是私人的教育机构，它们通常都是逐利的，或是带有某种目的的。即使是在发达国家，我们也能够看到传统教育机构在处理这些问题上的种种弊病。那些好的教育更多的也只是起到辅助作用，而一个坏的教育则是愚昧和谎言的制造工厂，是比核战争还可怕的东西，毒害了一代又一代的人。</p><p>&emsp;&emsp;答案到这里已经很明显，我们的落后是精神上、灵魂上的落后。甚至可以说如果不从这一层级上得到彻底解决，就没有资格成为真正意义上的现代人和现代社会，无论是学再多的先进技术、思想理论都没有用，也就永远追不上发达国家的步伐。就从这一层级上来说，即使是今天，我们中间认识到的人可谓是凤毛麟角，沧海一粟，否则这个问题也绝不会一百年都解决不了。即使是手里有了遍布全国的铁路，甚至有了航空母舰，精神上、灵魂上却仍是几千年前“忠孝礼义”那套。有人可能会不服，说古典希腊、罗马也有讲究什么“四主德（Cardinal Virtues）”，也有希波克拉底的传统医术，从而论证传统那套东西仍然可以全方位指导今天的事物。这是完全错误的，其区别就在于，西方的这些思想在两千年中经过了数不清的“版本更新迭代”，尤其是像宗教改革、启蒙运动这样革命性的进步，早已不可同日而语了，没有现代人会觉得靠希腊罗马的那套古典法律和精神就能直接对接现代社会，更别说用什么“四液学说”来行医治病；而在我们这里，什么“驭民五术”，什么“阴气阳气”、“精气血津液神”可是每天都在这个社会实打实地运行着，男人就是“忠孝礼义”，女人就是“三从四德”，几千年过去了却压根没怎么更新进化过！现在的人虽然嘴上不明说，但骨子里没变，并且一有机会就想把它们全捡回来，好好摆到庙堂上供一番。</p><p>&emsp;&emsp;这下算是说清楚了为什么一百年都没做到的原因，是人出了大问题：<strong>他目光太短浅，太急功近利，没有意识到那些不能直接给他带来物质利益的、看不见摸不着的东西的重要和伟大之所在</strong>；就算是有幸意识到了，却放不下那个架子，不肯改变自身的形象；他害怕新东西，不适应事情的变化，怕新事物超出了他的控制范围，最终却要去主动抵制这些新事物带来的变革。甚至我敢说，只要再有人认识不到、或是不承认这样的落后，这个国家就还要继续在这个荒唐的迷宫中兜兜转转下去，一百年都不止。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一九二八年的文章。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="随想" scheme="https://caelica.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="文化" scheme="https://caelica.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>画一个燧发枪小姐姐</title>
    <link href="https://caelica.github.io/2022/08/05/%E7%94%BB%E4%B8%80%E4%B8%AA%E7%87%A7%E5%8F%91%E6%9E%AA%E5%B0%8F%E5%A7%90%E5%A7%90/"/>
    <id>https://caelica.github.io/2022/08/05/%E7%94%BB%E4%B8%80%E4%B8%AA%E7%87%A7%E5%8F%91%E6%9E%AA%E5%B0%8F%E5%A7%90%E5%A7%90/</id>
    <published>2022-08-05T08:43:28.000Z</published>
    <updated>2024-10-04T07:22:31.695Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>似乎是有进步的对吧？ <a id="more"></a></p></blockquote><img src="/2022/08/05/画一个燧发枪小姐姐/Fusilier.png" title="a"><hr><p>前段时间对拿破仑战争时期的武器与制服很感兴趣，也研究了不少时间。于是就这么开始了。采用了新的笔刷和上色思路后，观感的确比之前的作品要好一些。</p><p>制服自由发挥的居多，但武器基本都是照抄历史原型的，步枪是法国共和九年（An IX）的沙勒维尔（Charleville）系列的步兵步枪，准确的来说这个型号是“龙骑兵型（Dragoon）”。在之前的文章《<a href="https://caelica.github.io/2021/04/09/%E7%AE%80%E5%8D%95%E7%9A%84%E6%89%8B%E5%8A%A8%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/"><font color="blue">简单的手动批量下载网页图片的方法</font></a>》中简单介绍过一些有关的信息，但后来了解深入以后，我发现那篇里面写的一些内容不太对。18世纪那会其实制式武器、标准化、标准件这些概念才刚刚起步，说到底，远远不像今天的武器和设备上到型号下到零件都那么规范严格，更没有像今天STANAG弹匣这样的玩意。各种军刀、枪械等往往是一种习惯型号由很多工厂和作坊在生产，某些零部件存在相当程度的差异，甚至可以说在大多数情况下都不能够通用。</p><p>我们所谓的“沙勒维尔步枪”实际上指的是18世纪法国生产的一系列武器，远非M1777一种型号，这些武器原理上其实大同小异，所以“沙勒维尔步枪”其实是一种通称叫法，而更精确的描述、类似于“共和九年型（modèle An IX）”这样的叫法（法兰西共和元年是1792年，共和九年即为1800年）也不是说就一定能规范到每一个武器零件上，况且，还有很多其他国家大量仿制这些武器，如普鲁士、奥地利等，沙皇俄国的“图拉步枪”也是原样照抄，美国建国后的第一种标准制式步枪——斯普林菲尔德M1795也是在沙勒维尔的基础上仿制而来。这么一来的话，沙勒维尔步枪确实无愧于“18世纪的AK”这个称号。</p><p>想更深入了解这些故事的可以参考这里：<a href="https://www.youtube.com/watch?v=UkwbNMMp018" target="_blank" rel="noopener">https://www.youtube.com/watch?v=UkwbNMMp018</a> 这个由ytb上一个著名古董枪博主制作的视频详细介绍了当年法国对军械零件标准化进程中的细节，以及对该武器的标准化工作最终遭遇失败的原因。</p><p>同时代英国的“棕贝斯（Brown Bess）”同样也是一种通称，即使是所谓的“长陆型（Long Land Pattern，意思是陆军长枪，其实我更愿意翻译为“长陆样”，以区别于今天常见的Model和Type的汉语翻译）”在几十年间也是有明显变化的。</p><p>厘清这些后，作为绘画首先遇到的问题是，18世纪的枪实在是太长了，画面不是很容易放得下，沙勒维尔步枪在1777年的步兵型全长是1.52米，拿破仑战争时期的型号大部分缩短到1.42米（龙骑兵型其实和步兵型长度一样，真正短一截子的是卡宾型）。这么接近一人高的玩意，装上刺刀更是突破一米八，这在今天是很难见到的，如二战时期主流步枪大部分长度在1.1米这个水平上，刺刀也大大缩短；今天的主流突击步枪全长基本都在900mm之下，无托结构的还要更短一点。</p><p>这导致我最初很难安排火枪的摆放位置，一度考虑以更短的线膛枪或卡宾枪取而代之，然而削了长度之后又发现，那种长步枪带来的第一感觉其实是旧时代燧发枪兵最核心的观感，让人一眼就能辨认出那个年代的氛围，才意识到这是不可或缺的，于是坚定了采用长枪的设计。除了把它做得比真实情况更短之外，还想到了一个取巧的方法：利用一定程度的透视来缩短长度。但这也大大增加了设计的难度，细心的人估计也能看出，目前这个透视效果还是有着较明显的问题，但无奈水平有限，这已经是我能做到看起来违和感最小的结果了。不过也没关系，还是要难一点才有挑战性嘛。步枪也采用了材质笔刷修理木头和金属的材质效果，从效果来看，有还是比没有强的多。</p><p>军刀是那个年代步兵比较流行的一种被称作Briquet的武器，整体是Saber的样式，但比起真正的骑兵刀长度要短得多，设计也相对简易。从长度可以看出它不是真的用来战斗的主武器，本是配发给掷弹兵和近卫军用来摆显身份的，但相当受普通步兵的欢迎，据说步兵们认为佩戴这种军刀能够让自己看起来很有身份，毕竟无论是骑兵还是各路军官都有一把闪闪发光的军刀，而普通线列步兵往往只配发一把连牛肉都切不了的刺刀。这种习惯也渐渐流行到了诸如俄国、普鲁士等国家的军队中。我个人也是相当喜欢Briquet的感觉，也难怪它会如此受欢迎。</p><p>有一些结构问题是我从画面平衡和布局的角度做出的决定，比如Shako的长穗其实更应该出现在右侧，但因为燧发枪本身是不能被镜像翻转的（燧发机构必须在枪体右侧，基本没有在左侧的，除非是双管武器），所以就固定在了左侧。刺刀也是故意放到了能看见的地方，画了那么久的艺术资源也得有效利用起来嘛。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;似乎是有进步的对吧？&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="绘画" scheme="https://caelica.github.io/tags/%E7%BB%98%E7%94%BB/"/>
    
      <category term="设计" scheme="https://caelica.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="历史" scheme="https://caelica.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>那些追求真正价值的上传者</title>
    <link href="https://caelica.github.io/2022/08/05/%E9%82%A3%E4%BA%9B%E8%BF%BD%E6%B1%82%E7%9C%9F%E6%AD%A3%E4%BB%B7%E5%80%BC%E7%9A%84%E4%B8%8A%E4%BC%A0%E8%80%85/"/>
    <id>https://caelica.github.io/2022/08/05/%E9%82%A3%E4%BA%9B%E8%BF%BD%E6%B1%82%E7%9C%9F%E6%AD%A3%E4%BB%B7%E5%80%BC%E7%9A%84%E4%B8%8A%E4%BC%A0%E8%80%85/</id>
    <published>2022-08-05T02:48:45.000Z</published>
    <updated>2022-08-27T09:51:26.410Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>写给那些不知名的上传者们。 <a id="more"></a></p></blockquote><p>&emsp;&emsp;不知道为什么突然想到了AFK PL@YERS，和那个我能和同学坐在屏幕前面看一下午魔兽搞笑视频的日子。</p><p>&emsp;&emsp;大概是2010年前后，记忆中有《星际争霸2》上线时的消息，那会视频都在优酷网看（应该也有土豆网），虽然每点一个视频都要等大概30-60秒的烂广告，却还是让人看的很入迷，那会魔兽还很火，看的最多的就是AFK PL@YERS、性感玉米这些，当然还有《我叫mt》。巫妖电视王，晚安部落，性感玉米的《网瘾战争》这些更是看了一遍又一遍。这些创作者们直接调用魔兽世界的游戏框架和地图、人物模型，制作出机械木偶般的游戏动画，比起传统的动画来说虽然看起来十分简陋粗糙，却仍讲出了活灵活现的故事。可贵的是，这些往往是由几个朋友们拼凑而成的同好小队，靠着对游戏的热爱和热情，靠着对真相和事实的坚持，胜过了影视、动画行业的很多所谓的专业人士和团队。现在去B站等视频网站搜索AFK PL@YERS也找不到多少视频了，可能是现在对外网搬运有一定的打压，以前我记得可是有好几个人在系统地在搬运他们的作品，数量都是一整页一整页，能让人在炎热的夏天拿着冰镇饮料快乐一下午。</p><p>&emsp;&emsp;现在想想，那会优酷、土豆其实一定程度上充当了Youtube的本地化版本，因为那时管的不严，有大量不知名的上传者搬运Youtube上优质的作品（其实通过他们也筛选掉了Youtube上的低劣内容），经常能找到哪个独立音乐人的新作品，哪个黑死金乐队的现场录像，魔兽星际的游戏原声，从来没能在盗版游戏中看到的结局动画，还有那些我从来没有接触过的电影和动漫。我记得我还看过一些枪械火药制造过程的录像，Youtube上最早的一批冷兵器和盔甲锻造视频，甚至还有几首后来被汇入Botho Lukas Chor的宝藏专辑《Wenn die Landsknecht singen》里的音乐（确实很让人吃惊，连这都有！而且比这张14年的汇总专辑还早，但十多年前我对德语和Landsknecht的历史一无所知，只是觉得很好听），以及某些打擦边球的玩意（质量也确实很高就是了）。当然那些太敏感直接的话题肯定是没有的。那会确实是没有什么自媒体圈子、营销号的，网友们ID都是一串IP地址。虽然这样的搬运或者盗版视频侵犯了原作者的版权也是事实，但还是能让我们接触到这么多优秀的作品。我后来在Youtube上也一个一个找回了那些原作者，虽然很多都在数年前就已经停更了，但也总归是找到了他们。</p><p>&emsp;&emsp;不过现在打开视频网站都是一群什么玩意？说实话没人会喜欢现在这样的东西，除了一些官方牵头搞得诸如后浪二舅之类的假大空，大部分自媒体作者也不是在做什么有价值的原创内容，而是天天在那造人设、以打造泛社会化的meme为目标，批量生产没有什么技术含量的低成本视频，试图以这些东西来吸引全网无头苍蝇一般的受众，当年玉米就曾在作品和现实中狠狠吐槽过这些正在互联网上越来越泛滥的虚假：为什么我们生产的大部分电影、电视剧、小品相声，都那么无聊？还不是因为假的东西太多。虚假的作者和没有价值的作品在一个正常的互联网上是没有任何生存空间的，拒绝虚假和错误是人和动物的天性，他们在被强迫的时候接受了大量的虚假和错误，但当他们接触到自由的互联网的时候，又为什么要去主动收看毫无价值的东西呢？相反，如果谁在那时的视频站发布“假大空”，干什么都散发着一股铜臭味的时候，一定会被那些顶着一串IP地址的网友们亲切招呼。</p><p>&emsp;&emsp;但是在一个不正常或者说环境很恶劣的互联网体系和社会环境中，一切都翻了过来，人们比的不再是谁的作品更有价值更有意义，而是只认让流量和金钱，看你搞这个视频能不能变现，做这个爱好能不能养家糊口。结果就是，那些说起话来神采奕奕个个都有一股推销员的感觉的家伙们，虽然他们十句话九句假，却占据了网络媒体主流。甚至我觉得现在这个环境下，这些都可以拿来当成一条鉴定标准：那些说话表情像推销员一样一惊一乍的，封面放个张个大嘴巴脸，再配上一堆像香港广告牌风格一样的标语，特效还满天飞，标题也不是正常句子的，大概率都是垃圾。一般来说即使是在市场环境下，这些东西有那么一点也就够了，最后还是得靠质量和实力说话。但现在的视频却把它们当成主要目标在经营，最应该下功夫的视频内容却毫无价值。俗话说的好，丑人多作怪，现在Youtube上也有越来越多的垃圾作者，这个傻掉的网站也学起Tiktok开始搞无聊的短视频业务了，我认为它们一样统统适用于这个标准。</p><p>&emsp;&emsp;就看视频这点上，我宁愿回到那个我只有一个小手机，在上课、在被折磨人的各种试卷困住的时候偷偷看的状态，因为我知道那个社区是有活力有价值的，上传者是目光敏锐的，它就像一座宝库一样等着我去探索，而不是现在这种同质化严重，只需看一眼就知道这视频该是有多无聊的内容。</p><p>&emsp;&emsp;我也是最近才知道AFK PL@YERS成员之一的“战锁锁不住”就是后来开发游戏《返校》的导演，这中间也隔了很多年了，一些台湾的网友似乎也对这个感到惊讶。不过我想，某种程度上它加深了我的一个猜想的可能性：“能人”比“专业人”要更可贵，因为“专业人”是可以在简单模型下训练出来的，而“能人”往往是复杂条件下自我培养出来的，“能人”的高明之处并非某个专业水平的高低，而在于其文明程度上的整体先进（甚至我认为社区、社会也同理）。正因为如此，能人也始终是能人，这些人从事任何事业都不会落到后面去，而“专业人”一旦离开专业岗位往往难以适应，这被称为“专家陷阱（Expert trap）”。我相信，像战锁和玉米这样的人，他们的才能是显而易见的，即使他们被这个社会压制了，哪怕是五年、十年甚至一辈子，他们也会把文明的火种传递到下一代身上。再不济，哪怕就像是那些早期从Youtube上搬运来视频的上传者们一样，比起什么马云马化腾，这些无名无姓的人可能才是国内互联网被忽略的先驱者们，他们连个像样的头像也没有，估计从没想过要靠这些视频火一把或者赚到什么利益，就像那些给开源社区默默贡献着的人，仅仅是出于他们对价值判断的敏锐程度和对事物的热情，就足以使他们把这些有价值的东西带到高墙之内来。虽然这些作品随着服务器的关停，以及原作者的停更等等因素湮灭在了网络中，我再登上那个收藏夹的时候，所有的视频都已经404。但那些深受他们作品影响的人会成为他们精神上的后人，这些人感受过充满价值与自由秩序的互联网，也就永远不会再掉头返回到曾经的虚假和错误中。终有一天，这些火种将重新燃起，那些先驱者们曾经培养出的才能与远见，也都会以另一种方式重见天日。</p><p>&emsp;&emsp;而我呢，我也想成为那样的人。不，不光是想，我一定要这样做。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写给那些不知名的上传者们。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="生活" scheme="https://caelica.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随想" scheme="https://caelica.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL命令行连接指定端口、以及修改数据库密码</title>
    <link href="https://caelica.github.io/2022/06/06/MySQL%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E3%80%81%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81/"/>
    <id>https://caelica.github.io/2022/06/06/MySQL%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E3%80%81%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81/</id>
    <published>2022-06-06T05:47:32.000Z</published>
    <updated>2022-06-09T09:15:41.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>用cmd命令行及Navicat界面连接数据库，实现修改数据库密码、连接不同端口（如3307等）、以及解决MySQL server has gone away的问题。<a id="more"></a></p></blockquote><p>首先说一下，如果只是为了解决问题的话，建议直接跳到文章中间从Navicat的方法进行，这里的cmd只是为了解释其机制。</p><h2 id="1-命令行连接MySQL数据库"><a href="#1-命令行连接MySQL数据库" class="headerlink" title=" 1.命令行连接MySQL数据库"></a><p align="left"> 1.命令行连接MySQL数据库</p></h2><p>&emsp;&emsp;MySQL的配置一般由数据库Data目录下的<strong>my.ini</strong>文件控制（Windows环境下叫my.ini，而在Linux环境下则是my.cnf），虽然直接修改这个文件也能起到一定作用，但容易出事，故一般情况下要配置MySQL的话最好使用MySQL的命令行。从cmd就可以执行。从cmd连接MySQL数据库的方法如图所示：</p><img src="/2022/06/06/MySQL命令行连接指定端口、以及修改数据库密码/1.png" title="a"><p>&emsp;&emsp;因为我的MySQL装到了E盘上，而cmd默认路径在C盘的system32，所以我们首先得用<code>e:</code>换盘，否则怎么cd都没有用的。换盘后，cd路径到MySQL的<strong>bin</strong>目录下，即拥有mysqld.exe和mysql.exe的那个位置；<br>这里我采用的命令为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -hlocalhost <span class="attribute">--port</span>=3306 -uroot -p</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个命令的好处是可以实现对接指定的端口（如3307）。因为我实际上装了两个不同版本的MySQL服务（MySQL5和MySQL8），分别控制着<strong>localhost_3306</strong>和<strong>localhost_3307</strong>。一般的那种不指定端口的常规命令会默认连到localhost_3306去，就无法连接到3307了。故我们只需要将命令中port的值改为3307即可连入3307的服务器控制台。</p><p>&emsp;&emsp;接下来输入数据库密码，出现图中Welcome to the MySQL monitor等字样即说明连接成功。接下来即可执行其他命令。例如，我最近在导入大.sql文件（约200Mb）时遇到了<strong>“MySQL server has gone away”</strong>的问题，经查，这是由于数据库对导入的sql大小有限制导致的，需要修改这个限制值。首先通过命令来查看这个值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_allowed_packet'</span>;</span><br></pre></td></tr></table></figure><img src="/2022/06/06/MySQL命令行连接指定端口、以及修改数据库密码/2.png" title="b"><p>&emsp;&emsp;然后修改它。这里的文件大小是用<strong>字节（Bytes）</strong>计算的，可以自行换算成Mb等单位，如：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> global <span class="comment">max_allowed_packet=157286400</span>;<span class="comment">/* 设定为150Mb */</span></span><br><span class="line"><span class="keyword">set</span> global <span class="comment">max_allowed_packet=314572800</span>;<span class="comment">/* 设定为300Mb */</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后可以再输入一次命令查看限制值，可以看到已经改成了300Mb。整个过程就如图所示。</p><p>&emsp;&emsp;而实际上，在数据库管理工具（如Navicat）中也能实现这个功能，而且比cmd简单多了。这里我们就从Navicat上修改它。因为我现在已经放弃3307的端口（让二者共用3306，但冲突），故这里以3306为例：</p><img src="/2022/06/06/MySQL命令行连接指定端口、以及修改数据库密码/3.png" title="c"><p>&emsp;&emsp;在localhost_3306上 右键&gt;命令列界面 就可以进入命令行状态，事实上选中3306后直接按<strong>F6</strong>也可以（在上面的“工具”栏），比从cmd上方便太多了。之后的步骤和上面就是一样的。所以如果遇到需要用命令行执行的操作，在Navicat等图形化工具上进行处理明显是更合适的方法。</p><hr><h2 id="2-修改数据库密码"><a href="#2-修改数据库密码" class="headerlink" title=" 2.修改数据库密码"></a><p align="left"> 2.修改数据库密码</p></h2><p>&emsp;&emsp;利用MySQL的命令行我们也可以修改数据库的密码。前提是得知道这个密码，这里不涉及忘了密码的情况（还没研究过…）。</p><p>&emsp;&emsp;在Navicat上进入对应数据库连接的命令行界面，这里以3306为例，因为我们已经登录了这个连接，也就不需要再验证旧密码了，直接可以用命令新建密码。命令为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">"新密码"</span>);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;将命令中“新密码”修改为需要设定的密码即可。因为密码已被修改，再在数据库中执行动作可能会导致数据库掉线或者密码报错，此时建议先关闭连接，再用新密码连接一遍数据库即可（右键&gt;编辑连接&gt;在“密码”处输入新的密码）。</p><img src="/2022/06/06/MySQL命令行连接指定端口、以及修改数据库密码/4.png" title="d">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用cmd命令行及Navicat界面连接数据库，实现修改数据库密码、连接不同端口（如3307等）、以及解决MySQL server has gone away的问题。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="数据库" scheme="https://caelica.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="服务器" scheme="https://caelica.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Windows环境下编译TrinityCore</title>
    <link href="https://caelica.github.io/2022/05/24/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91TrinityCore/"/>
    <id>https://caelica.github.io/2022/05/24/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91TrinityCore/</id>
    <published>2022-05-24T10:55:26.000Z</published>
    <updated>2022-12-23T08:00:22.928Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>在Windows环境下通过基于TrinityCore的项目源码编译4.3.4-15595版本的服务端，以及服务端、客户端的配置工作，服务端的启动等及过程中的解释说明等。<a id="more"></a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><p align="left">前言</p></h2><p>在之前的工作（见<a href="https://caelica.github.io/2021/12/16/TrinityCore%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"><font color="blue">TrinityCore服务端的初步认识</font></a>）中，在不涉及源码编译的情况下，对Trinity服务端进行了简单的介绍，介绍了一些Trinity服务端的基本常识内容，并用别人编译好的服务端实现了3.3.5的WLK版本的服务端搭建。但由于服务端仍是使用现成的构建，略过了编译环节，也就导致一些功能无法实现，如自行提取对应版本的地图资源文件等，因为很多工具只有通过TrinityCore的源码编译才能生成。为了最大程度避免这些问题，从源码开始自行编译构建服务端无疑是最彻底的方案，故本次就从基于TrinityCore的项目进行源码编译。选择了一个基于TrinityCore的非官方分支项目即The-Cataclysm-Preservation-Project，也就是4.3.4版本的端，项目位于：<a href="https://github.com/The-Cataclysm-Preservation-Project" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project</a></p><p>本次说明中的资源都可以在这里找到，该分支项目也给出了TrinityCore的官方编译指南，即：<a href="https://www.trinitycore.info/en/install/Core-Installation/windows-core-installation" target="_blank" rel="noopener">https://www.trinitycore.info/en/install/Core-Installation/windows-core-installation</a> 。可以说，这次写的这个文章基本可以算是我对这篇TrinityCore官方文档的具体尝试，因为我也是初学者，认识浅薄，有能力的同学可以结合这个官方给出的文档共同参考，我这里重点是写出我自己在编译过程中遇到的具体问题，因为官方文档并不能够面面俱到。并且，这更多是出于我的“本地完备”的技术原则，这只是个占位符名称，因为目前我还没有想到（或学到、找到）一个词汇能够描述这个概念：<strong>即保证个人能够在彻底脱离国际互联网之后还能够以一定的资源开展一定形式的工作</strong>，这不是说我敌视互联网，而是为了应对最极端的情况，是类似于个人化的“防核地堡”的概念。</p><h3 id="什么是编译"><a href="#什么是编译" class="headerlink" title="什么是编译"></a><p align="left">什么是编译</p></h3><p>我觉得有必要以通俗的语言简单重复一下这个概念。<strong>编译实际上可以理解为一种计算机语言之间的“翻译”过程</strong>，即将程序开发者（人）书写的源代码“翻译”——源代码通常是以人可以识别的“高级语言”书写的（如C++、Java等等），翻译成由计算机（机器）才能识别的汇编语言或二进制机器语言等“低级语言”。并且最终由计算机输出生成在某个平台环境下运行的可执行程序，也就是我们平常看到的程序本身，相对于把译文打印装订成书。这个过程就叫编译。</p><p>（事实一再证明，很多基本问题从来不受重视，从来没有哪个老师真正能够告诉我（或试图告诉我）三极管、互联网、宪法以及文学艺术对个人和人类社会到底有什么意义，因为考试永远不会考你自己的理解，他们要的只是工具和程序）</p><h3 id="为什么选择4-3-4（CTM）"><a href="#为什么选择4-3-4（CTM）" class="headerlink" title="为什么选择4.3.4（CTM）"></a><p align="left">为什么选择4.3.4（CTM）</p></h3><p>回到正题，首先说一下为什么选择4.3.4的端。不仅是因为之前已经实现过3.3.5的搭建，更多的是出于游戏性的考虑。熟悉这个游戏的人都知道，CTM版本实际上对这个游戏系统做出了相当大的改动，这在曾经是有争议的（即使是放在今天来说可能也如此）。不过，对于私人搭建的服务端来说，CTM版本的改动无疑是再适合不过的——它将WOW的单机玩法提升到了前所未有的水平，无论是难度曲线还是改版后艾泽拉斯的地图任务的故事情节，要比老版本出色太多了。<strong>单从这一点来讲，我个人就对CTM版本有着非常高的评价</strong>。况且这个版本还新加入了大量优秀动听的音乐，并重新设计了艾泽拉斯的美景，所以说只作为单机游戏看待的话，CTM无疑比之前的老版本更好玩，也更具收藏价值。</p><p>接下来说一下4.3.4端普遍存在的问题。美中不足的事总是有的，因为现在CTM的端大多基于TrinityCore衍生而来，并非是Trinity官方的项目，故这方面的工作仍然不够充分。上面提到的CTM版本设计精良的任务需要复杂的脚本代码机制来实现，比起老版本简单枯燥的任务来说是好玩了不少，但也导致其修复难度较大。种种原因导致现在市面上的4.3.4版本的服务端源代码普遍没有3.3.5那么完善，这点也是不得不接受的事实。不过从这次我亲自测试的结果来看，即使有着很多bug问题，对于单机模式的游戏性来说，我仍更倾向于选择4.3.4版本。</p><h3 id="客户端准备"><a href="#客户端准备" class="headerlink" title="客户端准备"></a><p align="left">客户端准备</p></h3><p>在编译工作开始之前，我建议先下载好这个服务端对应的4.3.4-15595的客户端文件，即通过下面的工具：<br>通过运行wowregeneration下载客户端Data文件：<a href="https://github.com/The-Cataclysm-Preservation-Project/wowregeneration" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/wowregeneration</a><br>通过运行ClientDownloader下载客户端其他文件（如wow.exe等）：<a href="https://github.com/The-Cataclysm-Preservation-Project/ClientDownloader" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/ClientDownloader</a><br>这里不用clone代码，直接Download ZIP，解压后就可以运行下载器。全部下完后，将Data文件夹和其他文件放在一个目录下，拼合成完整客户端。这里的完整的4.3.4-15595客户端总大小约15.6GB。</p><p>以及TDB_full_434数据库信息文件（.sql文件）：<a href="https://github.com/The-Cataclysm-Preservation-Project/TrinityCore/releases/download/TDB434.22011/TDB_full_434.22011_2022_01_09.7z" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/TrinityCore/releases/download/TDB434.22011/TDB_full_434.22011_2022_01_09.7z</a></p><p>本次测试不使用远程服务器，即在本地（127.0.0.1）进行测试。</p><p>好了，编译工作现在开始。</p><h2 id="1-Windows上的环境配置"><a href="#1-Windows上的环境配置" class="headerlink" title="1. Windows上的环境配置"></a><p align="left">1. Windows上的环境配置</p></h2><p>对于Windows系统，为了进行编译，我们需要以下工具和环境：</p><blockquote><p>Git-2.23<br>gitExtensions-3.4.3.9999<br>cmake 3.22.1 （版本≥ 3.18.4）<br>boost 1.73.0（版本≥ 1.73.0）<br>Win64OpenSSL 1.1.1o<br>mysql community 8.0.29 (版本≥ mysql5)<br>Navicat8 或 Navicat premium<br>当然还必须要有Visual Studio，这里选择Visual Studio Community 2019，在配置时勾选上C++开发模块即可（此模块需要数个G的空间）。</p></blockquote><p>简单说一下每个东西的用途：</p><blockquote><p>git和gitExtension用来拉取GitHub项目端的源代码到本地，这里我们用clone的方式；<br>cmake用来把源代码编译成提供给Visual Studio的工程文件；<br>Visual Studio就是所谓的“宇宙第一IDE”，集成了各种开发工具和环境。这里我们主要用它来生成构建。<br>boost是为C++标准库提供扩展的扩展库；<br>OpenSSL是一个加密工具，通过SSL协议实现传输的加密对接；<br>mysql提供服务器系统；Navicat则提供数据库的图形化管理功能。</p></blockquote><p>安装每个工具的过程详见：<a href="https://www.trinitycore.info/en/install/requirements/windows" target="_blank" rel="noopener">https://www.trinitycore.info/en/install/requirements/windows</a></p><p>别的基本都没什么变数，这里主要说一下MySQL 8.0的安装。这里选择mysql community 8.0.29，安装包下载地址为：<a href="https://dev.mysql.com/downloads/windows/installer/8.0.html" target="_blank" rel="noopener">https://dev.mysql.com/downloads/windows/installer/8.0.html</a> ，选择432mb大小的那个msi进行下载。安装时首先选择Custom模式，因为若不选择Custom，MySQL是默认安装到C盘的，只有选Custom才能在之后的选项中改变安装路径，产品（product）中只需要选择安装MySQL Server 8.0.24-x64即可，别的是关于数据库的开发组件，不选。然后建议点击Advanced Options，自定义一个安装目录。将Install Directory（主程序目录）和Data Directory（数据库目录）定位到不同的两个文件夹里。如果之前装过MySQL的话可能会有个叹号提示，无视即可。这里我直接使用网络上找到教程的图片：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/1.png" title="a"><p>然后是填入默认数据库端口。端口一般默认是3306就行，直接next。但我因为之前还装过一个老版本的MySQL为3.3.5的端提供服务（同时还集成了V079冒险岛的数据库），我就改了一个3307，最后在服务端的配置文件（.conf）中将所有数据库的端口都改成3307即可。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/2.png" title="b"><p>最后是输入默认数据库名、数据库密码，这里建议都填root。若自定义的话这两个一定不能忘，否则会很麻烦。MySQL的服务名是无所谓的，建议就默认的MySQL80。</p><p>所以说，一个设备上安装两个MySQL版本是可行的，我这里就成功安装了两个版本的MySQL，算上冒险岛的话，已经在一台设备上集成了三个服务端。不过不推荐这样的做法，因为这样没法同时运行，两个MySQL的服务窗口和进程都是冲突的。若想运行旧版本的MySQL，则需在任务管理器&gt;服务中手动停止相关的进程（一般是mysqld），并停用相关的服务（MySQL80）。以后会想办法把旧的数据库都集成到MySQL8中。</p><p>MySQL安装完成后，建议直接用Navicat尝试连接localhost_3306的数据库，能连进去就说明数据库服务在正常运行。</p><h2 id="2-拉取源代码"><a href="#2-拉取源代码" class="headerlink" title="2. 拉取源代码"></a><p align="left">2. 拉取源代码</p></h2><p>用Git Extensions从<a href="https://github.com/The-Cataclysm-Preservation-Project/TrinityCore" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/TrinityCore</a> 拉取源代码。安装Git Extensions后，右键菜单栏会多出一些栏目，我这里在C盘新建一个TRINITY 4.3.4的文件夹，在其中右键选择GitExt Clone…，可将源代码克隆到本地：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/3.png" title="c"><p>分支（Branch）选择需要注意，这里的branch建议选HEAD或master，因为只有4.3.4相关的内容。我这里对源代码克隆经常显示失败，通常错误是没有Github端的响应，可能是因为我的全局魔法不够厉害导致的，不过多试几次后还是成功了。</p><h2 id="3-CMake生成C-方案和工程"><a href="#3-CMake生成C-方案和工程" class="headerlink" title="3. CMake生成C++方案和工程"></a><p align="left">3. CMake生成C++方案和工程</p></h2><p>先简单说一下这个CMake是干什么的，它可以从源代码生成不同平台或不同编译器需要的makefile（优化的编译方案）以及构建的工程文件。首先我们先建立一个名为Build的文件夹，如C:\Build。然后打开CMake工具（cmake-gui.exe），指定Browse Source（源码路径）和Browse Build（Build的路径，即这里的C:\Build）。然后点左下的Configure配置目标的工程平台，这里当然就选择Visual Studio 2019。下面两个不填，最后点击finish：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/4.png" title="d"><p>finish后，将会生成一些配置的缓存。首先检查Configuring是否成功完毕，即下方的框中是否存在Could not Found…之类的错误（如Could not Found OpenSSL、Could not Found MySQL等），如果有这类错误，说明对应的环境没有配置好，或是OpenSSL没有配置环境变量；如果黑字全部显示Found…，一般就能够成功Configuring done。在上方的红色区域，我们需要重点检查的是Tools选项是否被打勾，这个关系到是否编译出工具文件，这里必须打勾。确认Configuring和Tools都无误后，再点击一遍Configure，确认所有的目标（所有红色会消失），然后点击Generate生成构建方案：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/5.png" title="e"><h2 id="4-编译源代码"><a href="#4-编译源代码" class="headerlink" title="4. 编译源代码"></a><p align="left">4. 编译源代码</p></h2><p>Generate完成后，会有一个Open Project的按钮，点击即可从VS2019打开这个项目。也可以从C:/Trinity/Build/TrinityCore.sln的.sln文件利用VS打开这个项目（可能需要等待一小会让代码加载完毕）。从顶部的【生成】&gt;【配置管理器】中，将“活动解决方案配置”由默认的Debug模式改为RelwithDebinfo，这是一种介于Debug（调试模式）和Release（发布模式）之间的模式。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/6.png" title="f"><p>最后，我们在右边的 “解决方案资源管理器” 中右键ALL_BUILD（一定要点在All_build上），点击“清理”。清理完成后，再次右键，点击“生成”。这是最终的编译步骤，可能需要一小段时间（依机器配置不同），这一步我大概消耗了十几二十分钟。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/7.png" title="g"><p>编译完成后，先检查一下VS中输出的编译结果，即形如<code>Build: 22 succeeded, 0 failed, 0 up-to-date, 1 skipped</code>的最后一行，这里的数字不是定死的，我们只要确定没有failed的项目就行了。这样就可以在C:\build\bin\RelWithDebInfo中看到生成的文件。</p><p>检查一下生成的文件，这里面.pdb文件是编译时生成的数据库文件，可以不用管。我们首先将编译出的工具移动到一个独立的位置。并保存好。这里的工具有两种，第一个是connection_patcher.exe，用来patch客户端程序；第二种则是地图数据提取工具，即mapextractor.exe、mmaps_generator.exe、vmap4assembler.exe、vmap4extractor.exe四个.exe。</p><p>虽然编译已经完成，但编译结果不要删掉了，先留着，后面可能有用。</p><h2 id="5-拼合完整的服务端文件"><a href="#5-拼合完整的服务端文件" class="headerlink" title="5. 拼合完整的服务端文件"></a><p align="left">5. 拼合完整的服务端文件</p></h2><p>接下来的任务就是要用这里剩下的文件拼凑出一个完整的服务端。关于Trinity服务端的文件结构，之前在《<a href="https://caelica.github.io/2021/12/16/TrinityCore%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"><font color="blue">TrinityCore服务端的初步认识</font></a>》进行过描述。首先将这里的两个配置文件（worldserver.conf.dist、authserver.conf.dist / bnetserver.conf.dist或形如此类的文件）删去后缀.dist，使其变成worldserver.conf和authserver.conf / bnetserver.conf。然后将worldserver.exe、authserver/bnetserver.exe以及两个配置文件worldserver.conf、authserver/bnetserver.conf四个文件都移动到一个独立文件夹内，这个文件夹将成为服务端文件夹，文件夹名不能含汉字或特殊字符。authserver.conf和bnetserver.conf实际上作用相同，是一个东西，只是看这个源码版本里叫什么罢了。</p><p>然后，在这里复制放入三个.dll文件，这些dll文件通过OpenSSL控制服务端和数据库的对接，它们是：libmysql.dll、libeay32.dll、ssleay32.dll。这三个.dll都可以从环境程序中手动复制提取：</p><p>libmysql.dll位于MySQL主程序的lib目录下，如C:\Program Files\MySQL\MySQL Server 5.x\lib，复制其放入服务端文件夹；</p><p>libeay32.dll和ssleay32.dll位于OpenSSL主程序根目录中，如C:\OpenSSL-Win64\或C:\OpenSSL-Win32\（取决于你安装的是32位还是64位）；这里要说的是，新版本的32位OpenSSL中这两个.dll已经被改名为libssl-1_1.dll和libcrypto-1_1.dll；在64位新版本OpenSSL中叫libssl-1_1-x64.dll、libcrypto-1_1-x64.dll。如我们之前安装的是64位的OpenSSL，这里就复制libssl-1_1-x64.dll和libcrypto-1_1-x64.dll到服务端文件夹中即可。</p><h3 id="提取地图资源文件"><a href="#提取地图资源文件" class="headerlink" title="提取地图资源文件"></a><p align="left">提取地图资源文件</p></h3><p><strong>注意！这一步相当耗时，可能需要数个小时（依机器配置不同），建议留有充足的时间。</strong></p><p>我们先编写一个简单的.bat，将其命名为【提取Vmaps文件.bat】：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>                    Welcome to the vmaps extractor and assembler</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 解压时您的磁盘剩余空必须要大于<span class="number">2</span>GB, 按CTRL+C 退出</span><br><span class="line"><span class="built_in">echo</span> 按回车键开始解压 . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXIST</span> buildings\<span class="built_in">dir</span> (<span class="built_in">ECHO</span> The buildings folder already <span class="keyword">exist</span> <span class="keyword">do</span> you want to delete it?</span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">If</span> YES hit Enter to continue <span class="keyword">if</span> no CLOSE the program now! . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="built_in">DEL</span> /S /Q buildings)</span><br><span class="line">vmap4extractor.exe</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="variable">%ERRORLEVEL%</span> <span class="keyword">LEQ</span> <span class="number">1</span> (<span class="built_in">echo</span> The vmap extract tool finalized with errors.</span><br><span class="line"><span class="built_in">echo</span> 按回车键继续 . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span>)</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> Vmaps extracted check log.txt <span class="keyword">for</span> errors, now it's <span class="built_in">time</span> to assemble the vmaps press any key to continue . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="built_in">md</span> vmaps</span><br><span class="line">vmap4assembler.exe buildings vmaps</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="variable">%ERRORLEVEL%</span> <span class="keyword">LEQ</span> <span class="number">1</span> (<span class="built_in">echo</span> The vmap assembler tool finalized with errors.</span><br><span class="line"><span class="built_in">echo</span> 按回车键继续. . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span>)</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> Process done! <span class="built_in">copy</span> vmaps folder to the MaNGOS main directory</span><br><span class="line"><span class="built_in">echo</span> 按任意按钮退出 . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure><p>然后准备提取地图资源：</p><blockquote><ol><li>将【4. 编译源代码】中获取的工具文件即mapextractor.exe、vmap4assembler.exe、vmap4extractor.exe、mmaps_generator.exe四个.exe文件，以及【提取Vmaps文件.bat】，全部复制到下载好的纯净版wow客户端根目录下，必须全部复制，缺一不可。</li><li>执行【mapextractor.exe】，解出maps、dbc、Cameras文件夹，解包完毕后退出；</li><li>上一步运行完毕后，执行【提取Vmaps文件.bat】。等待运行完毕，这一步约需要30-60分钟。跑完后解出vmaps文件夹；</li><li>上一步运行完毕后，执行【mmaps_generator.exe】。如果是带扩展包的wow版本，这一步将会非常非常慢，需要约一个多小时时间。最终解出mmaps文件夹；</li><li>全部执行完毕后，将maps、dbc、Cameras、vmaps、mmaps文件夹全部放到我们的服务端文件夹内。在客户端通常还会生成一个叫building的文件夹，是没有用的，可以删掉。</li></ol></blockquote><img src="/2022/05/24/Windows环境下编译TrinityCore/8.png" title="h"><p>至此，我们已经拥有了所有服务端的文件，即在服务端文件夹下应包含：</p><blockquote><p>Cameras<br>dbc<br>maps<br>mmaps<br>vmaps<br>bnetserver.conf（或称作authserver）<br>bnetserver.exe（或称作authserver）<br>worldserver.conf<br>worldserver.exe<br>libmysql.dll<br>libeay32.dll（或不同的名称）<br>ssleay32.dll（或不同的名称）</p></blockquote><p>至少的12个项目。如图：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/9.png" title="i"><p>关于服务端最后我们需要配置的是：两个配置文件中所有需要填入数据库名、数据库端口和数据库密码的位置，否则服务端找不到MySQL数据库。如图（图中只是一部分，端口这里设为3306）：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/10.png" title="j"><p>服务端到此配置完毕。</p><h2 id="6-填充TrinityCore的数据库"><a href="#6-填充TrinityCore的数据库" class="headerlink" title="6. 填充TrinityCore的数据库"></a><p align="left">6. 填充TrinityCore的数据库</p></h2><p>服务端已经配置好了，但我们现在打开Navicat连接数据库可以发现，localhost_3306下是没有什么东西的（顶多只有几个默认的数据库如information_schema等）。我们需要导入TrinityCore的数据库。TrinityCore的数据库由以下几个数据库构成：</p><blockquote><p>auth - 帐户数据 - 用户名、密码、GM权限、服务器域等的信息；<br>characters - 角色数据 - 创建的角色及其公会、银行、背包、任务状态等信息；<br>world - 游戏内容 - 如NPC，任务，物品等；<br>hotfixes（仅master版本使用） - 保留尚未添加到核心或其他官方数据库的修补程序。</p></blockquote><p>如果是3.3.5a的Trinity，是没有hotfixes数据库的。我们这里是4.3.4版本，则需要这个数据库。</p><p>我们解压之前下载好的TDB_full_434数据库文件（.sql），这里是两个.sql文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">TDB_full_world_434</span><span class="selector-class">.22011_2022_01_09</span><span class="selector-class">.sql</span></span><br><span class="line"><span class="selector-tag">TDB_full_hotfixes_434</span><span class="selector-class">.22011_2022_01_09</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><p>分别对应world数据库和hotfixes数据库。这里我们不要从Navicat手动导入这个.sql（会慢到你怀疑人生）。先在<a href="https://github.com/TrinityCore/TrinityCore/blob/master/sql/create/create_mysql.sql" target="_blank" rel="noopener">https://github.com/TrinityCore/TrinityCore/blob/master/sql/create/create_mysql.sql</a> 上下载sql，在localhost中运行它，即可创建这几个空的数据库。实际上，我认为在Navicat中手动建立这四个数据库也是可以的，即使其包含有auth、characters、world、hotfixes这四个空的数据库就可以了。然后我们将TDB_full_434中解压出的两个.sql文件复制进服务端文件夹内，然后启动一次worldserver.exe，worldserver会自动发现没有内容的数据库，并填入对应的数据。不需要多长时间就可以完成。</p><p>数据库中环节的最后一步，我们必须进入数据库auth下realmlist表中，将两个ip地址（address和localaddress）改为本地的127.0.0.1（如果是远程服务器的话就是服务器的公网IP地址），并确认世界服务器端口（这里通常是8085）、gamebuild（必须是15595）。有兴趣的话也可以将服务器名改为你喜欢的名字，这样在游戏中就会显示出这个自定义的服务器域（realm）名。</p><h2 id="7-Patch客户端程序"><a href="#7-Patch客户端程序" class="headerlink" title="7. Patch客户端程序"></a><p align="left">7. Patch客户端程序</p></h2><p>新版本的wow由于对接了战网（Battle.net），Patch起来较为复杂。首先我们配置auth。需要获取AuthModules，即两个.auth文件：<a href="https://github.com/The-Cataclysm-Preservation-Project/AuthModules" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/AuthModules</a> ，下载这里Windows下的x64和x86的两个.auth，然后将x64和x86两个文件分别放入C:\ProgramData\Blizzard Entertainment\Battle.net\Cache下的文件夹内，路径规则为：<strong>以.auth文件的前4个字符为参考，放入对应的路径。</strong></p><blockquote><p>如x64.auth文件的前4个字符为0a3a，则放入C:\ProgramData\Blizzard Entertainment\Battle.net\Cache\0a\3a 之下；<br>x86的前4个为8f52，则放入C:\ProgramData\Blizzard Entertainment\Battle.net\Cache\8f\52 之下。</p></blockquote><p>然后将【4. 编译源代码】中获得的connection_patcher.exe放入wow客户端根目录下。首先将wow.exe拖到connection_patcher.exe上，对它进行patch：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/11.png" title="k"><p>这里一定要注意这个黑框是否输出successully的结果，如果命令框在某一步直接闪退，则patch失败，需要重新patch。之前的auth模块如果没有配置正确的话，很可能在Patching module这一步闪退，并在客户端目录生成一个Crash文件夹。这一步我失败了很多次，后来在Discord上询问了服务端开发者本人后，发现先配置好auth后再进行patch就成功了。但他们有人表示，auth模块可以在patch过程中自行生成，但在我这里就不成功（还有另一个人也不成功）。故如果遇到类似的问题的话，首先配置好auth再进行patch，则可解决。</p><p>wow.exe的patch完成后，我们再对wow-64.exe进行patch，这样一共会生成出Wow_patched.exe、Battle.net_patched.dll以及Wow-64_patched.exe、Battle-64.net_patched.dll共四个文件（两个exe、两个dll）。接下来，将原始的wow.exe、wow-64.exe、Battle.net.dll、Battle-64.net.dll四个文件以及launcher.exe都移走到其他独立目录中（或直接删除，只要你有备份的话）。移走它们后，将剩下的带_patched的四个文件改名回原来的样子（即删掉名称中的_patched，如将Battle.net_patched.dll改为Battle.net.dll），完成“狸猫换太子”的步骤。</p><p>这一步仍有问题的可参考项目端给出的troubleshooting：<a href="https://github.com/The-Cataclysm-Preservation-Project/TrinityCore/wiki/Setup-and-troubleshooting-for-connecting" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/TrinityCore/wiki/Setup-and-troubleshooting-for-connecting</a></p><p>其他启动客户端时的奇怪问题（如“无法传输所需的压缩数据”等）可能与WoW.mfil文件有关，这点可参考之前的文章。</p><h2 id="8-启动"><a href="#8-启动" class="headerlink" title="8. 启动"></a><p align="left">8. 启动</p></h2><p>这样，一切都配置完成了。我们先运行bnetserver.exe和worldserver.exe，正常运行后，启动客户端的wow.exe或wow-64.exe，看看是否能正常进入登陆页面。万事俱备只欠东风，我们似乎还没有注册账号。我们自己编译的服务端由于没有单独制作注册页面，需要手动从worldserver控制台中用服务端命令注册账号，也就是我们打开的worldserver.exe的框。这里简述一下worldserver中与创建账号相关的基础命令：</p><blockquote><p><strong>Trinitycore worldserver控制台基础命令（账户相关）:</strong><br>创建普通账号：account create <user> <password><br>例如：account create admin admin。这样就创建了一个用户名为admin，密码为admin的普通账号<br>注意：普通账号只适用于Trinity 3.3.5（WLK）及其之前版本的Trinitycore中，之后的版本（即master，如4.3.4）必须使用<strong>战网邮箱账号</strong>登录，普通账号几乎已经不起作用。<br>创建战网邮箱账号： bnet create &lt;user@xxxx&gt; <password><br>例如：bnet create admin<span></span>@qq.com admin。这样就创建了一个用户名为admin<span></span>@qq.com，密码为admin的战网邮箱账号。<br>该账号适用于需要战网邮箱账号登录的Trinitycore版本。在创建成功后，数据库auth下的account中将会生成该账号的username，通常形如2#1、3#1。<br>给予账号GM权限：从数据库查看账号的username（形如2#1、3#1的）。如这里要将ID为3#1的账号调整为GM最高权限：<br>account set gmlevel 3#1 3 -1<br>这里的3是指GM的权限等级，3是最高权限，拥有删除普通账号、以及关闭服务器的权力。-1则是指将该账号下的全部服务器都给予该权限。</password></password></user></p></blockquote><p>我们这里<strong>只需要注册战网邮箱账号</strong>。注册好后，输入邮箱和密码即可连接了。若显示“无法连接至服务器”大概率是由于patch失败导致的。然后要想玩的顺利的话，强烈建议认真阅读一下worldserver.conf中的每条内容，尝试理解它们是在控制哪些因素。比如很多人都遇到的一个问题，即GM命令中的.kill不起作用，且.die命令无法拾取战利品，怎么办？这是因为TrinityCore和Mangos不同，需要在worldserver.conf中搜索条目.die，找到<code>Die.Command.Mode = 1</code>，将其值改成0，即可在.die命令时获取战利品。另外如果发现vmaps不生效，通常也是由于worldserver.conf中没有启用vmaps、mmaps（其值为0），将其启用即可。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/12.png" title="l"><img src="/2022/05/24/Windows环境下编译TrinityCore/13.png" title="m"><p><strong><center>“我重回战场！”</center></strong></p><hr><h2 id="有趣的故事"><a href="#有趣的故事" class="headerlink" title="有趣的故事"></a><p align="left">有趣的故事</p></h2><p>还得感谢这位叫funjoker的服务端开发者耐心地为我和另一个法国老哥（遇到了同样的问题）解决有关客户端patch的问题，最后，我们都成功解决了，给那个法国哥们开心的说了一大串法语（真地看不懂），funjoker和另一个开发者还打趣地说guess why i am bald，xDDD</p><img src="/2022/05/24/Windows环境下编译TrinityCore/14.png" title="n"><p>最后的最后是一个有意思的东西，因为在之前的《魔兽世界日记》中了解到了“程序员岛（ProgrammerIsle）”的存在，我尝试传送“程序员岛”，这个GM命令是<code>.go xyz 16304 16318 69 451</code>，即约翰·斯塔茨在书中所说的坐标16000,16000（之后我也许会单独开一个文章讲Trinity端的GM命令）。结果…账号直接崩溃了，因为服务端无法加载“程序员岛”对应的地图资源：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/15.png" title="o"><p>这导致这个角色再也无法正常登录，因为角色已经传送，一登陆就要立即加载“程序员岛”，则又会导致崩溃，进入死循环。所以不得不从Navicat中修改了角色的坐标位置到正常地带，这才将角色救回来…</p><p>451这个地图（即Development Land，台版似乎译为“開發之地”），应该是早已不存在于现有的服务端了，故无法加载。所以这次我也更深入地了解了一下wow的地图结构，每个编号都是一个空间，可以理解为一个位面下。0是东部王国，1是卡利姆多，故有大量的地图带有0和1。而外域的位面号为530，任何TBC版本的地图都位于这个位面下。通过GM的飞行权限以及一些其他手段，我们可以实现从外域直接“飞到”奎尔丹纳斯岛或者秘蓝岛，而不经过黑暗之门，这是因为它们都处在同一位面下。奎岛究竟在外域的哪个方向呢？答案是大约在东北方向，远在地图UI界面的可视范围之外（约6000个坐标单位）；而秘蓝岛则在更加遥远的东方，大概在外域地狱火半岛的10000个坐标单位之外。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/16.jpg" title="p"><img src="/2022/05/24/Windows环境下编译TrinityCore/17.jpg" title="q"><center>GM岛的真正位置，其位于卡利姆多（即位面1）的最西北角</center>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Windows环境下通过基于TrinityCore的项目源码编译4.3.4-15595版本的服务端，以及服务端、客户端的配置工作，服务端的启动等及过程中的解释说明等。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="软件" scheme="https://caelica.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="服务器" scheme="https://caelica.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo中插入本地pdf文档</title>
    <link href="https://caelica.github.io/2022/05/17/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0pdf%E6%96%87%E6%A1%A3/"/>
    <id>https://caelica.github.io/2022/05/17/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0pdf%E6%96%87%E6%A1%A3/</id>
    <published>2022-05-17T08:55:26.000Z</published>
    <updated>2023-07-16T02:49:53.617Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>在hexo页面中实现浏览pdf文档的功能，以及过程中一些问题的解释<a id="more"></a></p></blockquote><p>在之前的文章：<a href="https://caelica.github.io/2022/05/16/%E3%80%8A%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%97%A5%E8%AE%B0%E3%80%8B%E8%AF%91%E6%96%87%E4%B8%8E%E8%AF%91%E5%90%8E%E6%84%9F%E6%83%B3/"><font color="blue">《魔兽世界日记》译文与译后感想</font></a>中，实现了hexo页面插入pdf文档页面的功能。因为网上关于这里的内容写的不够细致，官方文档也写的不太行，种种原因导致我卡了一会坑。所以这次单独说一下这个功能。</p><p>本功能是依靠一个叫hexo-pdf的插件实现的。这个插件的github项目地址为：<a href="https://github.com/superalsrk/hexo-pdf" target="_blank" rel="noopener">https://github.com/superalsrk/hexo-pdf</a></p><p>首先我们需要安装这个插件。先从Git-Bash cd到hexo文件夹所在的目录（即_config.yml、source等文件所在的目录），然后执行npm安装命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> <span class="comment">--save hexo-pdf</span></span><br></pre></td></tr></table></figure><p>回车后是这个样子：</p><img src="/2022/05/17/hexo中插入本地pdf文档/1.png" title="a"><p>可以看到，npm install首先报出了很多WARN，其实，<strong>这些WARN大多数都是版本问题，我认为都可以不管。</strong>这里简单说一下这些WARN都是什么意思：</p><p>第一条是指1.0.0版本的ejs太过老旧，建议升级到2.5.5。ejs是Node.js的模板引擎，在我们搭建hexo博客的时候默认就安装好了，一般都是是1.0版本的，这个是完全不影响的；</p><p>第二条是说的是没有装版本号大于等于4.12.1的eslint。eslint是一个代码语法的检测工具，用来规范代码。这个也没啥用，可以忽略。修复的话也可以，输入<code>npm install --save-dev &quot;eslint@&gt;=4.12.1&quot;</code>即可安装一个版本号大于等于4.12.1的eslint；</p><p>后面几条都是关于fsevents的，这个是因为我们使用了win/linux系统。因为fsevents是依赖mac操作系统的，也就是说别人在mac上做的东西放到win系统上就会报这个问题。所以也不管；</p><p>我们只需要看到<code>+ hexo-pdf@1.1.1</code>以及下面的<code>updated X packages and audited...</code>就行了。</p><p>最后是发现了多少个漏洞（vulnerabilities），统统不管。</p><p>hexo-pdf插件装好后，就可以在.md文本中引入.pdf文件。和插入图片有些类似，首先我们得把_config.yml中的<code>post_asset_folder</code>的值改为true，这样就会在新建文章即hexo new的时候在source目录下生成一个与.md文本同名的空文件夹，也就是这个文章的资源存放文件夹。如果之前插入过图片的话应该本来就是true。然后我们把需要展示的.pdf文档放入这个文件夹中。</p><img src="/2022/05/17/hexo中插入本地pdf文档/2.png" title="b"><p>接下来在.md文章中引入这个pdf，最基本的句法为：（如这里的pdf文件名为mydoc.pdf）</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">pdf</span> ./mydoc.pdf %&#125;</span></span><br></pre></td></tr></table></figure><p>这样写的话是使用相对路径，其实pdf文档放在source文件夹下的任何目录都是能用的，因为我的pdf不多，我习惯把pdf和图片都放在post_asset_folder生成的文件夹里。如果需要涉及到的pdf非常多的话，建议可以在source文件夹下开一个单独的文件夹存放pdf文档（可命名为files或pdf等），然后通过<code>hexo new page</code>新建一个栏目页面，这样可以从主页方便进入这个地方。</p><p><strong>重点要说一下，这里就算引入成功了，也是不支持本地预览的！</strong>..通过<code>hexo s</code>或<code>hexo s -p XXXX</code>进行本地预览的话，会直接弹出下载这个pdf的下载框，并且看不到任何插件效果！<strong>如果你本地预览时弹出了下载pdf的框，而不是一行Cannot…就说明已经引入成功了！</strong>我之前就是因为看不到效果，以为是插件npm install报错的问题，实际上一点关系都没有，这个东西就是不支持本地预览，因为我们现在引入的pdf文档是在本地的，不是外部资源链接。</p><p>后面发现这个句法不够灵活，使用下面的embed src句法能够通过调整width和height改变pdf文档框的大小，要更好一点，我这里就使用的是这个句法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed <span class="attribute">src</span>=<span class="string">"./mydoc.pdf"</span> <span class="attribute">width</span>=<span class="string">"100%"</span> <span class="attribute">height</span>=<span class="string">"700"</span> <span class="attribute">type</span>=<span class="string">"application/pdf"</span>&gt;</span><br></pre></td></tr></table></figure><p>也可以使用外部资源链接，如官方教程中的（仅参考其格式即可），使用外部链接的话应该是可以进行本地预览的，不过我没试过：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;% pdf <span class="symbol">http:</span>/<span class="regexp">/7xov2f.com1.z0.glb.clouddn.com/bash</span>_freshman.pdf %&#125;</span></span><br></pre></td></tr></table></figure><p>最后就是hexo c、hexo g、hexo d提交部署，等一会后，就能在真实页面中看到实现后的效果：</p><img src="/2022/05/17/hexo中插入本地pdf文档/3.png" title="c">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在hexo页面中实现浏览pdf文档的功能，以及过程中一些问题的解释&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="网页" scheme="https://caelica.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="hexo" scheme="https://caelica.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>《魔兽世界日记》译文与译后感想</title>
    <link href="https://caelica.github.io/2022/05/16/%E3%80%8A%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%97%A5%E8%AE%B0%E3%80%8B%E8%AF%91%E6%96%87%E4%B8%8E%E8%AF%91%E5%90%8E%E6%84%9F%E6%83%B3/"/>
    <id>https://caelica.github.io/2022/05/16/%E3%80%8A%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%97%A5%E8%AE%B0%E3%80%8B%E8%AF%91%E6%96%87%E4%B8%8E%E8%AF%91%E5%90%8E%E6%84%9F%E6%83%B3/</id>
    <published>2022-05-16T13:23:49.000Z</published>
    <updated>2024-08-07T12:32:47.144Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>由约翰·斯塔茨所著的《魔兽世界日记》我已经翻译完毕了，本文是翻译过程的总结与感想，对MMO游戏的想法与未来展望，以及翻译过程中的一些注释等。 <a id="more"></a></p></blockquote><embed src="./魔兽世界日记：一部电脑游戏开发志 汉化v1.1.pdf" width="100%" height="700" type="application/pdf"><p><strong>如果上面那个玩意失效了也可以点击下面这个MEGA盘链接来获取pdf文件（内附原文）：</strong><br><strong><a href="https://mega.nz/file/MpsCGDBa#-nWVzvnUREbArpYIcv2T1OQE8FFK6IBDrFfdUm_h9QY" target="_blank" rel="noopener"><font color="blue">→点这里获取MEGA盘下载链接←</font></a></strong></p><hr><p>&emsp;&emsp;经过一个多月断断续续的进展，这部《魔兽世界日记》终于被我翻译完毕了，没想到10万字英文字符居然翻译成汉语有250页之多！我本以为这会像之前那个《1994年暗黑1开发文档》一样会是个小册子之类的玩意，结果整出来一本书…可以说我还从来没翻译过这么多的文本量。就像作者这部书中说的——“再也不想参与开发另一个MMO了”，而我也“再也不想翻译另一个10万字了”。</p><p>&emsp;&emsp;翻译工作实在是挺耗时间精力的，虽然翻译本身肯定是有用的，好的翻译比烂的翻译当然要出色很多，我自己买名著的时候都要先挑译者，没人愿意读烂的翻译的。但我总感觉它的“原创性”相对于写文章写代码或者设计制造等等工作来说，又好像没那么强，毕竟到头来还是在“翻译”别人的作品，所以说从原创性带来的动力也似乎没有那么高，这样的过程一天可能要消耗十个小时以上，难免枯燥乏味。好在这回还是我自己选了一个感兴趣的目标在翻译，但想想看，要是职业翻译人员去翻译一本和自己的专业完全不搭界的作品，那这折磨程度起码对我来说是难以想象的…可能甚于搬砖…</p><p>&emsp;&emsp;我不是语言专业人士，翻译的也并不是很好，如果有人对我的翻译有任何不满，我当然也全盘接受。毕竟我已经将这个翻译结果公开，纯属“用爱发电”了。但几年前一个特殊的机会下，我对国内的翻译行业也稍微做过一些了解。起码在英译汉这行，待遇是真的不行，不仅翻译本身是苦力活不说，出版公司坑、骗译者的现象也比比皆是，甚至前段时间还出现过译者去世三年还没拿到翻译费的离谱事件。所以我真心希望以后的智能机器能取代这样的工作，把人解放到更具创造性的岗位上去。</p><p>&emsp;&emsp;好了吐槽到此为止，接下来是正经内容。除了WoW上的工程问题之外，约翰·斯塔茨在本书中给出的最有价值的东西，无疑是他对于游戏市场和游戏开发的个人看法，以及暴雪早期的公司运作理念了。根据约翰·斯塔茨的描述，暴雪在早期的行事理念是“重技术、重实力、轻营销”的，他不止一次提到了暴雪对它当前市场运作模式的蔑视。并回答了为什么暴雪能够脱颖而出——因为它“不走寻常路”。暴雪能够做出成绩，很大一部分归功于暴雪的制作人拥有相当的自由度，他们不太受制于资金与市场的按部就班的规则，从而可以进行自由开发。这样也最大程度上避免了工作室、高管和投资方相互欺骗的恶性情况。</p><p>&emsp;&emsp;而对于游戏开发来说，好玩是胜过一切的，游戏开发看上去很大一部分是工程问题，而核心实则是艺术，有点像是建筑艺术之于盖民房，游戏要能玩没有恶性bug是工程问题，民房结构坚固不漏水是工程问题，但房子要好看，游戏要好玩就是艺术问题了。这涉及到对“范式”的理解和对“创新”的把握，书中提到，有两类开发者犯了这样的错误：第一种就是按部就班地照搬现成的流行玩法，简单来说就是“谁火抄谁”。诚然，我们知道暴雪自己也是“谁火抄谁”，但区别就在于暴雪能够做到“青出于蓝而胜于蓝”，它深刻剖析现有范式中谁好玩，谁不好玩，好玩在哪里，不好玩在哪里，并从中吸取教训，吸收那些优秀的设计，摒弃那些不好的设计。最终能够在现有的范式的基础之上做出创新，创造出前所未有的玩法。而第二类错误就是“无脑创新”。没有考虑创新的内容是否就好玩，是否就比现成的要高明很多。这样的创新实际上是负作用。事实上我们也可以看到，很多游戏给出的新玩法并不有趣，这样的工作只能骗骗不懂游戏的投资商人，而很多工作室靠此为生，也给市场带来了很多良莠不齐的产品。所以说，游戏开发者要做到“兵形象水”，不仅要是严谨高效的工程师，还要是善于变通的艺术家。</p><p>&emsp;&emsp;已经有很多证据能说明暴雪早期的游戏开发者精通此道，之前最广为流传的就是说他们人均游戏高手，这确实也在书中得到了证实，参与开发MMO的人员玩遍了市面上的MMO游戏，在EQ这样的游戏中甚至有一支成熟的公会队伍。斯塔茨说，他们还拒绝过一点都不玩游戏的程序员的应聘。开发游戏的人到底玩不玩游戏呢？我想答案已经有了，优秀的游戏开发者肯定是玩游戏的，而今天我们却看到这样的状态已经时过境迁：拿暗黑破坏神4来说，在刚发售不久后，暴雪的官方频道做了一个“设计师玩暗黑4”的视频，结果彻底成了大家的笑柄，视频中的两个设计师完全不熟悉游戏，其中一人甚至全程平A，也没有对角色应该怎么玩做任何尝试和摸索，虽然事后暴雪称视频中的两个“开发者”是美工人员，但我们还是能从他们的操作意识看出，这些人确实是不玩游戏的。暴雪早就不是以前那个暴雪了。</p><p>&emsp;&emsp;如同在《魔兽》中一句人尽皆知的话一样——“王权没有永恒（No king rules forever）”，那个由约翰·斯塔茨看作是梦想的舞台，而不仅是一份工作的雇主的暴雪，它那曾经行业顶尖的创造力确实已经衰落了。本书中所提到的那些核心人物，诸如亚伦·亚德汉（Allen Adham）、马克·科恩（Mark Kern）、杰夫·卡普兰（Jeff Kaplan）等都已经先后离职，“魔兽宇宙”的创造者克里斯·梅森（Chris Metzen）也于2016年退休。曾参与《魔兽世界》制作的“二队”的开发人员在如今的暴雪公司已所剩无几，连作者本人也在“泰坦”项目失败后离职。更不要说暴雪公司前些日子还爆出了对员工进行欺压和性骚扰的事件，一切最终导致了暴雪于2022年1月被微软整个收购。暴雪曾经引以为傲的星际、暗黑、魔兽，随着RTS、Diablo-like和MMORPG辉煌时代的过去也不再闪耀。约翰在书中说过，自己对《魔兽》做出了二十年的寿命估计，今天来看似乎要成为现实。可能数年之后我们就会看到这款游戏步入“生命维持”的状态。最终，《魔兽》，这个曾经的王者，<strong>也会亲身见证那些曾经被它无情击败的前辈与对手们的残酷命运</strong>——那是《无尽的任务》、《卡米洛的黑暗时代》、《网络创世纪》等MMORPG、以及它们背后那些付出了同样汗水的工作室们——并和它们一起被人所遗忘。现在已经几乎没有厂商愿意斥巨资打造一款MMORPG了，如果现有的技术水平不发生革命性的突变，新一代的玩家们几乎很难拥有MMORPG方面的记忆了——这种曾经全球流行的游戏模式似乎大有进入休眠状态的趋势。</p><p>&emsp;&emsp;但MMORPG真的就行将就木、成为历史了吗？我认为远远不是。因为在“虚拟世界”的概念上，从来都是没有任何游戏能和MMORPG相提并论的。熟悉我的人都知道，我永远无法忘记我第一次接触MMORPG世界时的记忆：我在小学时沉浸在《冒险岛（Maplestory）》的游戏世界中，对于这样一个在2D平面逻辑下运行的空间，我却把那里的一切当作是活生生的世界——我觉得在生命和非生命的概念日趋模糊的现在看来，这并不滑稽。Fairyland——我这样形容我在那里的生活，它是我真正的童话世界，进入了我童年的每一个梦境里。直到现在我还在经常听这个游戏的背景音乐，并不时模仿着它的艺术风格。而魔兽玩家们也有这样的情结，他们在怀念起这款游戏的时候，最常说的话就是——“我们比你们多一个世界”，这和埃里克·道兹（Eric Dodds）所言的“MMOs are everything to everybody”可谓异曲同工。而我认为，《无尽的任务》、《魔兽世界》这类MMO提供的设身处地般的虚拟沉浸感和其他游戏（甚至是同为MMO的游戏）有着本质上的不同：这类MMO游戏并不仅仅是将许多玩家聚在一起，提供一个便于社交的虚拟社区这么简单，如现在近几年被炒来炒去的“元宇宙”，其实只要玩过魔兽就会发现这完全是炒作概念，早就不是什么新东西了；而魔兽这类MMO游戏也并非仅仅是让玩家当一个故事阅读者，它对背景历史故事的不断完善、对世界物理细节的不断加深、其目标显然已经有着“创世”的概念雏形。在人类的文化历史上我们可以看到，创世的概念无论是在哪个宗教或传说中几乎都是神力所为，非人力所能为也。但就如同神话中所描述的，亚当想成为上帝，但最后还是没能当成，结果变成了人类祖先。在中国古代以及其他民族的传说中也有着很多凡人追寻仙道的传说故事。甚至我们可以这么说：<strong>没有一个“亚当”是不想成为上帝、不想和上帝一样拥有无尽的智慧的，</strong>创世的伟业也就成为了人类的一个终极目标之一。人类能否创造出只有神话中的神才能创造的世界呢？对于这样的终极问题，我们无法回答，至少在目前来看这距离还是太远了。但这不是说就完全否决了人类的创造权力，或许像亚当一样，人类永远无法成为这个世界的上帝——或达到和创世者平起平坐的境界，但人类可能有能力（或有资格）创造出“亚级别”的世界或造物——就像上帝创造亚当那样。</p><p>&emsp;&emsp;近年来的人工智能技术和虚拟现实等等技术，让很多人看到了这种“人类创造亚当”的可能性，我们不知道人类创造人工智能生命或虚拟智能生命后会导致什么样的后果，这最终将人类社会带向何方？是一个真正的乌托邦，抑或是末日的战场？我们都无法预知。而且如果从人类之外更一般的角度考虑，这可能还涉及到另一个超验性的终极问题——即人类是否真的有创世的权利？自封为上帝的我们会不会最终变成那个古代诺斯替主义（Gnostism）思想中所描述的德穆革（Demiurge）——一个创造出囚禁其他生命的牢笼世界的邪恶神呢？</p><p>&emsp;&emsp;这一连串的问题，我们现在都无法回答。但可以确定的是，这几百年来智能和生命的秘密正在被一步步探明，这样的科技进一步发展下去，按照我们对人性的理解，则大概率可以认为，必定会有人在未来的某一天创造出那种亦幻亦真的虚拟现实世界——一个拥有供给虚拟智能生命活动的真实社区和脑机接口的、梦境般的MMO世界。而21世纪初的这批如今已经略显简陋的MMO游戏鼻祖，将成为这个梦幻旅程中的一个里程碑。这项工作确实伟大，但却又让人隐约感觉到一种不亚于核危机的严肃性，我们只能祈祷未来的人类能够足够明智地对待这一切：普罗米修斯的天火究竟是祝福还是毁灭，一切最终都取决于人类自己的造化了。</p><p>&emsp;&emsp;最后，我从这本《魔兽世界日记》中学到的一个很实用的设计技巧（可以用在很多方面），也就是本书中普遍提到的：“占位符（placeholder）”的概念或思想。其实仔细想想我也经常会不自觉地使用这种方法，举例子来说，现在要画一个双持左轮手枪的西部牛仔，但左轮手枪的细节太多了，实在难画，我们不妨让牛仔先拿两把“香蕉”，棍子也行，甚至连手都可以不处理了。这里的香蕉或棍子就是“占位符”，这样就简单多了，我们就可以跳过手枪的难题。这并非是自欺欺人，而是可以让设计者在初期更多地关注对全局的把握，而不是一开始就把大部分精力都投入到一个局部问题上面。</p><p><strong><p align="right">本文写于2022年5月16日，修改于2024年8月</p></strong></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="450" height="86" src="//music.163.com/outchain/player?type=2&id=2060264&auto=0&height=66"></iframe><hr><p>下面是英语学习部分…一些翻译的时候写的译注：</p><p>Vanilla WoW：“香草时代”，通常指的是不含扩展包的、最初发行的《魔兽世界》版本，即通常玩家所说的“60年代”版本，因其游戏内玩家最高等级为60级。</p><p>ownership：这个词通常被翻译为“主人翁精神”，它指的是企业中的个人/团队拥有一定的自主意识和责任感，能够自发地运作或负责的精神。</p><p>musical chairs：指一种抢座位的游戏，参与者在播放音乐的同时绕着一些座位转圈，音乐一停下就抢座位。因参与者比座位要多且一个座位只能坐一人，所以剩下的人就变成输家。</p><p>peanut gallery：本意是指剧院观众席中的最后一排，因最后一排观赏效果非常差，故引申为“无足轻重的看客”。</p><p>slam dunk：原意为灌篮，但引申为“精彩的一手”或“漂亮的成功”。</p><p>smoke and mirrors：字面意思是“烟雾和镜子”，但其实指的是舞台上表演时用于迷惑观众的光影手法，故泛指障眼手段。</p><p>stack the deck：或stack the cards，指的是在牌局中事先对洗好的牌堆（deck）做手脚，引申为一种事先安排好的暗中布局。</p><p>canned：字面意思为装罐，但在影视业指的是“录制好的、制成后的”东西，通常是指预先录制好的音乐或音效等。</p><p>more/most bang for the buck：bang有“猛砸”、“巨响”的意思，buck则是“美元”。故字面意思类似于中文的“把钱撂响”，即指投资者精打细算，将每一分钱都有效利用。</p><p>watching the game, Having a Bud：美国百威（Budweisser）啤酒的一句广告词，Bud指百威啤酒。意为“看比赛，喝百威”。</p><p>down the tubes：指完蛋，彻底失败。</p><p>blunt-instrument：本意指钝器或不好用的设备，引申为故事中情节粗暴的转折。</p><p>deal-breaker：字面意思是“交易破坏者”，但实际上指“无法通融的条件”、“不可调和的事物”，即缺少这些条件会立刻导致合作终止。</p><p>hole-in-the-wall：字面意思是“墙上的洞”，一般指的是街上的小店面或自动提款机等，并引申为“简陋的、不起眼的”。</p><p>have a full plate/plate is full：指日程安排满满的状态。</p><p>mum’s the word：这里mum是悄声说话的拟声词，指的是“保守秘密”。</p><p>cat out of the bag：指秘密被泄露，或秘密被曝光。欧洲古时候一些不诚信的卖猪人把猫充当小猪装在袋子里卖，如果不检查就很难发现。但是如果猫自己从口袋里钻了出来，骗局就暴露了。</p><p>stick out the sore thumb：指引人注目、显得不自然的东西。字面意思是“伸着受伤的拇指”，意思是如果人的指头受伤了，就会把包扎好的手指单独伸在一个安全的地方，当然会引人注意。</p><p>propeller-head：字面意思是“头戴着螺旋桨的人”，但引申为“行为古怪、沉迷钻研技术或知识的人”，</p><p>playing for keeps：指严肃认真地对待某事，动真格的。</p><hr><p>整个活：（觉得我译的不好的话就看看这位）</p><img src="/2022/05/16/《魔兽世界日记》译文与译后感想/1.png" title="你们这是自寻死路！"><p><del>（哈哈哈哈哈哈）</del></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由约翰·斯塔茨所著的《魔兽世界日记》我已经翻译完毕了，本文是翻译过程的总结与感想，对MMO游戏的想法与未来展望，以及翻译过程中的一些注释等。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="随想" scheme="https://caelica.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="翻译" scheme="https://caelica.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
</feed>
