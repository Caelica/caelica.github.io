<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Videre☆Invisibilia</title>
  
  <subtitle>H.A.R.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://caelica.github.io/"/>
  <updated>2022-12-16T15:31:22.569Z</updated>
  <id>https://caelica.github.io/</id>
  
  <author>
    <name>Caelica</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SPT-AKI常用功能修改指南</title>
    <link href="https://caelica.github.io/2022/12/16/SPT-AKI%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E4%BF%AE%E6%94%B9%E6%8C%87%E5%8D%97/"/>
    <id>https://caelica.github.io/2022/12/16/SPT-AKI%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E4%BF%AE%E6%94%B9%E6%8C%87%E5%8D%97/</id>
    <published>2022-12-16T10:55:05.000Z</published>
    <updated>2022-12-16T15:31:22.569Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>SPT（SinglePlayerTarkov）-AKI是一个《逃离塔科夫》的单机端模拟器（以下简称AKI端），本文介绍AKI端的常用功能修改方法以及对应的一些游戏机制，目的是获得舒适的塔科夫游戏体验。<a id="more"></a></p></blockquote><p><strong><font color="#EA0000">本指南对应的版本：</font><br>AKI端版本：SPT-AKI-3.2.5-19428 RELEASE<br>逃离塔科夫客户端版本：Client.0.12.12.31.19428</strong></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;《逃离塔科夫（Escape from Tarkov）》是由俄罗斯Battlestate Games公司制作的一款军事题材FPS游戏。但由于诸如外挂、游戏机制、官方运营因素等等各种原因，导致该游戏的线上模式的体验并不能够令人完全满意。SPT-AKI端经过一年多的完善，已经成为了目前塔科夫离线端中比较主流的一个端，AKI端截至目前2022.12.16已经更新到了3.3.0版本。本文所对应的是AKI-3.2.5版本，客户端对应0.12.12，已经实装了新出的灯塔地图、MGL榴弹炮武器等新版本元素，整体表现十分稳定。本人也修改过1.0版本的AKI端，2.0和3.0新版本的AKI端架构已经有所改变，不排除后面SPT制作组还会继续改变架构，但总体来说，原理是大同小异的。SPT-AKI的官方网址为：<a href="http://www.sp-tarkov.com" target="_blank" rel="noopener">www.sp-tarkov.com</a></p><h2 id="修改项目及方法"><a href="#修改项目及方法" class="headerlink" title="修改项目及方法"></a>修改项目及方法</h2><p><em>\*注意修改的时候需要关闭服务端，否则修改不生效。修改完成后再启动服务端再进游戏即可生效。</em></p><p>&emsp;&emsp;首先说明此版本AKI端主要文件的结构（以根目录为EFT文件夹为例）：<br>…\EFT\user文件夹下是账号的游戏数据。user\profiles下的.json为个人账号的角色数据，包含了现有的所有游戏进度、物品、状态等。从这里可修改个人角色的所有数据。<br>…\EFT\Aki_Data\Server下是服务端的配置信息，包含了服务端上游戏的各类参数。修改这些文件将改变游戏自身的性质，一般来说是全局生效的。但它通常无法直接立即影响角色数据中已经建立了的数据，必须重新获得才可显示生效。</p><h3 id="修改人物等级"><a href="#修改人物等级" class="headerlink" title="修改人物等级"></a>修改人物等级</h3><ol><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>直接看前几行即为角色基本属性，不要改其中的”Level”，直接改”Experience”到2500000（即250w经验），再次启动大概就是40级左右。</li></ol><h3 id="改钱"><a href="#改钱" class="headerlink" title="改钱"></a>改钱</h3><ol><li>将一叠卢布（建议超过1w）放在仓库最左上角，确保整个仓库根目录下只有这一叠卢布（即箱子中不含钱）；</li><li>记住这一叠卢布的具体数值；</li><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>搜索这个数值，检查该词条的x、y位置是否为x=0 y=0，如果是，则修改该数值为300000000（3亿），足够花很久了。</li></ol><h3 id="修改血量（变身塔科夫超人）："><a href="#修改血量（变身塔科夫超人）：" class="headerlink" title="修改血量（变身塔科夫超人）："></a>修改血量（变身塔科夫超人）：</h3><ol><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>搜索词条”BodyParts”，其下拥有的Head、Chest等变量即是各个部位的血量；</li><li>修改每个变量下的Maximum和Current即可，Current不能大于Maximum，最大值不建议超过5000。<br>（新版本AI疯狂锁胸，所以建议将胸部的生命值改高一点，不然很容易扑街…）</li></ol><h3 id="修改护甲（变身无畏战士）："><a href="#修改护甲（变身无畏战士）：" class="headerlink" title="修改护甲（变身无畏战士）："></a>修改护甲（变身无畏战士）：</h3><ol><li><p>打开目录 EFT\Aki_Data\server\database\templates\items.json</p></li><li><p>搜索词条”heavy_trooper”，找到name为”item_equipment_helmet_tk_heavy_trooper”的物品。这个物品是一个可以挂载在Fast MT头盔上的长得很像斯巴达的面罩，本身没有视野遮挡特效，也能兼容夜视仪和耳机。选择它是因为目前这个服务端版本下没有任何敌方单位会装备这个部件，否则修改常见物品后容易导致敌人也变成无畏战士。（同理，带twitch logo的紫色paca甲也是一个不错的选择）</p></li><li><p>向下拉一直找含有”Durability”、”armorClass”的段落，可以看到这个面罩只有40点耐久，4级护甲等级。我们将”Durability”改为5000，”armorClass”改为10。这样它就变成了耐久5000的10级甲。</p></li><li><p>修改防护范围。在”armorZone”字段，严格按照格式填写对应的防护范围，参考如下：</p> <figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Durability"</span>: <span class="number">5000</span>,</span><br><span class="line"><span class="string">"MaxDurability"</span>: <span class="number">5000</span>,</span><br><span class="line"><span class="string">"armorClass"</span>: <span class="string">"10"</span>,</span><br><span class="line"><span class="string">"speedPenaltyPercent"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="string">"mousePenalty"</span>: <span class="number">-2</span>,</span><br><span class="line"><span class="string">"weaponErgonomicPenalty"</span>: <span class="number">-2</span>,</span><br><span class="line"><span class="string">"armorZone"</span>: [</span><br><span class="line">  <span class="string">"Head"</span>,</span><br><span class="line">  <span class="string">"LeftArm"</span>,</span><br><span class="line">  <span class="string">"RightArm"</span>,</span><br><span class="line">  <span class="string">"Chest"</span>,</span><br><span class="line">  <span class="string">"Stomach"</span>,</span><br><span class="line">  <span class="string">"LeftLeg"</span>,</span><br><span class="line">  <span class="string">"RightLeg"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"Indestructibility"</span>: <span class="number">0.9</span>,</span><br><span class="line"><span class="string">"headSegments"</span>: [</span><br><span class="line">  <span class="string">"Top"</span>,</span><br><span class="line">  <span class="string">"Eyes"</span>,</span><br><span class="line">  <span class="string">"Nape"</span>,</span><br><span class="line">  <span class="string">"Ears"</span>,</span><br><span class="line">  <span class="string">"Jaws"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li><p>可以考虑更改”ArmorMaterial”的属性，即护甲材质。一般建议修改为”Combined”（复合材料）或”UHMWPE”（超高分子量聚乙烯）。</p></li></ol><p>&emsp;&emsp;这样单靠这个面罩就能够挡住全身的伤害，但像脚这种护甲无法防护的部位是不生效的。修改其他护甲的原理同理。保存后，再次从跳蚤市场购买一个新的HeavyTrooper，即可生效。这些全部改完后基本就无敌了，但也会减弱游戏的挑战性，推荐休闲玩家使用。不过实话说这个版本的AI强的实在有点离谱了，老版本的AI要好玩多了。</p><h3 id="修改技能："><a href="#修改技能：" class="headerlink" title="修改技能："></a>修改技能：</h3><ol><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>搜索词条”Skills”，如果看到其下拥有Endurance、Strength等变量即是各技能经验值；</li><li>将需要修改的技能的”Progress”值改为5100，5100即为满级。推荐将人物属性相关项目（力量、耐力、活力等）以及狙击枪等级全部改到满级。改狙击枪等级是因为猎人（Jaeger）的某些任务需要这个等级。</li></ol><h3 id="修改商人等级"><a href="#修改商人等级" class="headerlink" title="修改商人等级"></a>修改商人等级</h3><p>&emsp;&emsp;首先说明商人升级的原理：升级需要满足三个条件：玩家等级、好感度、总消费值。打开商人交易界面屏幕右上角会显示升到下一级商人需要的三个数值以及你目前的数值，不够的会被标记为红色。</p><ol><li>打开目录 EFT\user\profiles 下的.json文件；</li><li>搜索词条 “TradersInfo”，找到其之前一行没有Bonuses字样的那一段代码；</li><li>TradersInfo 其下共有8个代码段分别对应8个商人，顺序从上到下依次是：俄商（Prapor）、大妈（Therapist）、黑商（Fence）、Skier、美商（Peacekeeper）、机械师（Mechanic）、护甲商（Ragman）、猎人。和游戏中顺序相同；</li><li>不要修改其下的”loyaltyLevel”，没有用。直接修改好感度和商人的消费值即可满足需求，条件都满足后商人自动升级。玩家等级修改方法见上文。</li><li>黑商的好感度最高为6.0，在现版本有独特的作用，在最高好感度时，某些地图的Boss就不会主动攻击玩家扮演的scav了。</li></ol><h3 id="修改仓库大小，以黑边版为例："><a href="#修改仓库大小，以黑边版为例：" class="headerlink" title="修改仓库大小，以黑边版为例："></a>修改仓库大小，以黑边版为例：</h3><ol><li>打开目录 EFT\Aki_Data\Server\database\templates 下的items.json；</li><li>搜索词条 566abbb64bdc2d144c8b457d，然后注意下面的名称是否为”Edge of darkness stash 10x68”，即为黑边版；</li><li>往下拉将”cellsV”的值从68改为100（千万不要动 cellsH 的数字），仓库即变为10x100的大小。</li></ol><h3 id="修改负重和安全箱大小："><a href="#修改负重和安全箱大小：" class="headerlink" title="修改负重和安全箱大小："></a>修改负重和安全箱大小：</h3><p>&emsp;&emsp;原理是将安全箱的重量改为负值，这里我们以黑边3x3裤裆Gamma安全箱为例：</p><ol><li>打开目录 EFT\Aki_Data\Server\database\templates 下的items.json；</li><li>搜索词条 “Gamma”</li><li>将代码段中的”Weight”由1.2修改为-9999。这样它的重量变成了-9999 kg。</li><li>还可以将下面的”cellsH””cellsV”由3都改成9，这样Gamma安全箱就变成9x9的超大空间了。</li></ol><h3 id="修改口袋大小（如何拥有超大口袋）："><a href="#修改口袋大小（如何拥有超大口袋）：" class="headerlink" title="修改口袋大小（如何拥有超大口袋）："></a>修改口袋大小（如何拥有超大口袋）：</h3><ol><li>打开目录 EFT\Aki_Data\server\database\templates\items.json</li><li>搜索词条 627a4e6b255f7527fb05a0f6，可见name为Карманы 1 на 4 со спец слотами，意为带特殊槽的1x4口袋，即玩家Pmc的口袋类型；往下拉找到name为“pocket1”到“pocket4”的代码段（该文件里还存在其他的名为pocket1-4的代码段，所以要搜索这个特定的词条，这样不会搞错）</li><li>在”pocket1”的部分中，找到”cellsH””cellsV”，这里两个变量的初值均为1，代表了第一个口袋的大小为1x1，H为宽（横轴），V为高（纵轴）。将”pocket1”的H由1改为6；V改为10。这样第一个口袋就变成了一个六列十行的大空间；</li><li>将”pocket2-4”的H和V均改为0，即取消后三个口袋只保留第一个大口袋，此举一定程度避免了口袋超出UI界面的bug。不要动SpecialSlot里的东西。</li></ol><h3 id="将跳蚤市场改为战局发现（市场和商人买到的物品将直接拥有对勾）："><a href="#将跳蚤市场改为战局发现（市场和商人买到的物品将直接拥有对勾）：" class="headerlink" title="将跳蚤市场改为战局发现（市场和商人买到的物品将直接拥有对勾）："></a>将跳蚤市场改为战局发现（市场和商人买到的物品将直接拥有对勾）：</h3><ol><li>打开目录 EFT\Aki_Data\Server\configs\inventory.json</li><li>将 this.newItemsMarkedFound = false; 改为 this.newItemsMarkedFound = ture</li></ol><h3 id="修改战局撤离时间："><a href="#修改战局撤离时间：" class="headerlink" title="修改战局撤离时间："></a>修改战局撤离时间：</h3><ol><li>打开目录为 EFT\Aki_Data\Server\database\locations，该目录下的文件夹名均为对应的地图名称，地图对应关系见文末的【附录2：地图名称对照】；</li><li>以bigmap（海关）为例，打开里面的base.json，搜索”EscapeTimeLimit”（在老版本中为escape_time_limit）词条，将后面的45改为3000，这样撤离时间变成了两个小时。</li></ol><h3 id="修改空投几率（每局必出空投飞机）："><a href="#修改空投几率（每局必出空投飞机）：" class="headerlink" title="修改空投几率（每局必出空投飞机）："></a>修改空投几率（每局必出空投飞机）：</h3><ol><li>打开目录 EFT\Aki_Data\Server\configs\airdrop.json</li><li>修改词条”airdropChancePercent”下的每一个地图的概率数值到100，这样每把都必出空投。（空投有可能刷出初始商人买不到的东西比如.338大狙等稀有物品）</li></ol><h3 id="修改Boss刷新几率（每局必刷boss）："><a href="#修改Boss刷新几率（每局必刷boss）：" class="headerlink" title="修改Boss刷新几率（每局必刷boss）："></a>修改Boss刷新几率（每局必刷boss）：</h3><ol><li>以海关为例，打开目录 EFT\Aki_Data\Server\database\locations\bigmap</li><li>打开里面的base.json，搜索”BossLocationSpawn”词条，”BossChance”为boss刷新几率，找到对应boss的名称（如Killa，boss名称对应关系见文末的【附录1：地图Boss列表与机制】），修改为100则必出boss。</li></ol><h2 id="附录1：地图Boss列表与机制"><a href="#附录1：地图Boss列表与机制" class="headerlink" title="附录1：地图Boss列表与机制"></a>附录1：地图Boss列表与机制</h2><p><strong>储备站：</strong>Gluhar，武器通常是Ash-12，带有6个小弟。通常会刷在直升机附近、黑马楼、火车站或火车站地堡（D1地堡）的地下仓库。</p><p><strong>海关：</strong>Reshala，武器通常是AK系自动步枪，带有4个小弟。刷在宿舍楼（两个楼都有可能）或新加油站。</p><p><strong>森林：</strong>Shturman，武器通常是SVD狙击枪，带有2个小弟。刷在地图中央的大锯木厂。<br>    该boss在服务端配置参数中名为”bossKojaniy”。</p><p><strong>海岸线：</strong>Sanitar，武器通常是sks或vss。带有2个小弟，除了小弟以外boss周围还可能聚集一些scav。刷在海岸港务局码头、别墅、疗养院一层附近。</p><p><strong>立交桥：</strong>Killa，武器通常是RPK轻机枪，没有小弟。最常见于立交桥商场中心区域，即Kiba（武器房）、Mantis（医疗房）、Brutal、以及坦克房这块区域。但也有概率运动到商场的其他地方去。</p><p><strong>工厂：</strong>Tagilla，武器通常是Saiga-12霰弹枪，近战会掏出大锤。没有小弟。刷新在工厂坑道及地下部分，但很快会运动到工厂各个区域。</p><p><strong>灯塔：</strong>Knight、BigPipe、Birdeye。这是一个三人精英小队。Knight持榴弹炮，BigPipe持突击步枪，Birdeye持射手步枪。<br>        刷新点：这个boss之前只在灯塔的污水处理厂（即叛乱USEC营地）的1、2号厂房、以及地图中间的豪宅区，他们和叛乱USEC是盟友。但现在这个boss还会刷新在其他地图，如海关的ZB-1013厂房、森林的scav地堡、以及海岸线的气象雷达站。<br>        boss在服务端配置参数中名为”bossKnight”。</p><p><strong>游荡者（Rouges）</strong>：这个阵营目前只有在灯塔污水处理厂的叛乱USEC（现版本俗称美军），分为几个小队分布在污水处理厂各处巡逻或驻守，一个小队通常有2-3人。因每个小队都有刷新概率，故每局总人数不固定，通常一局不到10人，但最多可达15-20人。会操作厂房顶部的固定武器。他们和Knight三人队是同一阵营，有可能同时出现。<br>        叛乱USEC的机制比较独特，如果玩家选择的阵营也是USEC，第一次接触叛乱USEC时会被警告离开，而不会被直接视为敌对。玩家长时间不离开则会被视为敌对，若触发了敌对则之后三局都将被视为敌对状态。玩家是BEAR或组队中有BEAR的USEC玩家会都被直接视为敌对；任何玩家靠近厂房顶部的固定武器位也会被视为敌对；玩家scav不会被直接视为敌对，除非靠得太近；任何人攻击叛乱USEC会被直接视为敌对。<br>        后续版本可能会新增属于BEAR的Rouges阵营。</p><p><strong>掠夺者（Raiders）</strong>：背景设定中Raiders由前USEC、前BEAR及精锐scav组成，远古版本中亦被玩家俗称为美军，其实是高级电脑scav。装备比一般的scav好，一个小队通常有2-4人。目前只在储备站和实验室有。<br>        储备站raider：raider出现在地下D2地堡通道区域、D1地堡（火车站地堡）、火车站及月台周边。开局有几率直接刷一队，储备站现在有两个闸，拉地下闸（D2闸）有几率在闸后面的办公室刷出一队；拉地面闸（D1闸）有几率在火车站刷一队。火车开进车站后也有可能在火车附近立即刷一队。<br>        实验室raider：游戏一开始或进行一段时间都有可能在实验室的某层自动刷一队raider，也有可能刷第二队。实验室现在有6个闸，每拉一个闸都有几率在对应地点刷新一、二队raider。<br>        raider在文件参数的boss列表中名为”pmcBot”，不同地图、点位的刷新概率不一，大多数在30-40%左右。</p><p><strong>邪教徒（Cultists）</strong>：这个boss只在夜间22:00至7:00的战局刷新，会刷新在海关的17号仓库附近，森林河边的废弃村庄以及大锯木厂旁邪教圈附近树林，在海岸线则会刷在疗养院或沼泽教堂后面的荒地。<br>        Boss是一个小队，由一个牧师（Priest）带领2-4个战士（Warrior）组成，装备独特的毒匕首，会倾向于埋伏并偷偷背刺接近的玩家。被毒刀击中的玩家会获得一个名为未知毒素的debuff持续伤害其生命值。只有xTG-12解毒针或力百汀抗生素可以解毒，否则玩家在撤离前都会一直掉血直到死亡。他们阵营在游戏中显示为”???”。<br>        该boss在服务端配置参数中名为sectantPriest，原始刷新概率很低。</p><h2 id="附录2：地图名称对照"><a href="#附录2：地图名称对照" class="headerlink" title="附录2：地图名称对照"></a>附录2：地图名称对照</h2><blockquote><p>bigmap：            海关（游戏里称作Custom，但文件结构里大多叫bigmap）<br>factory4_day：    工厂- 白天<br>factory4_night：工厂- 夜晚<br>interchange：    立交桥/商场<br>laboratory：        实验室<br>rezervbase：        储备站/军事基地<br>shoreline：        海岸线/疗养院<br>woods：            森林<br>lighthouse：        灯塔<br>tarkovstreets：    塔科夫市街（未开放）<br>town：            城镇（未开放）<br>suburbs：        郊区（未开放）<br>terminal：        码头（未开放）<br>develop:         竞技场（Arena）（未开放）<br>privatearea:     别墅区（Private Sector）（未开放）<br>hideout:         （藏身处的地图）</p></blockquote><p><strong><em>注意，hideout不是战局地图，不要修改其内容。所有未实装的地图也不要改。</em></strong></p><hr><p>&emsp;&emsp;最后是个我发现的彩蛋。原画（左图）是前苏联画家维克多·伊万诺维奇·哥沃尔科夫（Viktor Ivanovich Govorkov）于1954年创作的一张反酗酒的宣传画，俄语”Hет”相当于”No”，表示向饮酒说不。塔科夫中也出现了这张画，但被制作组恶搞调换了酒杯和食物的位置，变成了“宁肯不吃饭也要喝酒”：</p><img src="/2022/12/16/SPT-AKI常用功能修改指南/no.png" title="No！">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SPT（SinglePlayerTarkov）-AKI是一个《逃离塔科夫》的单机端模拟器（以下简称AKI端），本文介绍AKI端的常用功能修改方法以及对应的一些游戏机制，目的是获得舒适的塔科夫游戏体验。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="软件" scheme="https://caelica.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="攻略" scheme="https://caelica.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>Q版二头身第二弹</title>
    <link href="https://caelica.github.io/2022/11/12/Q%E7%89%88%E4%BA%8C%E5%A4%B4%E8%BA%AB%E7%AC%AC%E4%BA%8C%E5%BC%B9/"/>
    <id>https://caelica.github.io/2022/11/12/Q%E7%89%88%E4%BA%8C%E5%A4%B4%E8%BA%AB%E7%AC%AC%E4%BA%8C%E5%BC%B9/</id>
    <published>2022-11-12T04:10:42.000Z</published>
    <updated>2022-12-16T15:02:57.554Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>再次挑战萌系二头身的制作 <a id="more"></a></p></blockquote><img src="/2022/11/12/Q版二头身第二弹/Caelica_C.png" title="You deserve this name"><p>在上次制作了第一个二头身之后，有了更多的制作经验。这次应该说更加贴近冒险岛（Maplestory）近年来的画风了，事实上是因为我又玩了100多小时的美服冒险岛…不过话说回来，历史上那些艺术家出去闲逛出去浪，那都不叫逛，曰采风也，像高更（Paul Gauguin）这样的人为了艺术般的生活都跑到太平洋上的小岛去了，咱因为太平洋加了盖，比不过他，那怎么办？遁入游戏世界呗！所以咱玩游戏那能叫玩游戏吗，当然不叫玩了，故从今往后这就定调：再遇到normies觉得我老大一人怎么还玩游戏，我就笑笑，因为他们不明白——</p><p>&emsp;&emsp;<em>normies玩游戏，叫打发时间，叫消磨人生。因为他们对游戏艺术和游戏文化没有信仰，所以连他们自己都会这么觉得；</em></p><p>&emsp;&emsp;<em>我玩游戏，至少在我这里永远都不那样叫，现在我造了个新名词</em>——<strong><em>赛博采风（Cyber Art &amp; Design Tour）</em></strong>！！</p><p>言归正传，相对于之前的作品，除了整体的画风比例之外，这次着重处理了线稿的粗细分布问题，花了不少功夫，但最终的实际效果让我觉得很值，这个粗细的感觉一出来整个画面都看起来舒服了许多。之前对最外层轮廓线做了加厚加深的优点也得到了进一步发挥。</p><p>色彩上优化了一级阴影的分布，减弱了一级阴影的渐变程度，总之这次喷枪式的渐变用的很谨慎，这样整体看起来更“二次元”而不是像一个厚涂作品，这可能是近年来漫画插画的绘柄特点，观察冒险岛十年前的风格也能明显看出这个变化。</p><p>最后采用了PS自带的噪声生成添加了一个噪声材质图层，并用波点式贴图处理了服饰的材质。这样能看起来不是那么单调。</p><p>泳衣样式是临时起意搞得，因为有人说我画的女人个个都包的严严实实，不够色，所以身材故意弄的比较…前凸后翘的那种感觉。冒险岛本身其实一直还是比较子供向，大概是很难找到这种的，所以这样也不至于因过度模仿而失去特点。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;再次挑战萌系二头身的制作&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="绘画" scheme="https://caelica.github.io/tags/%E7%BB%98%E7%94%BB/"/>
    
      <category term="设计" scheme="https://caelica.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>利用Youtube的版权审查功能来识别音乐或歌曲</title>
    <link href="https://caelica.github.io/2022/10/02/%E5%88%A9%E7%94%A8Youtube%E7%9A%84%E7%89%88%E6%9D%83%E5%AE%A1%E6%9F%A5%E5%8A%9F%E8%83%BD%E6%9D%A5%E8%AF%86%E5%88%AB%E9%9F%B3%E4%B9%90%E6%88%96%E6%AD%8C%E6%9B%B2/"/>
    <id>https://caelica.github.io/2022/10/02/%E5%88%A9%E7%94%A8Youtube%E7%9A%84%E7%89%88%E6%9D%83%E5%AE%A1%E6%9F%A5%E5%8A%9F%E8%83%BD%E6%9D%A5%E8%AF%86%E5%88%AB%E9%9F%B3%E4%B9%90%E6%88%96%E6%AD%8C%E6%9B%B2/</id>
    <published>2022-10-02T04:05:33.000Z</published>
    <updated>2022-11-12T03:38:55.967Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>这个“邪门歪道”确实很令人吃惊，能准确有效地找到一些不为人知的罕见音乐的对应源。<a id="more"></a></p></blockquote><h3 id="方法简介"><a href="#方法简介" class="headerlink" title="方法简介"></a>方法简介</h3><p>首先我们将视频下载下来，获得视频文件。如果手里的是音频格式的话可以考虑通过录像软件等工具转成视频格式。只要是常见格式应该都是可以的。然后在Youtube频道上上传这个视频。YouTube这里默认上传成私享视频，因此不用担心侵权问题。上传过程中我们先简单填写视频信息，上传成功后，Youtube会自动进行有关的版权审查，此时发现红色叹号提示视频中音乐出现版权问题：</p><img src="/2022/10/02/利用Youtube的版权审查功能来识别音乐或歌曲/1.png" title="a"><p>点击“查看详情”：</p><img src="/2022/10/02/利用Youtube的版权审查功能来识别音乐或歌曲/2.png" title="b"><p>我们可以看到视频中所采用的所有音乐的名称和Youtube上对应的版权源。我们只需复制这些信息然后在YouTube上搜索即可找到源：</p><img src="/2022/10/02/利用Youtube的版权审查功能来识别音乐或歌曲/3.png" title="c"><p>观察《Now may we singen》这首歌。可以看到，牛津卡梅拉塔合唱团（Oxford Camerata）的专辑发布于1993年，但视频是2018年的，2018年前是否有Youtube视频版本暂不清楚，不过《Now may we singen》实际上是一首15世纪的英国传统歌曲，它在YouTube上还存在其他同样版本的作品，所以到这一步可以说就已经找到了。</p><p>Oxford Camerata版本的歌曲链接如下：<br><a href="https://www.youtube.com/watch?v=Loi4Dh9-KbA" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Loi4Dh9-KbA</a></p><h3 id="它的优势在哪"><a href="#它的优势在哪" class="headerlink" title="它的优势在哪"></a>它的优势在哪</h3><p>一些歌曲/音乐可能会非常难找。如果你看完下面的文字，你就能体会到这个难度。如网易云之类的常规的听歌识曲软件对偏门歌曲的识别率不仅低，而且更是无法识别库存中没有的音乐（虽然这个音乐碰巧是有的）。而基于Youtube视频形式的音乐源其实更为广泛，因其可能并不仅仅有于官方账号发布的源，故其库存量更大，更容易找到音乐。</p><p>如上面视频中的音乐《Now may we singen》，对我来说是一个整整十年级别的找歌难题。一切的起因是大约在2012年，优酷网上有人上传了一些关于欧洲长剑（longsword）相关的视频，推测是从Youtube搬运的，当时在优酷上关注度还挺高，至少在那时候中世纪相关的圈子里是这样。优酷网目前还有这个视频，但从上传时间（2014年）和叠加的水印来看可能已经被翻录了多次：<a href="https://v-wb.youku.com/v_show/id_XODE4NTE3MDY0.html" target="_blank" rel="noopener">https://v-wb.youku.com/v_show/id_XODE4NTE3MDY0.html</a></p><p>视频中相关的音乐我一直都没找到，视频内容中也没有给出背景音乐的信息。当我也开始使用Youtube后，在Youtube甚至连这个视频源都找不到了（有点讽刺的是，优酷网居然还留着有）。根据视频开头的元素，这个视频实际上是一个美国纽约州的剑术团体Lake Ontario Fechtschule制作的教学演示，由Todd Sullivan表演。网址为：<a href="https://toddsullivan.webs.com" target="_blank" rel="noopener">https://toddsullivan.webs.com</a> 。Lake Ontario Fechtschule从属于美国一个名为Selohaar Fechtschule的HEMA剑术团体，以德式长剑为主。而Selohaar Fechtschule又从属于美国一个名为The Order of Selohaar的民间神秘学团体，似乎至今仍有活动。他们的网址为：<a href="http://www.selohaar.org" target="_blank" rel="noopener">www.selohaar.org</a></p><p>了解这些是为了找到视频源或者上传者，以求获得音乐的相关信息，但这个Lake Ontario Fechtschule可能早已经停止活动了，故有可能是上传者自行下架了视频。并且在整个Google上也无法找到这个视频，这个方法就行不通了。</p><p>鉴于得不到任何相关的信息，于是我先是尝试了原始的笨办法：尝试听出歌词并搜索。对于有歌词的歌曲，很多情况下这是一个行之有效的方案，我曾经这样找到了好些日语歌曲。但这回实在是被彻底难倒了：开始我从听感上判断它可能是拉丁语，但实际上，它的歌词的主体是中古英语（Middle English），但加入了少量拉丁语，并且其中的很多英语词汇没有使用现代英语的读法和发音，而是采用了类似拉丁语的中世纪读法。种种变数导致我听的一头雾水，导致这个方法也告吹了。（如果你看到这里，可以先试试在不看下面歌词的前提下能听出几个“英语”单词xD）</p><p>最终通过文首的方法终于找到了这个歌曲。现在我们再来分析一下这个东西究竟是何方神物。下文的大多数结论均来自这个页面：<a href="https://www.hymnsandcarolsofchristmas.com/Hymns_and_Carols/now_may_we_syngyn_as_it_is.htm" target="_blank" rel="noopener">https://www.hymnsandcarolsofchristmas.com/Hymns_and_Carols/now_may_we_syngyn_as_it_is.htm</a></p><p>根据说法，《Now may we singen》是一首15世纪的英国歌曲，属于一种Medieval Carol，最早的音乐和诗歌均记录在一张15世纪的羊皮纸卷轴上，作者已不可考。现存于英国剑桥三一学院图书馆（Library of Trinity College），18世纪后的作家记录了一些不同的版本副本。</p><p>现代版本（19世纪版本）的歌词和乐谱如下，其中副歌（Refrain）中反复出现的拉丁语“Quod puer natus est nobis”意为“因为（那个）孩子是为我们而生”。：</p><blockquote><p>Now may we singen as it is,<br>Quod puer natus est nobis</p><ol><li>This babe to us that now is born,<br>Wonderful workës He hath ywrought,<br>He would not lose what was forlorn,<br>But boldly again it bought;<br> And thus it is<br> For sooth I wis,<br> He asketh nought but that is His.</li><li>This bargain lovëd He right well,<br>The price was high and bought full dear,<br>Who would suffer and for us feel<br>As did that Prince withouten peer?<br> And thus it is, etc.</li><li>His ransom for us hath ypaid.<br>Good reason have we to be His.<br>Be mercy asked and He be prayed<br>We may deserve the heavenly bliss.<br> And thus it is, etc.</li><li>To some purpose God made man;<br>I trust well to salvation.<br>What was His blood that from Him ran.<br>But fence against damnation?<br> And thus it is, etc.</li><li>Almighty God in Trinity,<br>Thy mercy we pray with whole heart<br>Thy mercy may all woe make flee<br>And dangerous dread from us to start.<br> And thus it is, etc.</li></ol></blockquote><img src="/2022/10/02/利用Youtube的版权审查功能来识别音乐或歌曲/4.jpg" title="d"><p>而Oxford Camerata所演唱的版本（即视频中的音乐）用的是原汁原味的15世纪原版歌词，相当难懂，据说一些字符甚至不能在HTML下正确显示出来：</p><blockquote><p>Now may we syngyn as it is<br>Quod puer natus est nobis.</p><ol><li>This babe to us that now is bore.<br>Wundyrful werkys he hath i wrowt.<br>He wil not lese that was I lore.<br>But boldly aƺen it bowth.<br> And thus it is<br> ffor sothe I wys<br> he askyth nouth but that is hys.</li><li>This chaffare fouyd he rith weel.<br>The prys was hey &amp; bowth ful dere<br>Qwo wold suffre and for us feele<br>As dede that prince was owtyn pere<br> And thus it is, (etc.)</li><li>Hys raunsum for us hath I payd.<br>Of resoun than we owyn to ben hys<br>Be mercy askyd and he be prayd.<br>We may be rith kalange blys.<br> And thus it is, (etc.)</li><li>To sum parpos god made man.<br>I leue weel to saluacyoun<br>Qwat was his blood that fro hym ran.<br>But defens aƺens dampnacyoun.<br> And thus it is, (etc.)</li><li>Almythy god in trynyte.<br>Thy mercy we pray wyth hool herte<br>Thy mercy may all woo make fle.<br>And daungerous dreed fro us do sterte.<br> And thus it is, (etc.)</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个“邪门歪道”确实很令人吃惊，能准确有效地找到一些不为人知的罕见音乐的对应源。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="音乐" scheme="https://caelica.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="艺术" scheme="https://caelica.github.io/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="文化" scheme="https://caelica.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>小荷尔拜因-吕策尔伯格《死亡之舞》全套高清图</title>
    <link href="https://caelica.github.io/2022/09/11/%E5%B0%8F%E8%8D%B7%E5%B0%94%E6%8B%9C%E5%9B%A0-%E5%90%95%E7%AD%96%E5%B0%94%E4%BC%AF%E6%A0%BC%E3%80%8A%E6%AD%BB%E4%BA%A1%E4%B9%8B%E8%88%9E%E3%80%8B%E5%85%A8%E5%A5%97%E9%AB%98%E6%B8%85%E5%9B%BE/"/>
    <id>https://caelica.github.io/2022/09/11/%E5%B0%8F%E8%8D%B7%E5%B0%94%E6%8B%9C%E5%9B%A0-%E5%90%95%E7%AD%96%E5%B0%94%E4%BC%AF%E6%A0%BC%E3%80%8A%E6%AD%BB%E4%BA%A1%E4%B9%8B%E8%88%9E%E3%80%8B%E5%85%A8%E5%A5%97%E9%AB%98%E6%B8%85%E5%9B%BE/</id>
    <published>2022-09-11T07:20:31.000Z</published>
    <updated>2022-12-16T15:17:42.720Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>16世纪著名的《死亡之舞》艺术作品，由小汉斯·荷尔拜因设计、吕策尔伯格雕刻的木版画。 <a id="more"></a></p></blockquote><embed src="./Hans Holbein's Dance of Death (pdf).pdf" width="100%" height="700" type="application/pdf"><p>&emsp;&emsp;在之前的文章《<a href="https://caelica.github.io/2021/07/19/%E4%B8%80%E4%BA%9B%E6%8B%89%E4%B8%81%E8%AF%AD%E8%B0%9A%E8%AF%AD%E7%9A%84%E5%90%AB%E4%B9%89%E8%80%83%E6%8D%AE%E4%B8%8E%E6%B4%BE%E7%94%9F%E7%94%A8%E6%B3%95/"><font color="blue">一些拉丁语谚语的含义考据与派生用法</font></a>》中简单提到了这个在16世纪的各类“死亡之舞”中具有代表意义的作品，但一直没能找到这个作品的高清全集。后来我发现一个丹麦的网站上收录了全部内容，还做了详细解释，于是我下载了全部原图并以PDF的形式整合到了一起。网站原址为：<a href="http://www.dodedans.com/Eindex.htm" target="_blank" rel="noopener">http://www.dodedans.com/Eindex.htm</a></p><p>&emsp;&emsp;这套作品初版创作于1522年至1526年之间，由文艺复兴时期著名画家小汉斯·荷尔拜因（Hans Holbein）和著名雕刻艺术家汉斯·吕策尔伯格（Hans Lützelburger）共同创作的木版画，可谓是16世纪两位大师强强联手的典范。完整版共41+10张。以下是我按照剧情顺序，自己制作的目录列表，德语部分采用16世纪原文以对应原图上的标题：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Die Schöpffung aller ding (the Creation of All Things)万物的创始</span><br><span class="line"><span class="number">2.</span> Adam Eua im Paradiss (Adam <span class="keyword">and</span> Eve <span class="keyword">in</span> Paradise)亚当夏娃在乐园</span><br><span class="line"><span class="number">3.</span> Vsstribung Ade Eue (The Expulsion)亚当夏娃被驱逐</span><br><span class="line"><span class="number">4.</span> Adam bawgt die erden (Adam Tills the Soil)亚当在翻耕土地</span><br><span class="line"><span class="number">5.</span> Der Bapst (The Pope)教皇</span><br><span class="line"><span class="number">6.</span> Der Keyser (The Emperor)皇帝</span><br><span class="line"><span class="number">7.</span> Der Künig (The King)国王</span><br><span class="line"><span class="number">8.</span> Der Cardinal (The Cardinal)红衣主教</span><br><span class="line"><span class="number">9.</span> Die Keyserinn (The Empress)皇后/女皇（现代德语为kaiserin，二者都可以指，下面的王后女伯爵等同理）</span><br><span class="line"><span class="number">10.</span> Die Küniginn (The Queen)王后/女王</span><br><span class="line"><span class="number">11.</span> Der Bischoff (The Bishop)主教</span><br><span class="line"><span class="number">12.</span> Der Hertzog (The Duke)公爵</span><br><span class="line"><span class="number">13.</span> Der Apt (The Abbot)修道院长</span><br><span class="line"><span class="number">14.</span> Die Aptissinn（The Abbess)女修道院长</span><br><span class="line"><span class="number">15.</span> Der Edelman (The Nobleman)贵族</span><br><span class="line"><span class="number">16.</span> Der Thumherr (The Canon)司铎</span><br><span class="line"><span class="number">17.</span> Der Richter (The Judge)法官</span><br><span class="line"><span class="number">18.</span> Der Fürspräch (The Lawyer)律师</span><br><span class="line"><span class="number">19.</span> Der Ratssherr (The Senator)议员</span><br><span class="line"><span class="number">20.</span> Der Predicant (The Preacher)传教士</span><br><span class="line"><span class="number">21.</span> Der Pfarrherr (The Priest)牧师</span><br><span class="line"><span class="number">22.</span> Der Münch (The Monk)僧侣</span><br><span class="line"><span class="number">23.</span> Die Nunne (The Nun)修女</span><br><span class="line"><span class="number">24.</span> Dass Altweyb (The Old Woman)老妇人</span><br><span class="line"><span class="number">25.</span> Der Artzet (The Physician)医师</span><br><span class="line"><span class="number">26.</span> Der Sternensecher (The Astrologer)占星者</span><br><span class="line"><span class="number">27.</span> Der Rychman (The Rich man)富人</span><br><span class="line"><span class="number">28.</span> Der Kauffman (The Merchant)商人</span><br><span class="line"><span class="number">29.</span> Der Schiffman (The Sailor)水手</span><br><span class="line"><span class="number">30.</span> Der Ritter (The Knight)骑士</span><br><span class="line"><span class="number">31.</span> Der Groff (The Count)伯爵</span><br><span class="line"><span class="number">32.</span> Der Altman (The Old Man)老人</span><br><span class="line"><span class="number">33.</span> Die Greffinn (The Countess)伯爵夫人/女伯爵</span><br><span class="line"><span class="number">34.</span> Die Edelfraw (The Lady)女贵族</span><br><span class="line"><span class="number">35.</span> Die Hertzoginn (The Duchess)公爵夫人/女公爵</span><br><span class="line"><span class="number">36.</span> Der Krämer (The Peddler)小贩</span><br><span class="line"><span class="number">37.</span> Der Ackerman (The Peasant)农民</span><br><span class="line"><span class="number">38.</span> Dass Jung kint (The Young Child)小孩子</span><br><span class="line"><span class="number">39.</span> Gebeyn aller menschen (Bones of All Men)众人的尸骨</span><br><span class="line"><span class="number">40.</span> Dass Jüngst gericht (The Last Judgment)最后的审判</span><br><span class="line"><span class="number">41.</span> Die Wapen dess Thotss - Gedenck das end (the Escutcheon of Death - Remember the End)死神的纹章盾徽 - 记住一切的结局</span><br><span class="line"><span class="number">42.</span> Soldier士兵</span><br><span class="line"><span class="number">43.</span> Waggoner马车夫</span><br><span class="line"><span class="number">44.</span> Gambler赌徒</span><br><span class="line"><span class="number">45.</span> Robber强盗</span><br><span class="line"><span class="number">46.</span> Blind man 盲人</span><br><span class="line"><span class="number">47.</span> Beggar乞丐</span><br><span class="line"><span class="number">48.</span> Drunkard酒鬼</span><br><span class="line"><span class="number">49.</span> Fool 愚者</span><br><span class="line"><span class="number">50.</span> Young woman年轻女人</span><br><span class="line"><span class="number">51.</span> Young man 年轻男人</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;1526年的初版是40幅木版画，这个版本被称为“印刷校样版”，即“Printer’s proofs”或”proof impressions”，此版本不含有“占星师”，可能是为了凑40个的整数；而1538年出版商梅尔基奥尔和加斯帕.特雷克塞（Brothers Melchoir and Gaspard Trechsel）兄弟在法国里昂正式出版了这套木版画，补上了缺少的“占星师”。虽然吕策尔伯格在1526年去世，荷尔拜因在1543年也去世了，但后续的一些艺术家在大约于1545年至1562年的时间中，在模仿两位大师风格的基础上又向其中陆续增添了士兵、车夫、赌徒、强盗等十幅作品。共同组成了41+10的完整作品集。这部作品集被后世的许多画家临摹或参考创作过。其中一些经典篇目如“骑士”、“富人”、“士兵”等，更是广受欢迎。</p><p>&emsp;&emsp;据说这部作品一经问世就被法国名为维达尔·德·贝卡尼斯（Vidal de Bécanis）的宗教审判长（General inquisitor）下令禁止，可能是认为它有丑化宗教人士的嫌疑。有必要说明的是，当时正值宗教改革最为激烈残酷的时期，在荷尔拜因创作这部作品的时候，也就是1525年，德意志中部爆发了著名的闵采尔农民起义，最终于1525年5月15日的弗兰肯豪森战役（Battle of Frankenhausen）中，7000名农民起义者被诸侯联军包围，约5000人被杀害，各地起义也均在一年之内遭镇压。在德意志文化圈出生长大的荷尔拜因不可能不知道这些事，这部作品直到12年后即1538年才有人在法国出版，也很可能和当时的社会情况有关。</p><p>&emsp;&emsp;关于“死亡之舞”的背景已在前文中叙述过，在此不赘述。从荷尔拜因这41幅画来看，故事是从亚当和夏娃的传统圣经故事开端，而死神则在亚当夏娃被逐出伊甸园就开始跟随着他们，即死神从此常伴人类。接下来则是社会各个阶层的角色被死神拖入死亡的场景。死神既动作滑稽、又所向披靡，且不止出现了一个，沙漏也是一个几乎和死神并排出现的元素，暗示着生者时日无多。虽然死神最终带走了所有人，但我们仍能在其中隐约看出作者的创作倾向——死神在带走穷苦百姓的时候显得较为礼貌、平和；而在带走那些作威作福、目中无人的角色时则是生拖死拽、百般嘲弄。作者甚至直接描绘出这些角色的恶行现场——如【17.法官】中展现了一位收受贿赂的法官；而在【8.红衣主教】中更是直接展示了红衣主教出售赎罪券的场景，其中的批判意图可谓直截了当。也难怪这部作品被那位审判长当成了眼中钉。</p><p>&emsp;&emsp;而值得注意的是倒数三张图片（即39、40、41），在【39.众人的尸骨】中，绘制的是经典的题材“死神胜利”的场景，所有人都已死去，只剩下得胜的骷髅们吹起了乐器敲起了鼓；而在【40.最后的审判】中，上帝终于出现，人类又似乎重新复活了。而骷髅们则全部消失，故事也没有明确交代这些大获全胜的死神究竟怎么样了。是上帝像在《浮士德》中制裁墨菲斯托那样一般，阻止了死神的阴谋大计，并让死去的人们都得救了吗？作者没有明说。不过整个故事也就到此结束了，整部作品的主题可以看作是以死神的元素复刻了传统的宗教故事。</p><p>&emsp;&emsp;而最后一张图【41.死神的纹章盾徽】，则是荷尔拜因为死神这一主题设计的纹章形象，并将这个纹章放在1538年版本的最后，这是那时的“死亡之舞”作品中的一个常见的做法。这个图片伴随着一条圣经中的引用，即武加大本（Vulgate）中的《西拉书（Sirach）》第7章节的最后一句：</p><blockquote><p>…in omnibus operibus tuis memorare novissima tua et in aeternum non peccabis.<br>…无论你做任何事情，都要记住最后的结局（这里指的当然是死亡以及最后的审判），这样你就永远不会犯大错。</p></blockquote><p>&emsp;&emsp;最后得简单说明一下，《西拉书》又称《便西拉智训（Ecclesiasticus）》，中文也通常翻译为《德训篇》、《次经传道书》（并非《传道书》）或《智训》。此书在天主教或东正教圣经中为旧约中的【正典】（Canon），也就是正式篇目，但在新教中则属于【次经】（Apocrypha）。因我们今天能看到的《圣经》以新教圣经居多，故《西拉书》通常无法在一些圣经中找到，属于是圣经不同版本的问题。</p><p>【次经】即Apocrypha或Deuterocanonical Books，有时又称作“伪经”、“旁经”、“外经”等，中文并没有一个约定俗成的通行翻译，但需要指出的是，“伪经”这个翻译是错误的。</p><p>真正的【伪经】应该写作Pseudepigrapha，字面意思是“伪名书、托名假作”，即假冒其他作者之名号而创作的作品，目的是增加作品的可信度。而Apocrypha的词根是“隐藏的”的含义，Deuterocanonical的字面意思则是“第二类正经”。一般在宗教历史学上认为，Apocrypha也是真正的古代犹太经典著作，与正典具有同等的地位，故在宗教意义上也具有同等的信仰价值，只是由于种种历史原因，没有被列入后世一些不同宗派、不同版本的圣经中。像《西拉书》、《犹滴传》这类就属于Apocrypha。20世纪如死海古卷等一些重要古籍的出土，侧面说明了仍可能存在没有被发掘出的次经，也说明即使是古代的希伯来抄本圣经也绝非只有一个标准版本。综上所述，次经是真经，不是伪经。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;16世纪著名的《死亡之舞》艺术作品，由小汉斯·荷尔拜因设计、吕策尔伯格雕刻的木版画。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="艺术" scheme="https://caelica.github.io/tags/%E8%89%BA%E6%9C%AF/"/>
    
      <category term="文化" scheme="https://caelica.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>读胡适的《请大家来照照镜子》</title>
    <link href="https://caelica.github.io/2022/08/27/%E8%AF%BB%E8%83%A1%E9%80%82%E7%9A%84%E3%80%8A%E8%AF%B7%E5%A4%A7%E5%AE%B6%E6%9D%A5%E7%85%A7%E7%85%A7%E9%95%9C%E5%AD%90%E3%80%8B/"/>
    <id>https://caelica.github.io/2022/08/27/%E8%AF%BB%E8%83%A1%E9%80%82%E7%9A%84%E3%80%8A%E8%AF%B7%E5%A4%A7%E5%AE%B6%E6%9D%A5%E7%85%A7%E7%85%A7%E9%95%9C%E5%AD%90%E3%80%8B/</id>
    <published>2022-08-27T07:31:55.000Z</published>
    <updated>2022-12-23T07:55:11.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>一九二八年的文章。 <a id="more"></a></p></blockquote><p>《请大家来照照镜子》，可以在wiki页面直接查看原文：<a href="https://zh.wikisource.org/zh-hans/%E8%AB%8B%E5%A4%A7%E5%AE%B6%E4%BE%86%E7%85%A7%E7%85%A7%E9%8F%A1%E5%AD%90" target="_blank" rel="noopener">https://zh.wikisource.org/zh-hans/%E8%AB%8B%E5%A4%A7%E5%AE%B6%E4%BE%86%E7%85%A7%E7%85%A7%E9%8F%A1%E5%AD%90</a></p><p>&emsp;&emsp;偶然看到这篇胡适先生在1928年写的文章，其文笔可谓锐利无比，在今天看来也很通俗易懂。我并没有读过太多胡适和鲁迅的文章，因为我个人来说其实向来都和鲁迅先生的那句话保持一致：“我以为要少——或者竟不——看中国书，多看外国书”。这不代表中国没有好书，只是实在少到可怜，与其在垃圾堆里找食，不如老老实实坐到餐桌前吃一顿好的。不过可以肯定的是，像鲁迅胡适这些人的作品在20世纪初无疑是具有启蒙性质和指导意义的，但对于今天的人来说，最让人感触颇深的却是意识到这是一百年前的文字，面对的居然是一百年都没有解决的难题。</p><p>&emsp;&emsp;在今天看来，一百年前安诺德先生提出的“三个大问题”：即全国的铁路和交通问题、教育和工业化问题、个人的责任心问题，似乎是被解决了，但我们也都明白，问题只是在表面上解决了，实际上并没有解决得很好很彻底。而胡适本人在文章中给出的两个解决方案：肯认错，和死心塌地的去学，则是决绝从来都没有做到过的。为什么我们永远都在落后，即使是眼看就要有那么一点追上的机会，却还是被一股怪力给无情地拉了回去？我想答案也很明白，就是我们从来都没有真正低头认错，而正是因为没有低头认错、承认自己不如人，才做不到“死心塌地的去学”，学不到“死心塌地”的核心内容。</p><blockquote><p>这种急需的新觉悟就是我们自己要认错。我们必须承认我们自己百事不如人，不但物质上不如人，不但机械上不如人，并且政治社会道德都不如人…</p></blockquote><blockquote><p>因为我们从不曾悔祸，从不曾彻底痛责自己，从不曾彻底认错。二三十年前，居然有点悔悟了，所以有许多遣责小说出来，暴扬我们自己官场的黑暗，社会的卑污，家庭的冷酷。十余年来，也还有一些人肯攻击中国的旧文学，旧思想，旧道德宗教，——肯承认西洋的精神文明远胜于我们自己。但现在这一点点悔悟的风气都消灭了。现在中国全部弥漫着一股夸大狂的空气：义和团都成了应该崇拜的英雄志士，而西洋文明只须“帝国主义”四个字便可轻轻抹煞！政府下令提倡旧礼教，而新少年高呼“打倒文化侵略！”。</p></blockquote><p>&emsp;&emsp;不论是鲁迅也好，胡适也好，还是文中的这位安诺德先生，不知这些老先生如果活到今天会是如何感想，不，他们都是没有“资格”活在这个社会的，这些人如果活到今天，都会被全网fs，重则那啥，虽然我们知道人家老爷子活着的时候早就远走高飞，62年就去世了。但我猜，就是强如他，智慧如他，他写这篇文章的时候恐怕也无法预料到一件事：</p><p>&emsp;&emsp;那就是低头认错、承认自己不如人，承认西洋的精神文明远胜于自己，居然是如此之难！简直难于上青天——难过了洋枪洋炮，难过了全民普及教育，难过了全国铁路交通网，难过了大学里的量子力学，难过了全国电气化、核电站和载人航天，难到了一百年都做不到的水平上。</p><p>&emsp;&emsp;古时候洋人送来咕咕钟，我们曰“淫技奇巧”；洋人送来洋枪洋炮，我们认为没比自家的好到哪去；终有一天洋人把步枪顶在头上了，才真正下决心去学点什么先进的东西，好来打败洋人。19世纪的人只看到了咕咕钟和洋枪洋炮背后的近代化工厂和生产线设备，却没有意识到工厂和设备的背后，是一套工业体系和适应工业化的社会结构；接下来的事情，我们这几十年的教科书的口径也都是这样完全一致的：从学西方人的技术到学西方人的思想和制度，似乎就是走上了正道。但后面这一百年的经历告诉我们，事情似乎远远不止这么简单。首先我们学来的所谓“思想”、所谓“制度”，其实更大程度上说是偏向政治和经济方面的思想和制度，这些所谓的制度和思想本质上来说是偏功利性的，是为了建设工业化社会的制度和思想。虽然功利性本不是坏事，但它们从来都没有在合理的框架下运行，各路先进的制度和思想到了这里就如同掉进了一个“大染缸”，产生出千奇百怪的“本地化版本”，连发达国家的人看了都要目瞪口呆。</p><p>&emsp;&emsp;而工业化的社会、制度、经济、政治等思想理论体系的背后是什么？这一层的概念因为脱离了直接利益，就很少有人去思考了。按照胡适那个年代的观点，可能会说是教育体系，是培养现代化人才的教育体系，只要有了列强们的教育体系，就有了可以比肩列强的人才，就能诞生后面的一切。就像胡适和安诺德提出的兴办教育的方案，“用教育来打倒愚昧，用实业来打倒贫穷，用机械来征服自然”，固然没错，但最关键的问题来了，教育体系和老师出了问题的教育还算不算教育？这样的教育还能不能打倒愚昧，成为后续一切内容的First Cause？</p><p>&emsp;&emsp;显然，不行。这也正是那个年代的人难以考虑到的问题，也是站在现代这个时间点才能得出的一个推想，这并不容易，放到发达国家，也起码得是第二次世界大战后才逐渐认识到这个问题：</p><p>&emsp;&emsp;教育体系的背后站着的是一个个大大小小的老师，而老师也是人，也是需要被培养被教育的。而这并不是一个鸡生蛋蛋生鸡的问题——因为人并不一定要有老师才能成为老师。这个概念最终推向的是什么才能真正培养人——即一个社会（注意，是社会，不是教育机构）如何培养出现代意义上的人的问题，再次强调是在排除了教育体系的情况下——一个没有老师、上不起学、没有文凭，甚至从来就没有踏官方进教育机构一天的人，能否在这个环境中成长为现代意义上的人的问题。最后我们发现，可能是一个社会的整体状态和精神风貌在影响着这个问题的结果，是它们决定了这个人在成长过程中能接触到什么东西，从而产生什么样的思考和判断。而老师们和教育机构只是这个大框架中的小小一环。</p><p>&emsp;&emsp;而这背后又是什么呢？很明显到了这一层，就相当的抽象了，它可能是一个社会芸芸众生的<strong>潜意识中</strong>对一些基本概念的认识理解程度，如对是非善恶、法治精神、信仰等的理解水平，对科学精神、人文精神的认同程度或持有状态，对自由和奴役、生存和死亡等终极问题的态度和思考，等等。<strong>这些东西甚至难以用语言表达，它们是人类精神活动的底层逻辑，是比白纸黑字的规章制度、思想理论更加虚无缥缈，更加看不见摸不着的东西</strong>。而教育机构从不能解决这些问题，我甚至认为，教育机构也不应负全责去处理这些问题，因为无论是官方的还是私人的教育机构，它们通常都是逐利的，或是带有某种目的的。即使是在发达国家，我们也能够看到传统教育机构在处理这些问题上的种种弊病。那些好的教育更多的也只是起到辅助作用，而一个坏的教育则是愚昧和谎言的制造工厂，是比核战争还可怕的东西，毒害了一代又一代的人。</p><p>&emsp;&emsp;答案到这里已经很明显，我们的落后是精神上、灵魂上的落后。甚至可以说如果不从这一层级上得到彻底解决，就没有资格成为真正意义上的现代人和现代社会，无论是学再多的先进技术、思想理论都没有用，也就永远追不上发达国家的步伐。就从这一层级上来说，即使是今天，我们中间认识到的人可谓是凤毛麟角，沧海一粟，否则这个问题也绝不会一百年都解决不了。即使是手里有了遍布全国的铁路，甚至有了航空母舰，精神上、灵魂上却仍是几千年前“忠孝礼义”那套。有人可能会不服，说古典希腊、罗马也有讲究什么“四主德（Cardinal Virtues）”，也有希波克拉底的传统医术，从而论证传统那套东西仍然可以全方位指导今天的事物。这是完全错误的，其区别就在于，西方的这些思想在两千年中经过了数不清的“版本更新迭代”，尤其是像宗教改革、启蒙运动这样革命性的进步，早已不可同日而语了，没有现代人会觉得靠希腊罗马的那套古典法律和精神就能直接对接现代社会，更别说用什么“四液学说”来行医治病；而在我们这里，什么“驭民五术”，什么“阴气阳气”、“精气血津液神”可是每天都在这个社会实打实地运行着，男人就是“忠孝礼义”，女人就是“三从四德”，几千年过去了却压根没怎么更新进化过！现在的人虽然嘴上不明说，但骨子里没变，并且一有机会就想把它们全捡回来，好好摆到庙堂上供一番。</p><p>&emsp;&emsp;这下算是说清楚了为什么一百年都没做到的原因，是人出了大问题：<strong>他目光太短浅，太急功近利，没有意识到那些不能直接给他带来物质利益的、看不见摸不着的东西的重要和伟大之所在</strong>；就算是有幸意识到了，却放不下那个架子，不肯改变自身的形象；他害怕新东西，不适应事情的变化，怕新事物超出了他的控制范围，最终却要去主动抵制这些新事物带来的变革。甚至我敢说，只要再有人认识不到、或是不承认这样的落后，这个国家就还要继续在这个荒唐的迷宫中兜兜转转下去，一百年都不止。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一九二八年的文章。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="文化" scheme="https://caelica.github.io/tags/%E6%96%87%E5%8C%96/"/>
    
      <category term="随想" scheme="https://caelica.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>画一个燧发枪小姐姐</title>
    <link href="https://caelica.github.io/2022/08/05/%E7%94%BB%E4%B8%80%E4%B8%AA%E7%87%A7%E5%8F%91%E6%9E%AA%E5%B0%8F%E5%A7%90%E5%A7%90/"/>
    <id>https://caelica.github.io/2022/08/05/%E7%94%BB%E4%B8%80%E4%B8%AA%E7%87%A7%E5%8F%91%E6%9E%AA%E5%B0%8F%E5%A7%90%E5%A7%90/</id>
    <published>2022-08-05T08:43:28.000Z</published>
    <updated>2022-08-27T10:24:42.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>似乎是有进步的对吧？ <a id="more"></a></p></blockquote><img src="/2022/08/05/画一个燧发枪小姐姐/Fusilier.png" title="a"><hr><p>前段时间对拿破仑战争时期的武器与制服很感兴趣，也研究了不少时间。于是就这么开始了。采用了新的笔刷和上色思路后，观感的确比之前的作品要好一些。</p><p>制服自由发挥的居多，但武器基本都是照抄历史原型的，步枪是法国共和九年（An IX）的沙勒维尔（Charleville）系列的步兵步枪，准确的来说这个型号是“龙骑兵型（Dragoon）”。在之前的文章《<a href="https://caelica.github.io/2021/04/09/%E7%AE%80%E5%8D%95%E7%9A%84%E6%89%8B%E5%8A%A8%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E7%BD%91%E9%A1%B5%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%B9%E6%B3%95/"><font color="blue">简单的手动批量下载网页图片的方法</font></a>》中简单介绍过一些有关的信息，但后来了解深入以后我发现那篇里面写的一些不太对（已将原文的某些部分更正）。18世纪那会其实制式武器这个概念才刚刚起步，说到底，不像今天的武器型号那么规范严格，各种军刀、枪械等往往是一种习惯型号由很多个工厂在生产，某些零部件存在一定程度的明显差异，且也不一定通用。所谓的“沙勒维尔步枪”实际上指的是18世纪法国生产的一系列武器，远非1777一种型号，但这些武器其实大同小异，所以“沙勒维尔步枪”其实是一种通称叫法，而更精确的描述类似于“共和九年型（modèle An IX）”这样的叫法（法兰西共和元年是1792年，共和九年即为1800年）也不是说就一定能规范到每一个武器零件上，况且，还有大量的其他国家仿制这些武器，如普鲁士奥地利等，沙皇俄国的“图拉步枪”更是直接原样照抄，美国建国后的第一种标准制式步枪——斯普林菲尔德M1795也是在沙勒维尔的基础上仿制而来。这么一来的话，沙勒维尔步枪确实无愧于“18世纪的AK”这个称号。同时代英国的“棕贝斯（Brown Bess）”同样也是一种通称，即使是所谓的“长陆型（Long Land Pattern，意思是陆军长枪，其实我更愿意翻译为“长陆样”，以区别于今天常见的Model和Type的汉语翻译）”在几十年间也是有明显变化的。</p><p>厘清这些后，作为绘画首先遇到的问题是，18世纪的枪实在是太长了，画面不是很容易放得下，沙勒维尔步枪在1777年的步兵型全长是1.52米，拿破仑战争时期的型号大部分缩短到1.42米（龙骑兵型其实和步兵型长度一样，真正短一截子的是卡宾型）。这么接近一人高的玩意，装上刺刀更是突破一米八，这在今天是很难见到的，如二战时期主流步枪大部分长度在1.1米这个水平上，刺刀也大大缩短；今天的主流突击步枪全长基本都在900mm之下，无托结构的还要更短一点。</p><p>这导致我最初很难安排火枪的摆放位置，一度考虑以更短的线膛枪或卡宾枪取而代之，然而削了长度之后又发现，那种长步枪带来的第一感觉其实是旧时代燧发枪兵最核心的观感，让人一眼就能辨认出那个年代的氛围，才意识到这是不可或缺的，于是坚定了采用长枪的设计。除了把它做得比真实情况更短之外，还想到了一个取巧的方法：利用一定程度的透视来缩短长度。但这也大大增加了设计的难度，细心的人估计也能看出，目前这个透视效果还是有着较明显的问题，但无奈水平有限，这已经是我能做到看起来违和感最小的结果了。不过也没关系，还是要难一点才有挑战性嘛。步枪也采用了材质笔刷修理木头和金属的材质效果，从效果来看，有还是比没有强的多。</p><p>军刀是那个年代步兵比较流行的一种被称作Briquet的武器，整体是Saber的样式，但比起真正的骑兵刀长度要短得多，设计也相对简易。从长度可以看出它不是真的用来战斗的武器，本是配发给掷弹兵和近卫军用来摆显身份的，但相当受普通步兵的欢迎，据说步兵们认为佩戴这种军刀能够让自己看起来很有身份，毕竟无论是骑兵还是各路军官都有一把闪闪发光的军刀，而普通线列步兵往往只配发一把连牛排都切不了的刺刀。这种习惯也渐渐流行到了诸如俄国、普鲁士等国家的军队中。我个人也是相当喜欢Briquet的感觉，也难怪它会如此受欢迎。</p><p>有一些结构问题是我从画面平衡和布局的角度做出的决定，比如Shako的长穗其实更应该出现在右侧，但因为燧发枪本身是不能被镜像翻转的（燧发机构必须在枪体右侧，没有在左侧的燧发枪，除非是双管武器），所以就固定在了左侧。刺刀也是故意放到了能看见的地方，画了那么久的艺术资源也得有效利用起来嘛，不能白扔掉了么不是。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;似乎是有进步的对吧？&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="绘画" scheme="https://caelica.github.io/tags/%E7%BB%98%E7%94%BB/"/>
    
      <category term="设计" scheme="https://caelica.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="历史" scheme="https://caelica.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>那些追求真正价值的上传者</title>
    <link href="https://caelica.github.io/2022/08/05/%E9%82%A3%E4%BA%9B%E8%BF%BD%E6%B1%82%E7%9C%9F%E6%AD%A3%E4%BB%B7%E5%80%BC%E7%9A%84%E4%B8%8A%E4%BC%A0%E8%80%85/"/>
    <id>https://caelica.github.io/2022/08/05/%E9%82%A3%E4%BA%9B%E8%BF%BD%E6%B1%82%E7%9C%9F%E6%AD%A3%E4%BB%B7%E5%80%BC%E7%9A%84%E4%B8%8A%E4%BC%A0%E8%80%85/</id>
    <published>2022-08-05T02:48:45.000Z</published>
    <updated>2022-08-27T09:51:26.410Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>写给那些不知名的上传者们。 <a id="more"></a></p></blockquote><p>&emsp;&emsp;不知道为什么突然想到了AFK PL@YERS，和那个我能和同学坐在屏幕前面看一下午魔兽搞笑视频的日子。</p><p>&emsp;&emsp;大概是2010年前后，记忆中有《星际争霸2》上线时的消息，那会视频都在优酷网看（应该也有土豆网），虽然每点一个视频都要等大概30-60秒的烂广告，却还是让人看的很入迷，那会魔兽还很火，看的最多的就是AFK PL@YERS、性感玉米这些，当然还有《我叫mt》。巫妖电视王，晚安部落，性感玉米的《网瘾战争》这些更是看了一遍又一遍。这些创作者们直接调用魔兽世界的游戏框架和地图、人物模型，制作出机械木偶般的游戏动画，比起传统的动画来说虽然看起来十分简陋粗糙，却仍讲出了活灵活现的故事。可贵的是，这些往往是由几个朋友们拼凑而成的同好小队，靠着对游戏的热爱和热情，靠着对真相和事实的坚持，胜过了影视、动画行业的很多所谓的专业人士和团队。现在去B站等视频网站搜索AFK PL@YERS也找不到多少视频了，可能是现在对外网搬运有一定的打压，以前我记得可是有好几个人在系统地在搬运他们的作品，数量都是一整页一整页，能让人在炎热的夏天拿着冰镇饮料快乐一下午。</p><p>&emsp;&emsp;现在想想，那会优酷、土豆其实一定程度上充当了Youtube的本地化版本，因为那时管的不严，有大量不知名的上传者搬运Youtube上优质的作品（其实通过他们也筛选掉了Youtube上的低劣内容），经常能找到哪个独立音乐人的新作品，哪个黑死金乐队的现场录像，魔兽星际的游戏原声，从来没能在盗版游戏中看到的结局动画，还有那些我从来没有接触过的电影和动漫。我记得我还看过一些枪械火药制造过程的录像，Youtube上最早的一批冷兵器和盔甲锻造视频，甚至还有几首后来被汇入Botho Lukas Chor的宝藏专辑《Wenn die Landsknecht singen》里的音乐（确实很让人吃惊，连这都有！而且比这张14年的汇总专辑还早，但十多年前我对德语和Landsknecht的历史一无所知，只是觉得很好听），以及某些打擦边球的玩意（质量也确实很高就是了）。当然那些太敏感直接的话题肯定是没有的。那会确实是没有什么自媒体圈子、营销号的，网友们ID都是一串IP地址。虽然这样的搬运或者盗版视频侵犯了原作者的版权也是事实，但还是能让我们接触到这么多优秀的作品。我后来在Youtube上也一个一个找回了那些原作者，虽然很多都在数年前就已经停更了，但也总归是找到了他们。</p><p>&emsp;&emsp;不过现在打开视频网站都是一群什么玩意？说实话没人会喜欢现在这样的东西，除了一些官方牵头搞得诸如后浪二舅之类的假大空，大部分自媒体作者也不是在做什么有价值的原创内容，而是天天在那造人设、以打造泛社会化的meme为目标，批量生产没有什么技术含量的低成本视频，试图以这些东西来吸引全网无头苍蝇一般的受众，当年玉米就曾在作品和现实中狠狠吐槽过这些正在互联网上越来越泛滥的虚假：为什么我们生产的大部分电影、电视剧、小品相声，都那么无聊？还不是因为假的东西太多。虚假的作者和没有价值的作品在一个正常的互联网上是没有任何生存空间的，拒绝虚假和错误是人和动物的天性，他们在被强迫的时候接受了大量的虚假和错误，但当他们接触到自由的互联网的时候，又为什么要去主动收看毫无价值的东西呢？相反，如果谁在那时的视频站发布“假大空”，干什么都散发着一股铜臭味的时候，一定会被那些顶着一串IP地址的网友们亲切招呼。</p><p>&emsp;&emsp;但是在一个不正常或者说环境很恶劣的互联网体系和社会环境中，一切都翻了过来，人们比的不再是谁的作品更有价值更有意义，而是只认让流量和金钱，看你搞这个视频能不能变现，做这个爱好能不能养家糊口。结果就是，那些说起话来神采奕奕个个都有一股推销员的感觉的家伙们，虽然他们十句话九句假，却占据了网络媒体主流。甚至我觉得现在这个环境下，这些都可以拿来当成一条鉴定标准：那些说话表情像推销员一样一惊一乍的，封面放个张个大嘴巴脸，再配上一堆像香港广告牌风格一样的标语，特效还满天飞，标题也不是正常句子的，大概率都是垃圾。一般来说即使是在市场环境下，这些东西有那么一点也就够了，最后还是得靠质量和实力说话。但现在的视频却把它们当成主要目标在经营，最应该下功夫的视频内容却毫无价值。俗话说的好，丑人多作怪，现在Youtube上也有越来越多的垃圾作者，这个傻掉的网站也学起Tiktok开始搞无聊的短视频业务了，我认为它们一样统统适用于这个标准。</p><p>&emsp;&emsp;就看视频这点上，我宁愿回到那个我只有一个小手机，在上课、在被折磨人的各种试卷困住的时候偷偷看的状态，因为我知道那个社区是有活力有价值的，上传者是目光敏锐的，它就像一座宝库一样等着我去探索，而不是现在这种同质化严重，只需看一眼就知道这视频该是有多无聊的内容。</p><p>&emsp;&emsp;我也是最近才知道AFK PL@YERS成员之一的“战锁锁不住”就是后来开发游戏《返校》的导演，这中间也隔了很多年了，一些台湾的网友似乎也对这个感到惊讶。不过我想，某种程度上它加深了我的一个猜想的可能性：“能人”比“专业人”要更可贵，因为“专业人”是可以在简单模型下训练出来的，而“能人”往往是复杂条件下自我培养出来的，“能人”的高明之处并非某个专业水平的高低，而在于其文明程度上的整体先进（甚至我认为社区、社会也同理）。正因为如此，能人也始终是能人，这些人从事任何事业都不会落到后面去，而“专业人”一旦离开专业岗位往往难以适应，这被称为“专家陷阱（Expert trap）”。我相信，像战锁和玉米这样的人，他们的才能是显而易见的，即使他们被这个社会压制了，哪怕是五年、十年甚至一辈子，他们也会把文明的火种传递到下一代身上。再不济，哪怕就像是那些早期从Youtube上搬运来视频的上传者们一样，比起什么马云马化腾，这些无名无姓的人可能才是国内互联网被忽略的先驱者们，他们连个像样的头像也没有，估计从没想过要靠这些视频火一把或者赚到什么利益，就像那些给开源社区默默贡献着的人，仅仅是出于他们对价值判断的敏锐程度和对事物的热情，就足以使他们把这些有价值的东西带到高墙之内来。虽然这些作品随着服务器的关停，以及原作者的停更等等因素湮灭在了网络中，我再登上那个收藏夹的时候，所有的视频都已经404。但那些深受他们作品影响的人会成为他们精神上的后人，这些人感受过充满价值与自由秩序的互联网，也就永远不会再掉头返回到曾经的虚假和错误中。终有一天，这些火种将重新燃起，那些先驱者们曾经培养出的才能与远见，也都会以另一种方式重见天日。</p><p>&emsp;&emsp;而我呢，我也想成为那样的人。不，不光是想，我一定要这样做。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写给那些不知名的上传者们。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="生活" scheme="https://caelica.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随想" scheme="https://caelica.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>MySQL命令行连接指定端口、以及修改数据库密码</title>
    <link href="https://caelica.github.io/2022/06/06/MySQL%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E3%80%81%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81/"/>
    <id>https://caelica.github.io/2022/06/06/MySQL%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BF%9E%E6%8E%A5%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E3%80%81%E4%BB%A5%E5%8F%8A%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81/</id>
    <published>2022-06-06T05:47:32.000Z</published>
    <updated>2022-06-09T09:15:41.091Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>用cmd命令行及Navicat界面连接数据库，实现修改数据库密码、连接不同端口（如3307等）、以及解决MySQL server has gone away的问题。<a id="more"></a></p></blockquote><p>首先说一下，如果只是为了解决问题的话，建议直接跳到文章中间从Navicat的方法进行，这里的cmd只是为了解释其机制。</p><h2 id="1-命令行连接MySQL数据库"><a href="#1-命令行连接MySQL数据库" class="headerlink" title=" 1.命令行连接MySQL数据库"></a><p align="left"> 1.命令行连接MySQL数据库</p></h2><p>&emsp;&emsp;MySQL的配置一般由数据库Data目录下的<strong>my.ini</strong>文件控制（Windows环境下叫my.ini，而在Linux环境下则是my.cnf），虽然直接修改这个文件也能起到一定作用，但容易出事，故一般情况下要配置MySQL的话最好使用MySQL的命令行。从cmd就可以执行。从cmd连接MySQL数据库的方法如图所示：</p><img src="/2022/06/06/MySQL命令行连接指定端口、以及修改数据库密码/1.png" title="a"><p>&emsp;&emsp;因为我的MySQL装到了E盘上，而cmd默认路径在C盘的system32，所以我们首先得用<code>e:</code>换盘，否则怎么cd都没有用的。换盘后，cd路径到MySQL的<strong>bin</strong>目录下，即拥有mysqld.exe和mysql.exe的那个位置；<br>这里我采用的命令为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -hlocalhost <span class="attribute">--port</span>=3306 -uroot -p</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这个命令的好处是可以实现对接指定的端口（如3307）。因为我实际上装了两个不同版本的MySQL服务（MySQL5和MySQL8），分别控制着<strong>localhost_3306</strong>和<strong>localhost_3307</strong>。一般的那种不指定端口的常规命令会默认连到localhost_3306去，就无法连接到3307了。故我们只需要将命令中port的值改为3307即可连入3307的服务器控制台。</p><p>&emsp;&emsp;接下来输入数据库密码，出现图中Welcome to the MySQL monitor等字样即说明连接成功。接下来即可执行其他命令。例如，我最近在导入大.sql文件（约200Mb）时遇到了<strong>“MySQL server has gone away”</strong>的问题，经查，这是由于数据库对导入的sql大小有限制导致的，需要修改这个限制值。首先通过命令来查看这个值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'max_allowed_packet'</span>;</span><br></pre></td></tr></table></figure><img src="/2022/06/06/MySQL命令行连接指定端口、以及修改数据库密码/2.png" title="b"><p>&emsp;&emsp;然后修改它。这里的文件大小是用<strong>字节（Bytes）</strong>计算的，可以自行换算成Mb等单位，如：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> global <span class="comment">max_allowed_packet=157286400</span>;<span class="comment">/* 设定为150Mb */</span></span><br><span class="line"><span class="keyword">set</span> global <span class="comment">max_allowed_packet=314572800</span>;<span class="comment">/* 设定为300Mb */</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后可以再输入一次命令查看限制值，可以看到已经改成了300Mb。整个过程就如图所示。</p><p>&emsp;&emsp;而实际上，在数据库管理工具（如Navicat）中也能实现这个功能，而且比cmd简单多了。这里我们就从Navicat上修改它。因为我现在已经放弃3307的端口（让二者共用3306，但冲突），故这里以3306为例：</p><img src="/2022/06/06/MySQL命令行连接指定端口、以及修改数据库密码/3.png" title="c"><p>&emsp;&emsp;在localhost_3306上 右键&gt;命令列界面 就可以进入命令行状态，事实上选中3306后直接按<strong>F6</strong>也可以（在上面的“工具”栏），比从cmd上方便太多了。之后的步骤和上面就是一样的。所以如果遇到需要用命令行执行的操作，在Navicat等图形化工具上进行处理明显是更合适的方法。</p><hr><h2 id="2-修改数据库密码"><a href="#2-修改数据库密码" class="headerlink" title=" 2.修改数据库密码"></a><p align="left"> 2.修改数据库密码</p></h2><p>&emsp;&emsp;利用MySQL的命令行我们也可以修改数据库的密码。前提是得知道这个密码，这里不涉及忘了密码的情况（还没研究过…）。</p><p>&emsp;&emsp;在Navicat上进入对应数据库连接的命令行界面，这里以3306为例，因为我们已经登录了这个连接，也就不需要再验证旧密码了，直接可以用命令新建密码。命令为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span> = <span class="keyword">password</span>(<span class="string">"新密码"</span>);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;将命令中“新密码”修改为需要设定的密码即可。因为密码已被修改，再在数据库中执行动作可能会导致数据库掉线或者密码报错，此时建议先关闭连接，再用新密码连接一遍数据库即可（右键&gt;编辑连接&gt;在“密码”处输入新的密码）。</p><img src="/2022/06/06/MySQL命令行连接指定端口、以及修改数据库密码/4.png" title="d">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用cmd命令行及Navicat界面连接数据库，实现修改数据库密码、连接不同端口（如3307等）、以及解决MySQL server has gone away的问题。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="数据库" scheme="https://caelica.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="服务器" scheme="https://caelica.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Windows环境下编译TrinityCore</title>
    <link href="https://caelica.github.io/2022/05/24/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91TrinityCore/"/>
    <id>https://caelica.github.io/2022/05/24/Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BC%96%E8%AF%91TrinityCore/</id>
    <published>2022-05-24T10:55:26.000Z</published>
    <updated>2022-12-23T08:00:22.928Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>在Windows环境下通过基于TrinityCore的项目源码编译4.3.4-15595版本的服务端，以及服务端、客户端的配置工作，服务端的启动等及过程中的解释说明等。<a id="more"></a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><p align="left">前言</p></h2><p>在之前的工作（见<a href="https://caelica.github.io/2021/12/16/TrinityCore%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"><font color="blue">TrinityCore服务端的初步认识</font></a>）中，在不涉及源码编译的情况下，对Trinity服务端进行了简单的介绍，介绍了一些Trinity服务端的基本常识内容，并用别人编译好的服务端实现了3.3.5的WLK版本的服务端搭建。但由于服务端仍是使用现成的构建，略过了编译环节，也就导致一些功能无法实现，如自行提取对应版本的地图资源文件等，因为很多工具只有通过TrinityCore的源码编译才能生成。为了最大程度避免这些问题，从源码开始自行编译构建服务端无疑是最彻底的方案，故本次就从基于TrinityCore的项目进行源码编译。选择了一个基于TrinityCore的非官方分支项目即The-Cataclysm-Preservation-Project，也就是4.3.4版本的端，项目位于：<a href="https://github.com/The-Cataclysm-Preservation-Project" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project</a></p><p>本次说明中的资源都可以在这里找到，该分支项目也给出了TrinityCore的官方编译指南，即：<a href="https://www.trinitycore.info/en/install/Core-Installation/windows-core-installation" target="_blank" rel="noopener">https://www.trinitycore.info/en/install/Core-Installation/windows-core-installation</a> 。可以说，这次写的这个文章基本可以算是我对这篇TrinityCore官方文档的具体尝试，因为我也是初学者，认识浅薄，有能力的同学可以结合这个官方给出的文档共同参考，我这里重点是写出我自己在编译过程中遇到的具体问题，因为官方文档并不能够面面俱到。并且，这更多是出于我的“本地完备”的技术原则，这只是个占位符名称，因为目前我还没有想到（或学到、找到）一个词汇能够描述这个概念：<strong>即保证个人能够在彻底脱离国际互联网之后还能够以一定的资源开展一定形式的工作</strong>，这不是说我敌视互联网，而是为了应对最极端的情况，是类似于个人化的“防核地堡”的概念。</p><h3 id="什么是编译"><a href="#什么是编译" class="headerlink" title="什么是编译"></a><p align="left">什么是编译</p></h3><p>我觉得有必要以通俗的语言简单重复一下这个概念。<strong>编译实际上可以理解为一种计算机语言之间的“翻译”过程</strong>，即将程序开发者（人）书写的源代码“翻译”——源代码通常是以人可以识别的“高级语言”书写的（如C++、Java等等），翻译成由计算机（机器）才能识别的汇编语言或二进制机器语言等“低级语言”。并且最终由计算机输出生成在某个平台环境下运行的可执行程序，也就是我们平常看到的程序本身，相对于把译文打印装订成书。这个过程就叫编译。</p><p>（事实一再证明，很多基本问题从来不受重视，从来没有哪个老师真正能够告诉我（或试图告诉我）三极管、互联网、宪法以及文学艺术对个人和人类社会到底有什么意义，因为考试永远不会考你自己的理解，他们要的只是工具和程序）</p><h3 id="为什么选择4-3-4（CTM）"><a href="#为什么选择4-3-4（CTM）" class="headerlink" title="为什么选择4.3.4（CTM）"></a><p align="left">为什么选择4.3.4（CTM）</p></h3><p>回到正题，首先说一下为什么选择4.3.4的端。不仅是因为之前已经实现过3.3.5的搭建，更多的是出于游戏性的考虑。熟悉这个游戏的人都知道，CTM版本实际上对这个游戏系统做出了相当大的改动，这在曾经是有争议的（即使是放在今天来说可能也如此）。不过，对于私人搭建的服务端来说，CTM版本的改动无疑是再适合不过的——它将WOW的单机玩法提升到了前所未有的水平，无论是难度曲线还是改版后艾泽拉斯的地图任务的故事情节，要比老版本出色太多了。<strong>单从这一点来讲，我个人就对CTM版本有着非常高的评价</strong>。况且这个版本还新加入了大量优秀动听的音乐，并重新设计了艾泽拉斯的美景，所以说只作为单机游戏看待的话，CTM无疑比之前的老版本更好玩，也更具收藏价值。</p><p>接下来说一下4.3.4端普遍存在的问题。美中不足的事总是有的，因为现在CTM的端大多基于TrinityCore衍生而来，并非是Trinity官方的项目，故这方面的工作仍然不够充分。上面提到的CTM版本设计精良的任务需要复杂的脚本代码机制来实现，比起老版本简单枯燥的任务来说是好玩了不少，但也导致其修复难度较大。种种原因导致现在市面上的4.3.4版本的服务端源代码普遍没有3.3.5那么完善，这点也是不得不接受的事实。不过从这次我亲自测试的结果来看，即使有着很多bug问题，对于单机模式的游戏性来说，我仍更倾向于选择4.3.4版本。</p><h3 id="客户端准备"><a href="#客户端准备" class="headerlink" title="客户端准备"></a><p align="left">客户端准备</p></h3><p>在编译工作开始之前，我建议先下载好这个服务端对应的4.3.4-15595的客户端文件，即通过下面的工具：<br>通过运行wowregeneration下载客户端Data文件：<a href="https://github.com/The-Cataclysm-Preservation-Project/wowregeneration" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/wowregeneration</a><br>通过运行ClientDownloader下载客户端其他文件（如wow.exe等）：<a href="https://github.com/The-Cataclysm-Preservation-Project/ClientDownloader" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/ClientDownloader</a><br>这里不用clone代码，直接Download ZIP，解压后就可以运行下载器。全部下完后，将Data文件夹和其他文件放在一个目录下，拼合成完整客户端。这里的完整的4.3.4-15595客户端总大小约15.6GB。</p><p>以及TDB_full_434数据库信息文件（.sql文件）：<a href="https://github.com/The-Cataclysm-Preservation-Project/TrinityCore/releases/download/TDB434.22011/TDB_full_434.22011_2022_01_09.7z" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/TrinityCore/releases/download/TDB434.22011/TDB_full_434.22011_2022_01_09.7z</a></p><p>本次测试不使用远程服务器，即在本地（127.0.0.1）进行测试。</p><p>好了，编译工作现在开始。</p><h2 id="1-Windows上的环境配置"><a href="#1-Windows上的环境配置" class="headerlink" title="1. Windows上的环境配置"></a><p align="left">1. Windows上的环境配置</p></h2><p>对于Windows系统，为了进行编译，我们需要以下工具和环境：</p><blockquote><p>Git-2.23<br>gitExtensions-3.4.3.9999<br>cmake 3.22.1 （版本≥ 3.18.4）<br>boost 1.73.0（版本≥ 1.73.0）<br>Win64OpenSSL 1.1.1o<br>mysql community 8.0.29 (版本≥ mysql5)<br>Navicat8 或 Navicat premium<br>当然还必须要有Visual Studio，这里选择Visual Studio Community 2019，在配置时勾选上C++开发模块即可（此模块需要数个G的空间）。</p></blockquote><p>简单说一下每个东西的用途：</p><blockquote><p>git和gitExtension用来拉取GitHub项目端的源代码到本地，这里我们用clone的方式；<br>cmake用来把源代码编译成提供给Visual Studio的工程文件；<br>Visual Studio就是所谓的“宇宙第一IDE”，集成了各种开发工具和环境。这里我们主要用它来生成构建。<br>boost是为C++标准库提供扩展的扩展库；<br>OpenSSL是一个加密工具，通过SSL协议实现传输的加密对接；<br>mysql提供服务器系统；Navicat则提供数据库的图形化管理功能。</p></blockquote><p>安装每个工具的过程详见：<a href="https://www.trinitycore.info/en/install/requirements/windows" target="_blank" rel="noopener">https://www.trinitycore.info/en/install/requirements/windows</a></p><p>别的基本都没什么变数，这里主要说一下MySQL 8.0的安装。这里选择mysql community 8.0.29，安装包下载地址为：<a href="https://dev.mysql.com/downloads/windows/installer/8.0.html" target="_blank" rel="noopener">https://dev.mysql.com/downloads/windows/installer/8.0.html</a> ，选择432mb大小的那个msi进行下载。安装时首先选择Custom模式，因为若不选择Custom，MySQL是默认安装到C盘的，只有选Custom才能在之后的选项中改变安装路径，产品（product）中只需要选择安装MySQL Server 8.0.24-x64即可，别的是关于数据库的开发组件，不选。然后建议点击Advanced Options，自定义一个安装目录。将Install Directory（主程序目录）和Data Directory（数据库目录）定位到不同的两个文件夹里。如果之前装过MySQL的话可能会有个叹号提示，无视即可。这里我直接使用网络上找到教程的图片：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/1.png" title="a"><p>然后是填入默认数据库端口。端口一般默认是3306就行，直接next。但我因为之前还装过一个老版本的MySQL为3.3.5的端提供服务（同时还集成了V079冒险岛的数据库），我就改了一个3307，最后在服务端的配置文件（.conf）中将所有数据库的端口都改成3307即可。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/2.png" title="b"><p>最后是输入默认数据库名、数据库密码，这里建议都填root。若自定义的话这两个一定不能忘，否则会很麻烦。MySQL的服务名是无所谓的，建议就默认的MySQL80。</p><p>所以说，一个设备上安装两个MySQL版本是可行的，我这里就成功安装了两个版本的MySQL，算上冒险岛的话，已经在一台设备上集成了三个服务端。不过不推荐这样的做法，因为这样没法同时运行，两个MySQL的服务窗口和进程都是冲突的。若想运行旧版本的MySQL，则需在任务管理器&gt;服务中手动停止相关的进程（一般是mysqld），并停用相关的服务（MySQL80）。以后会想办法把旧的数据库都集成到MySQL8中。</p><p>MySQL安装完成后，建议直接用Navicat尝试连接localhost_3306的数据库，能连进去就说明数据库服务在正常运行。</p><h2 id="2-拉取源代码"><a href="#2-拉取源代码" class="headerlink" title="2. 拉取源代码"></a><p align="left">2. 拉取源代码</p></h2><p>用Git Extensions从<a href="https://github.com/The-Cataclysm-Preservation-Project/TrinityCore" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/TrinityCore</a> 拉取源代码。安装Git Extensions后，右键菜单栏会多出一些栏目，我这里在C盘新建一个TRINITY 4.3.4的文件夹，在其中右键选择GitExt Clone…，可将源代码克隆到本地：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/3.png" title="c"><p>分支（Branch）选择需要注意，这里的branch建议选HEAD或master，因为只有4.3.4相关的内容。我这里对源代码克隆经常显示失败，通常错误是没有Github端的响应，可能是因为我的全局魔法不够厉害导致的，不过多试几次后还是成功了。</p><h2 id="3-CMake生成C-方案和工程"><a href="#3-CMake生成C-方案和工程" class="headerlink" title="3. CMake生成C++方案和工程"></a><p align="left">3. CMake生成C++方案和工程</p></h2><p>先简单说一下这个CMake是干什么的，它可以从源代码生成不同平台或不同编译器需要的makefile（优化的编译方案）以及构建的工程文件。首先我们先建立一个名为Build的文件夹，如C:\Build。然后打开CMake工具（cmake-gui.exe），指定Browse Source（源码路径）和Browse Build（Build的路径，即这里的C:\Build）。然后点左下的Configure配置目标的工程平台，这里当然就选择Visual Studio 2019。下面两个不填，最后点击finish：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/4.png" title="d"><p>finish后，将会生成一些配置的缓存。首先检查Configuring是否成功完毕，即下方的框中是否存在Could not Found…之类的错误（如Could not Found OpenSSL、Could not Found MySQL等），如果有这类错误，说明对应的环境没有配置好，或是OpenSSL没有配置环境变量；如果黑字全部显示Found…，一般就能够成功Configuring done。在上方的红色区域，我们需要重点检查的是Tools选项是否被打勾，这个关系到是否编译出工具文件，这里必须打勾。确认Configuring和Tools都无误后，再点击一遍Configure，确认所有的目标（所有红色会消失），然后点击Generate生成构建方案：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/5.png" title="e"><h2 id="4-编译源代码"><a href="#4-编译源代码" class="headerlink" title="4. 编译源代码"></a><p align="left">4. 编译源代码</p></h2><p>Generate完成后，会有一个Open Project的按钮，点击即可从VS2019打开这个项目。也可以从C:/Trinity/Build/TrinityCore.sln的.sln文件利用VS打开这个项目（可能需要等待一小会让代码加载完毕）。从顶部的【生成】&gt;【配置管理器】中，将“活动解决方案配置”由默认的Debug模式改为RelwithDebinfo，这是一种介于Debug（调试模式）和Release（发布模式）之间的模式。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/6.png" title="f"><p>最后，我们在右边的 “解决方案资源管理器” 中右键ALL_BUILD（一定要点在All_build上），点击“清理”。清理完成后，再次右键，点击“生成”。这是最终的编译步骤，可能需要一小段时间（依机器配置不同），这一步我大概消耗了十几二十分钟。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/7.png" title="g"><p>编译完成后，先检查一下VS中输出的编译结果，即形如<code>Build: 22 succeeded, 0 failed, 0 up-to-date, 1 skipped</code>的最后一行，这里的数字不是定死的，我们只要确定没有failed的项目就行了。这样就可以在C:\build\bin\RelWithDebInfo中看到生成的文件。</p><p>检查一下生成的文件，这里面.pdb文件是编译时生成的数据库文件，可以不用管。我们首先将编译出的工具移动到一个独立的位置。并保存好。这里的工具有两种，第一个是connection_patcher.exe，用来patch客户端程序；第二种则是地图数据提取工具，即mapextractor.exe、mmaps_generator.exe、vmap4assembler.exe、vmap4extractor.exe四个.exe。</p><p>虽然编译已经完成，但编译结果不要删掉了，先留着，后面可能有用。</p><h2 id="5-拼合完整的服务端文件"><a href="#5-拼合完整的服务端文件" class="headerlink" title="5. 拼合完整的服务端文件"></a><p align="left">5. 拼合完整的服务端文件</p></h2><p>接下来的任务就是要用这里剩下的文件拼凑出一个完整的服务端。关于Trinity服务端的文件结构，之前在《<a href="https://caelica.github.io/2021/12/16/TrinityCore%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"><font color="blue">TrinityCore服务端的初步认识</font></a>》进行过描述。首先将这里的两个配置文件（worldserver.conf.dist、authserver.conf.dist / bnetserver.conf.dist或形如此类的文件）删去后缀.dist，使其变成worldserver.conf和authserver.conf / bnetserver.conf。然后将worldserver.exe、authserver/bnetserver.exe以及两个配置文件worldserver.conf、authserver/bnetserver.conf四个文件都移动到一个独立文件夹内，这个文件夹将成为服务端文件夹，文件夹名不能含汉字或特殊字符。authserver.conf和bnetserver.conf实际上作用相同，是一个东西，只是看这个源码版本里叫什么罢了。</p><p>然后，在这里复制放入三个.dll文件，这些dll文件通过OpenSSL控制服务端和数据库的对接，它们是：libmysql.dll、libeay32.dll、ssleay32.dll。这三个.dll都可以从环境程序中手动复制提取：</p><p>libmysql.dll位于MySQL主程序的lib目录下，如C:\Program Files\MySQL\MySQL Server 5.x\lib，复制其放入服务端文件夹；</p><p>libeay32.dll和ssleay32.dll位于OpenSSL主程序根目录中，如C:\OpenSSL-Win64\或C:\OpenSSL-Win32\（取决于你安装的是32位还是64位）；这里要说的是，新版本的32位OpenSSL中这两个.dll已经被改名为libssl-1_1.dll和libcrypto-1_1.dll；在64位新版本OpenSSL中叫libssl-1_1-x64.dll、libcrypto-1_1-x64.dll。如我们之前安装的是64位的OpenSSL，这里就复制libssl-1_1-x64.dll和libcrypto-1_1-x64.dll到服务端文件夹中即可。</p><h3 id="提取地图资源文件"><a href="#提取地图资源文件" class="headerlink" title="提取地图资源文件"></a><p align="left">提取地图资源文件</p></h3><p><strong>注意！这一步相当耗时，可能需要数个小时（依机器配置不同），建议留有充足的时间。</strong></p><p>我们先编写一个简单的.bat，将其命名为【提取Vmaps文件.bat】：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>                    Welcome to the vmaps extractor and assembler</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> 解压时您的磁盘剩余空必须要大于<span class="number">2</span>GB, 按CTRL+C 退出</span><br><span class="line"><span class="built_in">echo</span> 按回车键开始解压 . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">EXIST</span> buildings\<span class="built_in">dir</span> (<span class="built_in">ECHO</span> The buildings folder already <span class="keyword">exist</span> <span class="keyword">do</span> you want to delete it?</span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">If</span> YES hit Enter to continue <span class="keyword">if</span> no CLOSE the program now! . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="built_in">DEL</span> /S /Q buildings)</span><br><span class="line">vmap4extractor.exe</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="variable">%ERRORLEVEL%</span> <span class="keyword">LEQ</span> <span class="number">1</span> (<span class="built_in">echo</span> The vmap extract tool finalized with errors.</span><br><span class="line"><span class="built_in">echo</span> 按回车键继续 . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span>)</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> Vmaps extracted check log.txt <span class="keyword">for</span> errors, now it's <span class="built_in">time</span> to assemble the vmaps press any key to continue . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br><span class="line"><span class="built_in">md</span> vmaps</span><br><span class="line">vmap4assembler.exe buildings vmaps</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="variable">%ERRORLEVEL%</span> <span class="keyword">LEQ</span> <span class="number">1</span> (<span class="built_in">echo</span> The vmap assembler tool finalized with errors.</span><br><span class="line"><span class="built_in">echo</span> 按回车键继续. . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span>)</span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span>.</span><br><span class="line"><span class="built_in">echo</span> Process done! <span class="built_in">copy</span> vmaps folder to the MaNGOS main directory</span><br><span class="line"><span class="built_in">echo</span> 按任意按钮退出 . . .</span><br><span class="line"><span class="built_in">pause</span>&gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure><p>然后准备提取地图资源：</p><blockquote><ol><li>将【4. 编译源代码】中获取的工具文件即mapextractor.exe、vmap4assembler.exe、vmap4extractor.exe、mmaps_generator.exe四个.exe文件，以及【提取Vmaps文件.bat】，全部复制到下载好的纯净版wow客户端根目录下，必须全部复制，缺一不可。</li><li>执行【mapextractor.exe】，解出maps、dbc、Cameras文件夹，解包完毕后退出；</li><li>上一步运行完毕后，执行【提取Vmaps文件.bat】。等待运行完毕，这一步约需要30-60分钟。跑完后解出vmaps文件夹；</li><li>上一步运行完毕后，执行【mmaps_generator.exe】。如果是带扩展包的wow版本，这一步将会非常非常慢，需要约一个多小时时间。最终解出mmaps文件夹；</li><li>全部执行完毕后，将maps、dbc、Cameras、vmaps、mmaps文件夹全部放到我们的服务端文件夹内。在客户端通常还会生成一个叫building的文件夹，是没有用的，可以删掉。</li></ol></blockquote><img src="/2022/05/24/Windows环境下编译TrinityCore/8.png" title="h"><p>至此，我们已经拥有了所有服务端的文件，即在服务端文件夹下应包含：</p><blockquote><p>Cameras<br>dbc<br>maps<br>mmaps<br>vmaps<br>bnetserver.conf（或称作authserver）<br>bnetserver.exe（或称作authserver）<br>worldserver.conf<br>worldserver.exe<br>libmysql.dll<br>libeay32.dll（或不同的名称）<br>ssleay32.dll（或不同的名称）</p></blockquote><p>至少的12个项目。如图：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/9.png" title="i"><p>关于服务端最后我们需要配置的是：两个配置文件中所有需要填入数据库名、数据库端口和数据库密码的位置，否则服务端找不到MySQL数据库。如图（图中只是一部分，端口这里设为3306）：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/10.png" title="j"><p>服务端到此配置完毕。</p><h2 id="6-填充TrinityCore的数据库"><a href="#6-填充TrinityCore的数据库" class="headerlink" title="6. 填充TrinityCore的数据库"></a><p align="left">6. 填充TrinityCore的数据库</p></h2><p>服务端已经配置好了，但我们现在打开Navicat连接数据库可以发现，localhost_3306下是没有什么东西的（顶多只有几个默认的数据库如information_schema等）。我们需要导入TrinityCore的数据库。TrinityCore的数据库由以下几个数据库构成：</p><blockquote><p>auth - 帐户数据 - 用户名、密码、GM权限、服务器域等的信息；<br>characters - 角色数据 - 创建的角色及其公会、银行、背包、任务状态等信息；<br>world - 游戏内容 - 如NPC，任务，物品等；<br>hotfixes（仅master版本使用） - 保留尚未添加到核心或其他官方数据库的修补程序。</p></blockquote><p>如果是3.3.5a的Trinity，是没有hotfixes数据库的。我们这里是4.3.4版本，则需要这个数据库。</p><p>我们解压之前下载好的TDB_full_434数据库文件（.sql），这里是两个.sql文件：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">TDB_full_world_434</span><span class="selector-class">.22011_2022_01_09</span><span class="selector-class">.sql</span></span><br><span class="line"><span class="selector-tag">TDB_full_hotfixes_434</span><span class="selector-class">.22011_2022_01_09</span><span class="selector-class">.sql</span></span><br></pre></td></tr></table></figure><p>分别对应world数据库和hotfixes数据库。这里我们不要从Navicat手动导入这个.sql（会慢到你怀疑人生）。先在<a href="https://github.com/TrinityCore/TrinityCore/blob/master/sql/create/create_mysql.sql" target="_blank" rel="noopener">https://github.com/TrinityCore/TrinityCore/blob/master/sql/create/create_mysql.sql</a> 上下载sql，在localhost中运行它，即可创建这几个空的数据库。实际上，我认为在Navicat中手动建立这四个数据库也是可以的，即使其包含有auth、characters、world、hotfixes这四个空的数据库就可以了。然后我们将TDB_full_434中解压出的两个.sql文件复制进服务端文件夹内，然后启动一次worldserver.exe，worldserver会自动发现没有内容的数据库，并填入对应的数据。不需要多长时间就可以完成。</p><p>数据库中环节的最后一步，我们必须进入数据库auth下realmlist表中，将两个ip地址（address和localaddress）改为本地的127.0.0.1（如果是远程服务器的话就是服务器的公网IP地址），并确认世界服务器端口（这里通常是8085）、gamebuild（必须是15595）。有兴趣的话也可以将服务器名改为你喜欢的名字，这样在游戏中就会显示出这个自定义的服务器域（realm）名。</p><h2 id="7-Patch客户端程序"><a href="#7-Patch客户端程序" class="headerlink" title="7. Patch客户端程序"></a><p align="left">7. Patch客户端程序</p></h2><p>新版本的wow由于对接了战网（Battle.net），Patch起来较为复杂。首先我们配置auth。需要获取AuthModules，即两个.auth文件：<a href="https://github.com/The-Cataclysm-Preservation-Project/AuthModules" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/AuthModules</a> ，下载这里Windows下的x64和x86的两个.auth，然后将x64和x86两个文件分别放入C:\ProgramData\Blizzard Entertainment\Battle.net\Cache下的文件夹内，路径规则为：<strong>以.auth文件的前4个字符为参考，放入对应的路径。</strong></p><blockquote><p>如x64.auth文件的前4个字符为0a3a，则放入C:\ProgramData\Blizzard Entertainment\Battle.net\Cache\0a\3a 之下；<br>x86的前4个为8f52，则放入C:\ProgramData\Blizzard Entertainment\Battle.net\Cache\8f\52 之下。</p></blockquote><p>然后将【4. 编译源代码】中获得的connection_patcher.exe放入wow客户端根目录下。首先将wow.exe拖到connection_patcher.exe上，对它进行patch：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/11.png" title="k"><p>这里一定要注意这个黑框是否输出successully的结果，如果命令框在某一步直接闪退，则patch失败，需要重新patch。之前的auth模块如果没有配置正确的话，很可能在Patching module这一步闪退，并在客户端目录生成一个Crash文件夹。这一步我失败了很多次，后来在Discord上询问了服务端开发者本人后，发现先配置好auth后再进行patch就成功了。但他们有人表示，auth模块可以在patch过程中自行生成，但在我这里就不成功（还有另一个人也不成功）。故如果遇到类似的问题的话，首先配置好auth再进行patch，则可解决。</p><p>wow.exe的patch完成后，我们再对wow-64.exe进行patch，这样一共会生成出Wow_patched.exe、Battle.net_patched.dll以及Wow-64_patched.exe、Battle-64.net_patched.dll共四个文件（两个exe、两个dll）。接下来，将原始的wow.exe、wow-64.exe、Battle.net.dll、Battle-64.net.dll四个文件以及launcher.exe都移走到其他独立目录中（或直接删除，只要你有备份的话）。移走它们后，将剩下的带_patched的四个文件改名回原来的样子（即删掉名称中的_patched，如将Battle.net_patched.dll改为Battle.net.dll），完成“狸猫换太子”的步骤。</p><p>这一步仍有问题的可参考项目端给出的troubleshooting：<a href="https://github.com/The-Cataclysm-Preservation-Project/TrinityCore/wiki/Setup-and-troubleshooting-for-connecting" target="_blank" rel="noopener">https://github.com/The-Cataclysm-Preservation-Project/TrinityCore/wiki/Setup-and-troubleshooting-for-connecting</a></p><p>其他启动客户端时的奇怪问题（如“无法传输所需的压缩数据”等）可能与WoW.mfil文件有关，这点可参考之前的文章。</p><h2 id="8-启动"><a href="#8-启动" class="headerlink" title="8. 启动"></a><p align="left">8. 启动</p></h2><p>这样，一切都配置完成了。我们先运行bnetserver.exe和worldserver.exe，正常运行后，启动客户端的wow.exe或wow-64.exe，看看是否能正常进入登陆页面。万事俱备只欠东风，我们似乎还没有注册账号。我们自己编译的服务端由于没有单独制作注册页面，需要手动从worldserver控制台中用服务端命令注册账号，也就是我们打开的worldserver.exe的框。这里简述一下worldserver中与创建账号相关的基础命令：</p><blockquote><p><strong>Trinitycore worldserver控制台基础命令（账户相关）:</strong><br>创建普通账号：account create <user> <password><br>例如：account create admin admin。这样就创建了一个用户名为admin，密码为admin的普通账号<br>注意：普通账号只适用于Trinity 3.3.5（WLK）及其之前版本的Trinitycore中，之后的版本（即master，如4.3.4）必须使用<strong>战网邮箱账号</strong>登录，普通账号几乎已经不起作用。<br>创建战网邮箱账号： bnet create &lt;user@xxxx&gt; <password><br>例如：bnet create admin<span></span>@qq.com admin。这样就创建了一个用户名为admin<span></span>@qq.com，密码为admin的战网邮箱账号。<br>该账号适用于需要战网邮箱账号登录的Trinitycore版本。在创建成功后，数据库auth下的account中将会生成该账号的username，通常形如2#1、3#1。<br>给予账号GM权限：从数据库查看账号的username（形如2#1、3#1的）。如这里要将ID为3#1的账号调整为GM最高权限：<br>account set gmlevel 3#1 3 -1<br>这里的3是指GM的权限等级，3是最高权限，拥有删除普通账号、以及关闭服务器的权力。-1则是指将该账号下的全部服务器都给予该权限。</password></password></user></p></blockquote><p>我们这里<strong>只需要注册战网邮箱账号</strong>。注册好后，输入邮箱和密码即可连接了。若显示“无法连接至服务器”大概率是由于patch失败导致的。然后要想玩的顺利的话，强烈建议认真阅读一下worldserver.conf中的每条内容，尝试理解它们是在控制哪些因素。比如很多人都遇到的一个问题，即GM命令中的.kill不起作用，且.die命令无法拾取战利品，怎么办？这是因为TrinityCore和Mangos不同，需要在worldserver.conf中搜索条目.die，找到<code>Die.Command.Mode = 1</code>，将其值改成0，即可在.die命令时获取战利品。另外如果发现vmaps不生效，通常也是由于worldserver.conf中没有启用vmaps、mmaps（其值为0），将其启用即可。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/12.png" title="l"><img src="/2022/05/24/Windows环境下编译TrinityCore/13.png" title="m"><p><strong><center>“我重回战场！”</center></strong></p><hr><h2 id="有趣的故事"><a href="#有趣的故事" class="headerlink" title="有趣的故事"></a><p align="left">有趣的故事</p></h2><p>还得感谢这位叫funjoker的服务端开发者耐心地为我和另一个法国老哥（遇到了同样的问题）解决有关客户端patch的问题，最后，我们都成功解决了，给那个法国哥们开心的说了一大串法语（真地看不懂），funjoker和另一个开发者还打趣地说guess why i am bald，xDDD</p><img src="/2022/05/24/Windows环境下编译TrinityCore/14.png" title="n"><p>最后的最后是一个有意思的东西，因为在之前的《魔兽世界日记》中了解到了“程序员岛（ProgrammerIsle）”的存在，我尝试传送“程序员岛”，这个GM命令是<code>.go xyz 16304 16318 69 451</code>，即约翰·斯塔茨在书中所说的坐标16000,16000（之后我也许会单独开一个文章讲Trinity端的GM命令）。结果…账号直接崩溃了，因为服务端无法加载“程序员岛”对应的地图资源：</p><img src="/2022/05/24/Windows环境下编译TrinityCore/15.png" title="o"><p>这导致这个角色再也无法正常登录，因为角色已经传送，一登陆就要立即加载“程序员岛”，则又会导致崩溃，进入死循环。所以不得不从Navicat中修改了角色的坐标位置到正常地带，这才将角色救回来…</p><p>451这个地图（即Development Land，台版似乎译为“開發之地”），应该是早已不存在于现有的服务端了，故无法加载。所以这次我也更深入地了解了一下wow的地图结构，每个编号都是一个空间，可以理解为一个位面下。0是东部王国，1是卡利姆多，故有大量的地图带有0和1。而外域的位面号为530，任何TBC版本的地图都位于这个位面下。通过GM的飞行权限以及一些其他手段，我们可以实现从外域直接“飞到”奎尔丹纳斯岛或者秘蓝岛，而不经过黑暗之门，这是因为它们都处在同一位面下。奎岛究竟在外域的哪个方向呢？答案是大约在东北方向，远在地图UI界面的可视范围之外（约6000个坐标单位）；而秘蓝岛则在更加遥远的东方，大概在外域地狱火半岛的10000个坐标单位之外。</p><img src="/2022/05/24/Windows环境下编译TrinityCore/16.jpg" title="p"><img src="/2022/05/24/Windows环境下编译TrinityCore/17.jpg" title="q"><center>GM岛的真正位置，其位于卡利姆多（即位面1）的最西北角</center>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Windows环境下通过基于TrinityCore的项目源码编译4.3.4-15595版本的服务端，以及服务端、客户端的配置工作，服务端的启动等及过程中的解释说明等。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="软件" scheme="https://caelica.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="服务器" scheme="https://caelica.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>hexo中插入本地pdf文档</title>
    <link href="https://caelica.github.io/2022/05/17/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0pdf%E6%96%87%E6%A1%A3/"/>
    <id>https://caelica.github.io/2022/05/17/hexo%E4%B8%AD%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0pdf%E6%96%87%E6%A1%A3/</id>
    <published>2022-05-17T08:55:26.000Z</published>
    <updated>2022-06-09T09:13:19.998Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>在hexo页面中实现浏览pdf文档的功能，以及过程中一些问题的解释<a id="more"></a></p></blockquote><p>在之前的文章：<a href="https://caelica.github.io/2022/05/16/%E3%80%8A%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%97%A5%E8%AE%B0%E3%80%8B%E8%AF%91%E6%96%87%E4%B8%8E%E8%AF%91%E5%90%8E%E6%84%9F%E6%83%B3/"><font color="blue">《魔兽世界日记》译文与译后感想</font></a>中，实现了hexo页面插入pdf文档页面的功能。因为网上关于这里的内容写的不够细致，官方文档也写的不太行，种种原因导致我卡了一会坑。所以这次单独说一下这个功能。</p><p>本功能是依靠一个叫hexo-pdf的插件实现的。这个插件的github项目地址为：<a href="https://github.com/superalsrk/hexo-pdf" target="_blank" rel="noopener">https://github.com/superalsrk/hexo-pdf</a></p><p>首先我们需要安装这个插件。先从Git-Bash cd到hexo文件夹所在的目录（即_config.yml、source等文件所在的目录），然后执行npm安装命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> <span class="comment">--save hexo-pdf</span></span><br></pre></td></tr></table></figure><p>回车后是这个样子：</p><img src="/2022/05/17/hexo中插入本地pdf文档/1.png" title="a"><p>可以看到，npm install首先报出了很多WARN，其实，<strong>这些WARN大多数都是版本问题，我认为都可以不管。</strong>这里简单说一下这些WARN都是什么意思：</p><p>第一条是指1.0.0版本的ejs太过老旧，建议升级到2.5.5。ejs是Node.js的模板引擎，在我们搭建hexo博客的时候默认就安装好了，一般都是是1.0版本的，这个是完全不影响的；</p><p>第二条是说的是没有装版本号大于等于4.12.1的eslint。eslint是一个代码语法的检测工具，用来规范代码。这个也没啥用，可以忽略。修复的话也可以，输入<code>npm install --save-dev &quot;eslint@&gt;=4.12.1&quot;</code>即可安装一个版本号大于等于4.12.1的eslint；</p><p>后面几条都是关于fsevents的，这个是因为我们使用了win/linux系统。因为fsevents是依赖mac操作系统的，也就是说别人在mac上做的东西放到win系统上就会报这个问题。所以也不管；</p><p>我们只需要看到<code>+ hexo-pdf@1.1.1</code>以及下面的<code>updated X packages and audited...</code>就行了。</p><p>最后是发现了多少个漏洞（vulnerabilities），统统不管。</p><p>hexo-pdf插件装好后，就可以在.md文本中引入.pdf文件。和插入图片有些类似，首先我们得把_config.yml中的<code>post_asset_folder</code>的值改为true，这样就会在新建文章即hexo new的时候在source目录下生成一个与.md文本同名的空文件夹，也就是这个文章的资源存放文件夹。如果之前插入过图片的话应该本来就是true。然后我们把需要展示的.pdf文档放入这个文件夹中。</p><img src="/2022/05/17/hexo中插入本地pdf文档/2.png" title="b"><p>接下来在.md文章中引入这个pdf，最基本的句法为：（如这里的pdf文件名为mydoc.pdf）</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">pdf</span> ./mydoc.pdf %&#125;</span></span><br></pre></td></tr></table></figure><p>这样写的话是使用相对路径，其实pdf文档放在source文件夹下的任何目录都是能用的，因为我的pdf不多，我习惯把pdf和图片都放在post_asset_folder生成的文件夹里。如果需要涉及到的pdf非常多的话，建议可以在source文件夹下开一个单独的文件夹存放pdf文档（可命名为files或pdf等），然后通过<code>hexo new page</code>新建一个栏目页面，这样可以从主页方便进入这个地方。</p><p><strong>重点要说一下，这里就算引入成功了，也是不支持本地预览的！</strong>..通过<code>hexo s</code>或<code>hexo s -p XXXX</code>进行本地预览的话，会直接弹出下载这个pdf的下载框，并且看不到任何插件效果！<strong>如果你本地预览时弹出了下载pdf的框，而不是一行Cannot…就说明已经引入成功了！</strong>我之前就是因为看不到效果，以为是插件npm install报错的问题，实际上一点关系都没有，这个东西就是不支持本地预览，因为我们现在引入的pdf文档是在本地的，不是外部资源链接。</p><p>后面发现这个句法不够灵活，使用下面的embed src句法能够通过调整width和height改变pdf文档框的大小，要更好一点，我这里就使用的是这个句法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed <span class="attribute">src</span>=<span class="string">"./mydoc.pdf"</span> <span class="attribute">width</span>=<span class="string">"100%"</span> <span class="attribute">height</span>=<span class="string">"700"</span> <span class="attribute">type</span>=<span class="string">"application/pdf"</span>&gt;</span><br></pre></td></tr></table></figure><p>也可以使用外部资源链接，如官方教程中的（仅参考其格式即可），使用外部链接的话应该是可以进行本地预览的，不过我没试过：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;% pdf <span class="symbol">http:</span>/<span class="regexp">/7xov2f.com1.z0.glb.clouddn.com/bash</span>_freshman.pdf %&#125;</span></span><br></pre></td></tr></table></figure><p>最后就是hexo c、hexo g、hexo d提交部署，等一会后，就能在真实页面中看到实现后的效果：</p><img src="/2022/05/17/hexo中插入本地pdf文档/3.png" title="c">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在hexo页面中实现浏览pdf文档的功能，以及过程中一些问题的解释&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="网页" scheme="https://caelica.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
      <category term="hexo" scheme="https://caelica.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>《魔兽世界日记》译文与译后感想</title>
    <link href="https://caelica.github.io/2022/05/16/%E3%80%8A%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%97%A5%E8%AE%B0%E3%80%8B%E8%AF%91%E6%96%87%E4%B8%8E%E8%AF%91%E5%90%8E%E6%84%9F%E6%83%B3/"/>
    <id>https://caelica.github.io/2022/05/16/%E3%80%8A%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%97%A5%E8%AE%B0%E3%80%8B%E8%AF%91%E6%96%87%E4%B8%8E%E8%AF%91%E5%90%8E%E6%84%9F%E6%83%B3/</id>
    <published>2022-05-16T13:23:49.000Z</published>
    <updated>2022-10-02T11:07:52.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>由约翰·斯塔茨所著的《魔兽世界日记》我已经翻译完毕了，本文是翻译过程的总结与感想，对MMO游戏的想法与未来展望，以及翻译过程中的一些注释等。 <a id="more"></a></p></blockquote><embed src="./魔兽世界日记：一部电脑游戏开发志 汉化v1.1.pdf" width="100%" height="700" type="application/pdf"><p><strong>如果上面那个玩意失效了也可以点击下面这个MEGA盘链接来获取pdf文件（内附原文）：</strong><br><strong><a href="https://mega.nz/file/MpsCGDBa#-nWVzvnUREbArpYIcv2T1OQE8FFK6IBDrFfdUm_h9QY" target="_blank" rel="noopener"><font color="blue">→点这里获取MEGA盘下载链接←</font></a></strong></p><hr><p>&emsp;&emsp;经过一个多月断断续续的进展，这部《魔兽世界日记》终于被我翻译完毕了，没想到10万字英文字符居然翻译成汉语有250页之多！我本以为这会像之前那个《1994年暗黑1开发文档》一样会是个小册子之类的玩意，结果整出来一本书…可以说我还从来没翻译过这么多的文本量。就像这部书中说的，作者“再也不想参与开发另一个MMO了”，而我也“再也不想翻译另一个10万字了”。</p><p>&emsp;&emsp;翻译工作实在是挺耗时间精力的，虽然翻译本身肯定是有用的，好的翻译比烂的翻译当然要出色很多，我自己买书的时候都要先挑译者，没人愿意读烂的翻译的。但我总感觉它的“原创性”相对于写文章写代码或者设计制造等等工作来说，又好像没那么强，毕竟到头来还是在“翻译”别人的作品，所以说从原创性带来的动力也似乎没有那么高，这样的过程一天可能要消耗十个小时以上，难免枯燥乏味。好在这回还是我自己选了一个感兴趣的目标在翻译，但想想看，要是职业翻译人员去翻译一本和自己的专业完全不搭界的作品，那这折磨程度起码对我来说是难以想象的…可能甚于搬砖…</p><p>&emsp;&emsp;我不是语言专业人士，翻译的也并不是很好，如果有人对我的翻译有任何不满，我当然也全盘接受。毕竟我已经将这个翻译结果公开，纯属“用爱发电”了。但几年前一个特殊的机会下，我对国内的翻译行业也稍微做过一些了解。起码在英译汉这行，待遇是真的不行，不仅翻译本身是苦力活不说，出版公司坑、骗译者的现象也比比皆是，甚至前段时间还出现过译者去世三年还没拿到翻译费的离谱事件。所以我真心希望以后的智能机器能取代这样的工作，把人解放到更具创造性的岗位上去。</p><p>&emsp;&emsp;好了吐槽到此为止，接下来是正经内容。除了WoW上的工程问题之外，约翰·斯塔茨在本书中给出的最有价值的东西，无疑是他对于游戏市场和游戏开发的个人看法，以及暴雪早期的公司运作理念了。根据约翰·斯塔茨的描述，暴雪在早期的行事理念是“重技术、重实力、轻营销”的，他不止一次提到了暴雪对它当前市场运作模式的蔑视。并回答了为什么暴雪能够脱颖而出——因为它“不走寻常路”。暴雪能够做出成绩，很大一部分归功于暴雪的制作人拥有相当的自由度，他们不太受制于资金与市场的按部就班的规则，从而可以进行自由开发。这样也最大程度上避免了工作室、高管和投资方相互欺骗的恶性情况。</p><p>&emsp;&emsp;而对于游戏开发来说，好玩是胜过一切的，游戏开发看上去很大一部分是工程问题，而核心实则是艺术，有点像是建筑艺术之于盖民房，游戏要能玩是工程问题，但游戏要好玩就是艺术问题了。这涉及到对“范式”的理解和对“创新”的把握，有两类开发者犯了这样的错误：第一种就是按部就班地照搬现成的流行玩法，简单来说就是“谁火抄谁”。诚然，暴雪自己也是“谁火抄谁”，但区别就在于暴雪能够做到“青出于蓝而胜于蓝”，它深刻剖析现有范式中谁好玩、谁不好玩，并从中吸取教训，吸收那些优秀的设计，摒弃那些不好的设计。最终能够在现有的范式的基础之上做出创新，创造出前所未有的玩法。而第二类错误就是“无脑创新”。没有考虑创新的内容是否就好玩，是否就比现成的要高明很多。这样的创新实际上是负作用。事实上我们也可以看到，很多游戏给出的新奇玩法并不有趣，这样的工作只能骗骗不懂游戏的投资商人，而很多工作室靠此为生，也给市场带来了很多良莠不齐的产品。所以说，游戏开发者要做到“兵形象水”，不仅要是严谨高效的工程师，还要是善于变通的艺术家。</p><p>&emsp;&emsp;暴雪成功了，但时过境迁。本书中所提到的那些核心人物，诸如亚伦·亚德汉（Allen Adham）、马克·科恩（Mark Kern）、杰夫·卡普兰（Jeff Kaplan）等都已经先后离职，“魔兽宇宙”的创造者克里斯·梅森（Chris Metzen）也于2016年退休。曾参与《魔兽世界》制作的“二队”的开发人员在如今的暴雪公司已所剩无几了。连作者本人也在“泰坦”项目失败后离职。更不要说暴雪公司前些日子还爆出了对员工进行欺压和性骚扰的事件，这也最终导致了暴雪于2022年1月被微软整个收购。</p><p>&emsp;&emsp;如同在《魔兽》中一句人尽皆知的话一样——“王权没有永恒（No king rules forever）”，那个由约翰·斯塔茨看作是梦想的舞台，而不仅是一份工作的雇主的暴雪，确实已经衰落了。暴雪曾经引以为傲的星际、暗黑、魔兽，随着RTS、Diablo-like和MMORPG辉煌时代的过去也不再闪耀。约翰在书中说过，自己对《魔兽》做出了二十年的寿命估计，今天来看似乎要成为现实。可能数年之后我们就会看到这款游戏步入“生命维持”的状态。最终，《魔兽》，这个曾经的王者，<strong>也会亲身见证那些曾经被它无情击败的前辈与对手们的残酷命运</strong>——那是《无尽的任务》、《卡米洛的黑暗时代》、《网络创世纪》等MMORPG、以及它们背后那些付出了同样汗水的工作室们——并和它们一起被人所遗忘。现在已经几乎没有厂商愿意斥巨资打造一款MMORPG了，如果现有的技术水平不发生革命性的突变，新一代的玩家们几乎很难拥有MMORPG方面的记忆了——这种游戏模式已然进入了休眠状态。</p><p>&emsp;&emsp;但MMORPG真的就行将就木、成为历史了吗？我认为远远不是。因为在“虚拟世界”的概念上，从来都是没有任何游戏能和MMORPG相提并论的。熟悉我的人都知道，我永远无法忘记我第一次接触MMORPG世界时的记忆：我在小学时沉浸在《冒险岛（Maplestory）》的游戏世界中，对于这样一个在2D平面逻辑下运行的空间，我却把那里的一切当作是活生生的世界——我觉得在生命和非生命的概念日趋模糊的现在看来，这并不滑稽。Fairyland——我这样形容我在那里的生活，它是我真正的童话世界，进入了我童年的每一个梦境里。直到现在我还在经常听这个游戏的背景音乐，并不时模仿着它的艺术风格。</p><p>&emsp;&emsp;而魔兽玩家们也有这样的情结，他们在怀念起这款游戏的时候，最常说的话就是——“我们比你们多一个世界”，这和埃里克·道兹（Eric Dodds）所言的“MMOs are everything to everybody”可谓异曲同工。而我认为，《无尽的任务》、《魔兽世界》这类MMO提供的设身处地般的虚拟沉浸感和其他游戏（甚至是同为MMO的游戏）有着本质上的不同：这类MMO游戏并不仅仅是将许多玩家聚在一起，提供一个便于社交的虚拟社区这么简单；也并非仅仅是让玩家当一个“故事阅读者”。它对背景历史故事的不断完善、对世界物理细节的不断加深、其目标显然已经有着“创世”的概念雏形。在人类的文化历史上我们可以看到，创世的概念无论是在哪个宗教或传说中几乎都是神力所为，非人力所能为也。但就如同神话中所描述的，亚当想成为上帝，但最后还是没能当成，结果变成了人类祖先。在中国古代以及其他民族的传说中也有着很多凡人追寻仙道的传说故事。甚至我们可以这么说：<strong>没有一个“亚当”是不想成为上帝、不想和上帝一样拥有无尽的智慧的，</strong>创世（Creation）的伟业也就成为了人类的一个终极目标之一。人类能否创造出只有上帝才能创造的世界呢？对于这样的终极问题，我们无法回答，至少在目前来看这是不可能的。但这不是说就完全否决了人类的创造权力，或许像亚当一样，人类永远无法成为这个世界的上帝——或达到和创世者平起平坐的境界，但人类可能有能力（或有资格）创造出“亚级别”的世界或造物——就像上帝创造亚当那样。</p><p>&emsp;&emsp;近年来的人工智能技术和虚拟现实等等技术，让很多人看到了这种“人类创造亚当”的可能性，我们不知道人类创造人工智能生命或虚拟智能生命后会导致什么样的后果，这最终将人类社会带向何方？是一个真正的乌托邦，抑或是末日的战场？我们都无法预知。而且如果从人类之外的、更一般的角度考虑，这可能还涉及到另一个超验性的终极问题——即人类是否真的有创世的权利？人类主导的创世是否是一种罪（Sin）？自封为上帝的我们会不会最终变成那个古代诺斯替主义（Gnostism）思想中所描述的德穆革（Demiurge）——一个创造出囚禁其他生命的牢笼世界的邪恶神呢？</p><p>&emsp;&emsp;这一连串的问题，我们现在都无法回答。但可以确定的是，这几百年来智能和生命的秘密正在被一步步探明，这样的科技进一步发展下去，按照我们对人性的理解，则大概率可以认为，必定会有人在未来的某一天创造出那种亦幻亦真的虚拟现实世界——一个拥有供给虚拟智能生命活动的真实社区和脑机接口的、梦境般的MMO世界。而21世纪初的这批如今已经略显简陋的MMO游戏鼻祖，将成为这个梦幻旅程中的一个里程碑。这项工作确实伟大，但却又让人隐约感觉到一种不亚于核危机的严肃性，我们只能祈祷未来的人类能够足够明智地对待这一切：普罗米修斯的天火究竟是祝福还是毁灭，一切最终都取决于人类自己。但有一点要明白，这火焰不只是在核反应中才会失控，在我们的精神世界中也是如此。</p><p>&emsp;&emsp;最后，我从这本《魔兽世界日记》中学到的一个很实用的设计技巧（可以用在很多方面），也就是本书中普遍提到的：“占位符（placeholder）”的概念或思想。其实仔细想想我也经常会不自觉地使用这种方法，举例子来说，现在要画一个双持左轮手枪的西部牛仔，但左轮手枪的细节太多了，实在难画，我们不妨让牛仔先拿两把“香蕉”，棍子也行，甚至连手都可以不处理了。这里的香蕉或棍子就是“占位符”，这样就简单多了，我们就可以跳过手枪的难题。这并非是自欺欺人，而是可以让设计者在初期更多地关注对全局的把握，而不是一开始就把大部分精力都投入到一个局部问题上面。</p><p><strong><p align="right">本文写于2022年5月16日</p></strong></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="450" height="86" src="//music.163.com/outchain/player?type=2&id=2060264&auto=0&height=66"></iframe><hr><p>下面是英语学习部分…一些翻译的时候写的译注：</p><p>Vanilla WoW：“香草时代”，通常指的是不含扩展包的、最初发行的《魔兽世界》版本，即通常玩家所说的“60年代”版本，因其游戏内玩家最高等级为60级。</p><p>ownership：这个词通常被翻译为“主人翁精神”，它指的是企业中的个人/团队拥有一定的自主意识和责任感，能够自发地运作或负责的精神。</p><p>musical chairs：指一种抢座位的游戏，参与者在播放音乐的同时绕着一些座位转圈，音乐一停下就抢座位。因参与者比座位要多且一个座位只能坐一人，所以剩下的人就变成输家。</p><p>peanut gallery：本意是指剧院观众席中的最后一排，因最后一排观赏效果非常差，故引申为“无足轻重的看客”。</p><p>slam dunk：原意为灌篮，但引申为“精彩的一手”或“漂亮的成功”。</p><p>smoke and mirrors：字面意思是“烟雾和镜子”，但其实指的是舞台上表演时用于迷惑观众的光影手法，故泛指障眼手段。</p><p>stack the deck：或stack the cards，指的是在牌局中事先对洗好的牌堆（deck）做手脚，引申为一种事先安排好的暗中布局。</p><p>canned：字面意思为装罐，但在影视业指的是“录制好的、制成后的”东西，通常是指预先录制好的音乐或音效等。</p><p>more/most bang for the buck：bang有“猛砸”、“巨响”的意思，buck则是“美元”。故字面意思类似于中文的“把钱撂响”，即指投资者精打细算，将每一分钱都有效利用。</p><p>watching the game, Having a Bud：美国百威（Budweisser）啤酒的一句广告词，Bud指百威啤酒。意为“看比赛，喝百威”。</p><p>down the tubes：指完蛋，彻底失败。</p><p>blunt-instrument：本意指钝器或不好用的设备，引申为故事中情节粗暴的转折。</p><p>deal-breaker：字面意思是“交易破坏者”，但实际上指“无法通融的条件”、“不可调和的事物”，即缺少这些条件会立刻导致合作终止。</p><p>hole-in-the-wall：字面意思是“墙上的洞”，一般指的是街上的小店面或自动提款机等，并引申为“简陋的、不起眼的”。</p><p>have a full plate/plate is full：指日程安排满满的状态。</p><p>mum’s the word：这里mum是悄声说话的拟声词，指的是“保守秘密”。</p><p>cat out of the bag：指秘密被泄露，或秘密被曝光。欧洲古时候一些不诚信的卖猪人把猫充当小猪装在袋子里卖，如果不检查就很难发现。但是如果猫自己从口袋里钻了出来，骗局就暴露了。</p><p>stick out the sore thumb：指引人注目、显得不自然的东西。字面意思是“伸着受伤的拇指”，意思是如果人的指头受伤了，就会把包扎好的手指单独伸在一个安全的地方，当然会引人注意。</p><p>propeller-head：字面意思是“头戴着螺旋桨的人”，但引申为“行为古怪、沉迷钻研技术或知识的人”，</p><p>playing for keeps：指严肃认真地对待某事，动真格的。</p><hr><p>整个活：（觉得我译的不好的就看看这位）</p><img src="/2022/05/16/《魔兽世界日记》译文与译后感想/1.png" title="你们这是自寻死路！"><p><del>（哈哈哈哈哈哈）</del></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由约翰·斯塔茨所著的《魔兽世界日记》我已经翻译完毕了，本文是翻译过程的总结与感想，对MMO游戏的想法与未来展望，以及翻译过程中的一些注释等。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="翻译" scheme="https://caelica.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="随想" scheme="https://caelica.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Y7000P更换散热模组</title>
    <link href="https://caelica.github.io/2022/04/18/Y7000P%E6%9B%B4%E6%8D%A2%E6%95%A3%E7%83%AD%E6%A8%A1%E7%BB%84/"/>
    <id>https://caelica.github.io/2022/04/18/Y7000P%E6%9B%B4%E6%8D%A2%E6%95%A3%E7%83%AD%E6%A8%A1%E7%BB%84/</id>
    <published>2022-04-18T14:33:56.000Z</published>
    <updated>2022-06-09T09:16:58.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>给双风道的笔记本电脑更换新的散热模组的简单操作说明<a id="more"></a></p></blockquote><p>&emsp;&emsp;前段时间很不凑巧，笔记本右手边的风扇坏掉了，风扇转动时会发出拖拉机一样的声音。其实大概半年前这个风扇就有点轻微地嘎嘎响，当时以为是灰进多了，还特地拆开清了下灰尘，不过清灰后并没有好转，直到前段时间恶化成了这样。首先考虑的当然是换风扇，但之前在拆开清灰的时候就发现，这款拯救者Y7000P的风扇和散热铜管焊在了一起，无法通过正常手段单独拆卸下来（似乎18年之前的旧款是可以拆的），调查了网上其他人的经验后，决定替换整个散热模组。这样不仅省了一笔维修钱（虽然购买散热模组也要花钱，但比起售后还是少多了，保修一般就一年，但这玩意基本都是一年之后才会出问题），也能顺便练练手，一把螺丝刀就解决的问题干嘛不自己折腾呢。不过坑人的是因为赶上某奇葩政策的原因，快递在路上被卡了好长时间，导致我不得不多听了几天拖拉机响。</p><p>话不多说了，开搞。</p><p>&emsp;&emsp;在拆机之前先要做的就是除静电，首先是避免穿着平常觉得静电特别多的衣服（尤其是毛衣），然后摸一摸家里接地的金属管道、水龙头什么的，找不到金属的话摸水泥墙也是可以的…</p><p>&emsp;&emsp;拆后盖这里就见仁见智了，主要是拧下螺丝之后还有几排塑料卡扣比较难对付，指甲不够结实的话建议搞一把尖锐一点的平头螺丝刀一点一点去撬。</p><p>这是Y7000P拆开后的情况，我这里画了一下各个部件的位置：</p><img src="/2022/04/18/Y7000P更换散热模组/1.png" title="a"><p>首先是一些说明：</p><ol><li>上方黑色部分为散热模组，标数字的均是螺丝，绿色为风扇螺丝，黄色为散热模块的螺丝，蓝色是电池的螺丝。且因为新款拯救者的风扇和散热管被焊在了一块，想要拆掉散热模组则必须将所有的黄色螺丝和绿色螺丝都拧掉。其中散热模块螺丝（黄色）均为带弹簧固定的螺丝，是只能拧出而不能卸下的；</li><li>仔细观察可发现显卡风扇和CPU风扇是不一样大的，是不一样的风扇，二者不能互换。因为本机的散热模组只有两根铜管，将CPU和显卡串联在了一起，是整体化的，不过某些高端机型可能在CPU和显卡上各拥有一套单独的散热模组（即CPU和显卡各拥有2-3根铜管和一只风扇），需要单独购买某一部分的风扇或散热零件的话，一定要搞清楚要买的是CPU部分的还是显卡部分的。</li><li>内存条上是有一块金属屏蔽罩的，这里已经将屏蔽罩拆掉，屏蔽罩是通过几根卡扣卡住的，很好拆。</li></ol><p>&emsp;&emsp;拆开后建议先卸掉电池，因为不拆电池的话会给后续的操作带来一定风险，有可能导致某些部件被击穿，所以还是建议先拆掉电池。先下所有电池螺丝（蓝色），然后尝试拔掉电池的排线，笔记本的排线都是一个比一个难拔，这里要一点一点耐心往出拔。</p><p>然后观察一下新买的散热的样子：</p><img src="/2022/04/18/Y7000P更换散热模组/2.jpg" title="b"><p>&emsp;&emsp;主要观察背面，风扇和原厂风扇都是台湾SUNON的，质量应该没问题，就是不知道是不是因为在路上辗转久了，很多散热硅胶都裂开了，不得不把几个旧的风扇的散热胶片换到新的上面来。然后看一下商家有没有给配送散热硅脂（长得像灰色泥浆一样的东西），如果没有配散热硅脂的话，要确保手头有能用的散热硅脂。这里说一下，一般在电脑行业都把散热用的硅脂简单叫成硅脂，而实际上电脑行业之外还有很多硅脂，如绝缘硅脂、真空硅脂、光学透明硅脂等等，这些“硅脂”统统都不是一个玩意，不可互相替代，不可将别的硅脂用在电脑散热系统上。</p><p>&emsp;&emsp;确认新散热没问题后，就可以拆旧散热了。首先拔掉两个风扇的排线，一样会很难拔，需要耐心一点一点往外晃出来。拔掉两个排线后，把黄色螺丝和绿色螺丝都拧掉，从电脑中间位置的部分将散热微微抬起，不要抬得太高，然后把整个散热模组慢慢向出拔，可能会有些地方卡住，所以这里要慢点操作。</p><img src="/2022/04/18/Y7000P更换散热模组/3.jpg" title="c"><p>&emsp;&emsp;这是电池和散热都拆掉后的样子，可以看到显卡和CPU上残留有旧的干掉的硅脂，风扇部位沉积了一些灰尘，需要将这些地方都打扫干净。灰清一次也不容易，还是好好打扫一下，至于硅脂建议用卫生纸擦干净就行。</p><img src="/2022/04/18/Y7000P更换散热模组/4.jpg" title="c"><p>&emsp;&emsp;清理掉硅脂后的CPU。如果某些死角落实在擦不到就算了，保证大面积是干净的就行。</p><p>&emsp;&emsp;接下来就是给显卡和CPU涂上新的硅脂，涂硅脂之前建议先将新散热往上试着放一次，看看放不放的进去，你能顺利拆下来不代表你能顺利放进去，还是找找手感好，这样大概率能避免硅脂涂好了却半天卡不进去散热的尴尬问题。</p><p>&emsp;&emsp;因为涂硅脂操作比较认真，就没拍照片。涂硅脂这个经常被各种人乱吹，其实没那么玄乎，有手就行，原理上有点类似于师傅摊大煎饼的操作。也不需要什么工具，我觉得撕几片硬纸壳子当刮板就行了，就是那种面包、饼干零食外面的单层硬纸包装盒，找一个有直边的地方扯几个就行。把硅脂涂上去后慢慢将其刮平，最后保证硅脂层大概有1mm厚就行了。我个人是觉得不能太薄了，因为这玩意最后还是得和散热管上的铜片接触才行，过薄的话会导致接触不够充分，这才是会出问题的。</p><p>&emsp;&emsp;放好散热后用一只手把散热的中间部分先按住，保证硅脂层在上螺丝的过程中不会自行脱离，优先上紧显卡和CPU附近的弹簧螺丝，确保中间部分不再发生回弹后就可以松手了。然后将后续的螺丝都上好。散热部分的所有螺丝建议都稍微上得紧一点，上紧散热板是因为新散热模组的硅胶片都是新的，没被压过，需要一定的压力才能按下去；而上紧风扇则可以防止风扇在运行中外壳出现震荡。</p><p>&emsp;&emsp;按照相反的顺序把其他部件都装回去，这样手术就完成咯。</p><p>&emsp;&emsp;最后当然是开机了，先开个小程序或看看视频什么的让风扇转起来，观察一下两个风道是不是都在正常出风。如果都正常后，就可以测试“双烤”了，看一下CPU和显卡的温度都正不正常，看不到示数也没关系，简单用手摸一下键盘部分感觉一下是不是和平时温度差不多也是不错的办法。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给双风道的笔记本电脑更换新的散热模组的简单操作说明&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="生活" scheme="https://caelica.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="硬件" scheme="https://caelica.github.io/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>CSS中引入自定义字体</title>
    <link href="https://caelica.github.io/2022/04/18/CSS%E4%B8%AD%E5%BC%95%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/"/>
    <id>https://caelica.github.io/2022/04/18/CSS%E4%B8%AD%E5%BC%95%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</id>
    <published>2022-04-18T13:42:36.000Z</published>
    <updated>2022-06-21T07:43:52.050Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>CSS中字体的一些常见用法，以及利用@Font-face规则在网页中使用自定义的字体<a id="more"></a></p></blockquote><p>经过配置后，实现了在博客中自定义字体的功能，如目前博客标题的效果：</p><img src="/2022/04/18/CSS中引入自定义字体/1.png" title="A"><p>&emsp;&emsp;一般我们在网页中使用的字体通常都是所谓的“安全字体（Web-safe）”，通常指的是Arial、Courier New、Georgia、Times New Roman、Verdana等字体，这些字体因为无论在哪种浏览器的情况下一般都是被支持的，故称为“Web-safe”。这些都是英文字体，在中文的环境下也有一些被认为相对“安全”的字体，如黑体（SimHei）、宋体（SimSun）、仿宋（FangSong）、楷体（KaiTi）、微软雅黑（Microsoft YaHei）等，这些中文字体的名字也是有英文写法的，这里也一并写出。</p><p>&emsp;&emsp;这里还有个“通用字体族”的概念，可以指一类字体。其中最常见的是“Sans-serif”和“Serif”，Sans-serif应该是法语，字面意思就是“无衬线”，衬线指的是字符笔划末端出现的横线、斜线或突起等变化，相对的“Serif”就是“（有）衬线字体”。Times New Roman和宋体应该算是Serif中典型的例子，这两个都属于衬线字体；而黑体和Arial就属于Sans-serif，可以发现它们的笔划末端是平直的、没有变化的。其余的通用字体族如等宽字体（Monospace）等在这里不作多述。</p><p>&emsp;&emsp;了解了这些字体后，我们就可以声明并引入它们。如这里把元素“title”字体的属性定义为Times New Roman和宋体：</p><p>在配置CSS样式的地方声明所使用的字体：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">"Times New Roman"</span>, SimSun, 宋体, Sans-serif;</span><br></pre></td></tr></table></figure><p>在元素位置处将其引入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">"Times New Roman"</span>, SimSun, 宋体, Sans-serif;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">2.5em</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold; </span><br><span class="line"><span class="attribute">font-style</span>: italic;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line"><span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有几点注意：</p><ol><li>声明和引入字体的时候，英文字体放在中文前面，因为优先级是从左往右的，如果中文字体在前且该中文字体对英文字符生效（如宋体），就会让英文字符都首先服从了这个中文字体，后面的Times New Roman就失效了；</li><li>如果字体的名字有多个单词（如Times New Roman），最好打上引号，虽然对于多数浏览器来说不打好像也可以，但还是建议打上。单引号和双引号都是可以的；</li><li>中文字体是可以直接使用中文的，但还是建议中文名和英文名都写上；</li><li>为什么font-family最后都会放一个“Sans-serif”，这是一个保险措施，因为如果前面使用的字体是一些偏门字体或全都没有生效，则最后这个字体族“Sans-serif”一定能以某种方式生效，因为用户的计算机里必定存在这个字体族中的某一个可用字体。这样可以保证字体最终能够显示出来。</li><li>font的属性：<blockquote><p><strong>font-size</strong>控制字体大小，可以用em或px等作单位，1em大概等于16px，用px的话建议避免出现小数点；<br> <strong>font-weight</strong>控制字体的粗细，可以是normal、bold，或100-900之间的整百数值，400相当于normal，700相对于bold。可以看到数值越大就越粗。<br> <strong>font-style</strong>控制字体的样式，也就是说字体是不是斜体，值可以是normal、italic和oblique，italic和oblique都是斜体，区别在于italic应用字体中包含的斜体字符，而oblique只是单纯让正字符倾斜，如果字体文件不包含斜体字符的话，italic就不生效，而只能用obllique。所以一般优先用italic。</p></blockquote></li></ol><p>&emsp;&emsp;这之后，再来看如何实现一个“自定义”的个性化字体。因为不管宋体还是Arial这些字体都太常见了，搞不出花样，所以这里就有一个@Font-face的规则来让我们引入自选的字体来实现个性化。</p><p>用@font-face声明字体的基本写法：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@font-face</span><br><span class="line">&#123;</span><br><span class="line">font-family: &lt;YourFontsName&gt;;</span><br><span class="line">src: &lt;url&gt; <span class="meta">[&lt;format&gt;]</span>,<span class="meta">[&lt;source&gt; [&lt;format&gt;]</span>], *;</span><br><span class="line">[font-weight: &lt;weight&gt;];</span><br><span class="line">    [font-style: &lt;style&gt;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这其中，font-family后面是要给个性化字体起的名字，这个名字可以自定义。src的url路径可以是相对路径也可以是绝对路径，甚至可以是网址，让它指向字体文件所在的位置就行了。format则是浏览器要识别的字体对应的格式。</p><p>&emsp;&emsp;而关键则在于这个字体文件格式上，虽然.ttf是最常见的字体格式，但不同浏览器用的字体文件格式还挺多的，除了truetype(.ttf)之外，还有opentype（.otf）、truetype-aat、embedded-opentype(.eot)、svg(.svg)、woff(.woff)等，这些其他的格式的用处在这里不作多述，自然是俱备为好。首先我们得搞到字体文件（一般是ttf格式的），然后通过字体格式转换的工具（或网页）将其转换为所需的不同格式。获得这些文件后，将其都放到网页服务器的某一目录里，比如建一个叫font的文件夹。然后就可以在url中指向这个位置了。</p><p>本博客的标题logo的@font-face的写法为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">'AphroditeSlimPro'</span>; <span class="comment">/* Title flourish */</span></span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../font/AphroditeSlimPro/AphroditeSlimPro.eot'</span>); <span class="comment">/* IE9 */</span></span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../font/AphroditeSlimPro/AphroditeSlimPro.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">'../font/AphroditeSlimPro/AphroditeSlimPro.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">'../font/AphroditeSlimPro/AphroditeSlimPro.otf'</span>) <span class="built_in">format</span>(<span class="string">'otf'</span>),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">'../font/AphroditeSlimPro/AphroditeSlimPro.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</span><br><span class="line"><span class="built_in">url</span>(<span class="string">'../font/AphroditeSlimPro/AphroditeSlimPro.svg#icoAph'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;博客更新主题后我将字体换成了AphroditeSlimText，加入了<code>font-display: swap</code>的参数，它可以使用后备字体先行加载文本，等字体文件载入完成后再交换为指定的字体。代码基本没有什么变化：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"AphroditeSlimText"</span>; <span class="comment">/* Title flourish */</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts/AphroditeSlimText/AphroditeSlimText.eot'</span>); <span class="comment">/* IE9 */</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts/AphroditeSlimText/AphroditeSlimText.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="comment">/* IE6-IE8 */</span></span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'../fonts/AphroditeSlimText/AphroditeSlimText.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'../fonts/AphroditeSlimText/AphroditeSlimText.otf'</span>) <span class="built_in">format</span>(<span class="string">'otf'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'../fonts/AphroditeSlimText/AphroditeSlimText.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),  <span class="comment">/* chrome, firefox, opera, Safari, Android, iOS 4.2+*/</span></span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'../fonts/AphroditeSlimText/AphroditeSlimText.svg#icoAph'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>);</span><br><span class="line">    <span class="attribute">font-display</span>: swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其中加入的#iefix是为了让url实现特征化以避免IE9版本之前的某些冲突错误，而第一个不带format属性的格式也是为了解决一些兼容问题。至于font-weight等属性，因为我在引入调用的时候已经写了，在声明中就可以忽略掉。这些都完成后，就可以直接在元素中引入AphroditeSlim的字体，结果就如上面的图示。这样因为字体文件实际上已经进入了服务器，我们在系统本身不含有这个字体的设备上查看该网页的时候，也是可以加载出这个字体的。要验证这一点的话可以在虚拟机或者手机端测试一下就行。</p><p>&emsp;&emsp;上面还说到，这个url可以调用一个网址，这也就是说字体文件并不是必须在自己的服务器里，也可以放在其他地方，只要它随时可以调用就行，字体也不局限于文字，如本博客中的几个按钮的图标也是通过@font-face来实现的，这通常称为“icon font”，我直接调用了阿里巴巴矢量图标库的图标文件。该图标库的网址为<a href="http://www.iconfont.cn" target="_blank" rel="noopener">www.iconfont.cn</a> ，它的好处是可以直接生成@font-face的代码段，只需要复制粘贴进来就行了。不过如果想实现自定义网上没有的东西的话，还是得做上面的步骤。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CSS中字体的一些常见用法，以及利用@Font-face规则在网页中使用自定义的字体&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="CSS" scheme="https://caelica.github.io/tags/CSS/"/>
    
      <category term="网页" scheme="https://caelica.github.io/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>This is for the Record</title>
    <link href="https://caelica.github.io/2022/04/17/This-is-for-the-Record/"/>
    <id>https://caelica.github.io/2022/04/17/This-is-for-the-Record/</id>
    <published>2022-04-17T07:59:24.000Z</published>
    <updated>2022-04-17T08:10:20.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>5468697320697320666F7220746865205265636F72642E0D0A<a id="more"></a></p></blockquote><pp>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;5468697320697320666F7220746865205265636F72642E0D0A&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>大型翻译计划：魔兽世界日记</title>
    <link href="https://caelica.github.io/2022/03/23/%E5%A4%A7%E5%9E%8B%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92%EF%BC%9A%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%97%A5%E8%AE%B0/"/>
    <id>https://caelica.github.io/2022/03/23/%E5%A4%A7%E5%9E%8B%E7%BF%BB%E8%AF%91%E8%AE%A1%E5%88%92%EF%BC%9A%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%97%A5%E8%AE%B0/</id>
    <published>2022-03-23T09:53:17.000Z</published>
    <updated>2022-06-09T09:21:27.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>一个大约100,000英文字符的翻译计划<a id="more"></a></p></blockquote><p>《魔兽世界日记：一部电脑游戏开发志（The WoW Diary：A Journal of Computer Game Development）》是约翰·斯塔茨（John Staats）所著的一本书，约翰·斯塔茨是暴雪早期团队的一位老成员，主要负责关卡设计方面的任务。该书在2018年于Kickstarter上发起众筹，并于2019年底发布。虽然约翰·斯塔茨早已不在暴雪公司工作，也不再参与游戏开发了，但他在《魔兽世界日记》中所提到的有关魔兽世界的早期开发内容以及相关信息，仍是我们能了解香草时代魔兽世界的前生后世，以及2000年前后的暴雪公司运作内幕细节的一个可靠来源。</p><p>此书的众筹据说也是一波三折，因为暴雪公司（现在的）并不希望有人披露这些详细内容，但斯塔茨仍然完成了这项工作。虽然此书已经于2019年发布，但迄今为止，我还没有在中文互联网上看到有关此书的整体翻译工作。故打算在这段时间里将此书全文翻译，总共约100,000个英文字符，这个工作量也不算太恐怖，目前已经完成了大约1/5内容的初步汉化。</p><p>约翰·斯塔茨的行文相当有趣，对很多专业术语也进行了详细解释，所以翻译难度并不是很高。我打算将分多个部分将初步翻译内容上传到博客里，之后进行润色修正后，博客也将一并更新。</p><hr><p>喔咯咯！5月10号终于翻译完了，10万英文字符居然有300多页（吐了），我也真是头铁…PDF版也做好了，之后会单独开个页面提供下载直链。我想顺便利用一下hexo的pdf功能…<br>译文文档下载页面见新发布的：<a href="https://caelica.github.io/2022/05/16/%E3%80%8A%E9%AD%94%E5%85%BD%E4%B8%96%E7%95%8C%E6%97%A5%E8%AE%B0%E3%80%8B%E8%AF%91%E6%96%87%E4%B8%8E%E8%AF%91%E5%90%8E%E6%84%9F%E6%83%B3/"><font color="blue">《魔兽世界日记》译文与译后感想</font></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个大约100,000英文字符的翻译计划&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="翻译" scheme="https://caelica.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>通识污染——某搜索引擎离谱的医学词条</title>
    <link href="https://caelica.github.io/2022/01/15/%E9%80%9A%E8%AF%86%E6%B1%A1%E6%9F%93%E2%80%94%E2%80%94%E6%9F%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%A6%BB%E8%B0%B1%E7%9A%84%E5%8C%BB%E5%AD%A6%E8%AF%8D%E6%9D%A1/"/>
    <id>https://caelica.github.io/2022/01/15/%E9%80%9A%E8%AF%86%E6%B1%A1%E6%9F%93%E2%80%94%E2%80%94%E6%9F%90%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%A6%BB%E8%B0%B1%E7%9A%84%E5%8C%BB%E5%AD%A6%E8%AF%8D%E6%9D%A1/</id>
    <published>2022-01-15T08:43:39.000Z</published>
    <updated>2022-12-23T07:44:13.820Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>真给我整蒙了.jpg <a id="more"></a><br>百度百科痢疾词条：<a href="https://baike.baidu.com/item/%E7%97%A2%E7%96%BE/672047" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%97%A2%E7%96%BE/672047</a><br>维基百科Dysentery词条：<a href="https://en.wikipedia.org/wiki/Dysentery" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Dysentery</a><br>当然这些词条都可能在今后发生变化，所以这里将作截图留存。</p></blockquote><p>&emsp;&emsp;我这人本不打算和中医打任何交道，没想到就是没得病也给我整蒙了。起因是睡觉前读了一会Philip Parker的《维京人的世界（The Northmen’s Fury: A History of the Viking World）》，非常专业的全方位讲维京人历史的一本书，里面提到845年围攻巴黎的维京人战团中爆发了痢疾，导致其进攻受挫，连维京人的首领拉格纳也死于此病，有意思的是，这被法国人看作是因维京人掠夺了附近的修道院而受到的上帝的“神罚”。于是我随手就百度了一下痢疾是什么病，没想到这一搜真给我长见识了：</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/1.png" title="a"><p>&emsp;&emsp;好家伙，居然是文言文的中医词条，我看了半天也就认得“脓血”、“腹痛”、“饮食不洁”、“病位在肠”，“与脾胃有密切关系”。至于“外感时邪疫毒”，到底感了什么毒，是病毒还是细菌还是化学毒剂？“湿热、疫毒、寒湿，气血壅滞”谁会念这个字？后面的更让我摸不着头脑：什么“宜清”、“宜温”、“实证”、“虚证”、“通涩兼施”、“虚实夹杂”，着实搞的人云里雾里。最最好笑的是，简表里写的传染性是“无”，正文里又写明了“是夏秋季节常见的传染病”，“应重在预防，控制传染”，所以说这病到底传不传染？文章自己都是前后矛盾的。而且，也没有痢疾的英文学名，一个单词都不让你学。</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/2.png" title="b"><p>&emsp;&emsp;然后是贴了一堆只讲大空话的古文，并且“进一步阐明痢疾具有流行性、传染性”。有意思的是，出现了一段“本节讨论的内容以西医学中的细菌性痢疾、阿米巴痢疾为主”，意思等于是说，我和你们西医讲的是一个玩意，但我不按照你们那套规则来描述事物，不过“溃疡性结肠炎、放射性结肠炎、细菌性食物中毒”这涵盖的范围也太广了吧，这也“均可参照本节辨证论治”？这真让人很好奇下面是不是有什么包治百病的神药。至于发病机理，又是上面见过的什么“湿热疫毒”、“邪蕴肠腑”，到底是什么毒什么菌、通过什么途径什么原理把肠道损害了，只字不提。</p><p>于是我们看看中医是怎么治痢疾的：</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/3.jpg" title="c"><p>&emsp;&emsp;我不觉得一个没学过中医的正常中国人能一字不落地读完这些内容，互联网百科说到底应该是一种通识教育（General Education），是给老百姓看的，不是光给中医医生看的，更何况谁家科班出身的医生照着网上搜来的的百科词条给人看病啊？这写一堆这玩意，是要叫身患痢疾的老百姓进深山老林学神农，尝百草么？</p><p>再看一下维基百科对于Dysentery的解释：</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/4.png" title="d"><p>翻译一下：</p><blockquote><p>痢疾（Dysentery）是一种导致血性腹泻的肠胃炎。其他症状可能包括发烧、腹痛和不能完全排便的感觉，并发症可能包括脱水症。<br>痢疾的原因通常是志贺氏属（Genus Shigella）的细菌，在此情况下，它被称为志贺氏菌病（shigellosis）或溶组织内阿米巴（Entamoeba histolytica）原虫；并被称为阿米巴病（amoebiasis）。其他的某些化学物质、细菌、其他原生动物或寄生虫也可能导致此病。它可在人与人之间传播。风险因素包括由于卫生条件差而导致的粪便污染食物和水。潜在机制涉及肠道炎症，尤其是结肠炎症。<br>预防痢疾的有效措施包括在高风险地区旅行时洗手，以及食品安全措施。虽然这种情况通常会在一周内自行消退，但喝足够的液体（例如口服电解质补水液）很重要。阿奇霉素等抗生素可用于治疗与发展中国家旅行相关的病例。洛哌丁胺等用于减少腹泻的药物不建议单独使用，它们应当与抗生素一起使用。<br>志贺氏菌每年导致约1.65亿例腹泻病例和110万人死亡，几乎所有病例都发生在发展中国家。在卫生条件差的地区，近一半的腹泻病例是由溶组织内阿米巴引起的。溶组织内阿米巴每年导致超过55000人死亡，影响了数百万人。它通常发生在中美洲和南美洲、非洲和亚洲的欠发达地区。至少自希波克拉底时代以来，就已经描述了痢疾。</p></blockquote><p>&emsp;&emsp;维基词条在概述中其实也没有说得太清楚，志贺氏菌（也就是我们说的细菌性痢疾）和阿米巴原虫（阿米巴痢疾）是两种病因，不过这里我们也可以看出，痢疾（Dysentery）是一个比较笼统的传统叫法，因为致病病原体不是唯一的，但大多数情况下为志贺氏菌和阿米巴原虫，下文中得到了详述。而且我觉得feeling of incomplete defecation不比什么“里急后重”明白多了？过多的中医术语也是让此类文章失去可读性的重要原因。</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/5.png" title="e"><blockquote><p>体征与症状：最常见的痢疾是细菌性痢疾，通常是一种轻度疾病，引起的症状通常包括轻度肠痛和频繁排便或腹泻。症状通常在1-3天后出现，通常一周后不再持续。排便冲动的频率、排出大量液体便以及血液、粘液或脓液的存在取决于引起疾病的病原体。也可能发生暂时的乳糖不耐症。在某些严重情况下，可能会出现严重的腹部绞痛、发烧、休克以及谵妄。<br>在极端情况下，病人每小时可能会排出超过一升的生殖器和肛门液。更常见的是，病人会抱怨伴有极度腹痛、直肠疼痛和低烧的带血腹泻。有时痢疾伴随快速的体重减轻和肌肉疼痛，而恶心和呕吐很少见。在许多情况下，可能会出现影响整个上肠周围肌肉的级联痉挛；有时严重到足以导致肠膜与肠壁分离，导致全身感染。<br>在极少数情况下，阿米巴寄生虫会通过阴道血流侵入人体并扩散到肠道之外。在这种情况下，它可能会更严重地感染其他器官，例如大脑、肺，最常见的是肝脏。</p></blockquote><p>&emsp;&emsp;照中医词条的说法你根本不知道这个疾病能严重到什么程度，如果没有施以有效的治疗，确实足以要命，看来不是维京人不能打，而是疾病太狠。</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/6.png" title="f"><blockquote><p>病因：痢疾是由细菌，或寄生虫感染引起的。病毒通常不会引起这种疾病。这些病原体通常通过摄入受污染的食物或水、或口腔接触受污染的物体或手等途径，从口腔进入后到达大肠。每种特定的病原体都有其自身的机制或发病机制，但总的来说其结果是对肠壁的损伤，导致炎症的免疫反应。这会导致体温升高、肠道肌肉疼痛性痉挛，因液体从肠道毛细血管渗漏而导致肿胀（水肿），以及身体免疫细胞和称为细胞因子（cytokines）的化学物质进一步对组织造成损害，因人体会释放这些化学物质以对抗感染。结果可能是营养吸收功能受损，肠道组织通常从粪便中除去水分的控制机制的破坏导致的水分和矿物质的流失，以及严重的情况下，病原微生物会进入血液循环。贫血也可能由于腹泻失血而引起。<br>导致血性腹泻的细菌感染通常被归类为侵入性（invasive）或产毒性（toxogenic）。侵入性物种通过侵入肠道黏膜直接造成损害，而产毒性物种不会侵入，但会通过分泌毒素造成细胞损伤，导致血性腹泻。这也与导致水样腹泻的毒素形成对比，后者通常不会造成细胞损伤，而是在细胞的一部分生命中接管细胞机制。<br>一些微生物——例如志贺氏菌属的细菌——分泌被称为细胞毒素（cytotoxins）的物质，在接触时会杀死和破坏肠道组织。而与其毒性相比，志贺氏菌被认为其侵入性更强从而引起出血，因为即使是非产毒菌株也会引发痢疾，但带有志贺样毒素的大肠杆菌无法入侵肠粘膜，因此，是毒素机制具有依赖性，不能独立存在。<br>痢疾的定义可能因地区和医学专业而异。美国疾病控制和预防中心 (CDC) 将其定义限制为“可见血液的腹泻”。其他人更广泛地定义了这个术语。在定义机制时必须考虑到这些定义上的差异。例如，使用CDC 的定义要求肠道组织受到严重损伤，以至于血管破裂，排便时会流失可见量的血液。其他定义可能需要的具体损害相对较少。</p></blockquote><blockquote><p>阿米巴痢疾（Amoebic dysentery） 主条目：阿米巴病（Amoebiasis）<br>阿米巴病，也称为阿米巴痢疾，是由溶组织内阿米巴变形虫感染引起的，多见于热带地区。正确治疗阿米巴痢疾的潜在感染很重要；未得到充分治疗的阿米巴病可能会潜伏多年，随后导致严重且可能致命的并发症。<br>当感染者肠道内的变形虫（amoebae）准备离开身体时，它们会聚集在一起形成一个外壳包围并保护它们。这组变形虫被称为囊肿（cyst），然后通过粪便排出人体，并可以在体外存活。如果卫生标准很差——例如，如果人们不卫生地处理粪便——那么它可能会污染周围的环境，例如附近的食物和水。如果另一个人随后食用或饮用被含有此囊肿的粪便污染的食物或水，该人也会感染阿米巴虫。阿米巴痢疾在世界上将人类粪便用作肥料的部分地区尤为常见。通过口腔进入人体后，囊肿向下进入胃部。囊肿内的变形虫可避免胃酸的腐蚀。囊肿从胃进入肠道，在那里它破裂并释放变形虫，从而导致感染。变形虫可以钻入病人的肠壁并导致形成小脓肿和溃疡。然后循环将再次开始。</p></blockquote><blockquote><p>细菌性痢疾（Bacillary dysentery） 主条目：细菌性痢疾<br>痢疾也可能由志贺氏菌病引起，志贺氏菌属细菌感染，然后被称为细菌性痢疾（或马洛综合征）。细菌性痢疾一词在词源学上似乎是指由任何杆菌状细菌引起的任何痢疾，但其含义仅限于志贺氏痢疾。<br>其他细菌：一些大肠杆菌菌株会引起血性腹泻。典型的罪魁祸首是肠出血性大肠杆菌，其中O157:H7最为人所知。</p></blockquote><p>&emsp;&emsp;这条就讲的非常清楚了，相比中医条目那看不懂的古文甚至可以用精彩来形容。志贺氏菌和阿米巴寄生虫都会导致此类疾病，志贺氏菌通过直接侵入肠粘膜+分泌细胞毒素的方式引起肠炎，而阿米巴虫则是一种典型的寄生虫病，拥有一套完善的寄生-繁殖机制，可抵御人体的各种免疫措施，且可在人类社区中依靠排泄物传染他人。并且说明了狭义上的“细菌性痢疾”仅指志贺氏菌痢疾，但广义上的细菌性痢疾可以包含其他细菌病原体。从致病机理可以看出，痢疾均从大肠发病，和脾、肾确实没有什么关系，和胃的关系也很小，不知道为什么中医理论老是把什么病都扯上脾肾。</p><p>再来看看治疗手段：</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/7.png" title="g"><blockquote><p>痢疾可通过使用口服电解质补液的疗法维持液体得到控制。但这种治疗方法如果由于呕吐或大量腹泻而无法维持，则可能需要住院以进行静脉输液。在理想情况下，在通过显微镜微生物和培养研究确定所涉及的感染种类之前，不应进行抗细菌治疗。当这种实验室服务条件不可用时，可能需要联合使用药物，包括能杀死阿米巴寄生虫的药物和治疗任何相关细菌感染的抗生素。<br>如果怀疑是志贺氏菌病并且不太严重，让它自然发展可能是合理的——通常不到一周。如果情况严重，可以使用环丙沙星或TMP-SMX等抗生素。然而，许多志贺氏菌菌株对普通抗生素产生抗药性，而有效药物在发展中国家往往供不应求。如有必要，医生可能必须为死亡风险最高的人保留抗生素，包括幼儿、50岁以上的人以及任何患有脱水或营养不良的人。<br>阿米巴痢疾通常用两种抗菌药物治疗，例如甲硝唑和巴龙霉素或碘喹啉。<br>医疗预后：通过正确的治疗，大多数阿米巴痢疾和细菌性痢疾会在10天内消退，大多数人在开始适当治疗后的两到四个星期内即可完全康复。如果疾病不治疗，预后会随着个体患者的免疫状态和疾病的严重程度而变化。极度脱水会延迟恢复并显着增加严重并发症的风险。</p></blockquote><p>&emsp;&emsp;这也是医疗上的一个基本道理，先确定病原体再对症下药，且也存在口服电解质补液的自愈疗法和轻度疗法，并非某些人认为的“西医只有打针输液”。甚至还考虑到了资源匮乏的非理想情况，毕竟地球上不是哪里都发达，很多穷困地区没有医学条件，病人还特别多，在没有实验室无法确定病原体的情况下，杀寄生虫和杀细菌应当双管齐下二者并用，这也是不得已而为之。而且说了这么多，这也只是百科词条，是属于世界人民的“通识教育”。</p><p>&emsp;&emsp;然后我还找到一篇1991年的《睢县腹泻患者中志贺氏菌和溶组织阿米巴原虫的调查分析》：</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/8.png" title="h"><p>&emsp;&emsp;文献也写的很清楚，河南睢县出现的阿米巴痢疾和志贺氏菌痢疾病例上基本五五开，很多阿米巴痢疾被误诊为细菌性痢疾导致久治不愈。检测手段也当然是粪便常规，并非靠什么听起来就不靠谱的“伤气伤血、虚实主次”。</p><p>最后再对比一下参考文献：</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/9.png" title="i"><p>&emsp;&emsp;这么写文章也是明摆着糊弄人了，仔细看了看，本词条居然还有北京中医药大学第三附属医院的刘金民主任医师作专家认证，还是教授、博士生导师，不知道这导师的博士生是不是论文都是这么写参考文献的，哦还有“国家中医药管理局百度百科科普词条项目审核专家组”认证，且本词条是“国家中医药管理局中医药名词术语成果转化与规范推广项目”的提供内容，至于这项目是啥咱不知道，只知道这还是个锁定词条，一般人还别想编辑。</p><p>&emsp;&emsp;就这条目本身提供的古代文献来看，也只有非常少数的内容提到了“大小肠”，而更多的内容都是“胃气败”、“腹痛”、“血虚”、“气湿”，压根无法指出病因所在。我们可以推断，这个满篇文言文的古怪词条一定是现代人写就的，古人哪有这本事啊，这些用文言文写出的“假古文”是引证不出文献来源的，只能骗骗不懂的人以为古代文献有多高深。</p><p>&emsp;&emsp;也许有人会想当然的说，鬼才看百度词条。或者重复我上面说的，医生也不靠百度词条治病。其实我上面写了这么多，关键就在这一点，这种想法大大忽视了通识教育的必要性，也大大低估了此类行为的危害性。全国上下十几亿老百姓，不是人人都能读英语，更不是人人都能上维基的。说到底，这个词条的目的就是让普通老百姓们上网搜一大圈也搞不懂什么是痢疾，读不懂“医学”内容然后产生自我否定，也不知道该用什么药，得病了只能病急乱投医，然后再被这些老中医们用一记十几块钱的便常规，再附带上一堆上百元乱七八糟的、里面可能只含了百分之几西药有效成分的中成药，宰得盆满钵满。毫不怀疑的说，几十年过去了已经不知道有多少亿万人受了这样的骗，有人说几十年前信息通讯不发达，你得病了可能还真得求助于村里那个没什么证的赤脚医生，但现在都什么年代了，还把这一套拉出来是为了啥？不由的让我想到互联网上的“DNS污染”的概念：你求取一个地址，系统识别后给你发送一个错误地址，目的就是把你引到沟里去，你永远也获得不到正确的内容。</p><p>&emsp;&emsp;我们的医学常识正在遭受这样一种污染，其实在历史、哲学等学科上我们早已见识过，我认为不应当将这种污染称为学术污染，学术污染这个词汇应该指的是在某些特定学术领域制造的学术功利或虚假，比如学者靠一些骗人的垃圾项目套取资源或谋晋升等套路，但这些学术内容的腐败多是让那些专家教授得了利，也确实损害、污染了社会环境，但相较于上面的情况来说，它和普通老百姓的生活的关系通常不是非常直接。</p><p>&emsp;&emsp;但此类污染不同，它直接影响、误导了一个普通人对一些基本生活常识的获取能力、思维方式和价值判断，剥夺了人的现代性和文明程度，把千千万万的人变成蠢人，危害远远不可估量。我思来想去之后自创了一个词汇（我不确定是否有人已经提出过），这应当被称为“通识污染（General knowledge pollution）”，这里有必要阐述一下为什么我认为“通识教育”是真正的教育，且从来没有在我们国家进行过，通识教育早在19世纪就已经提出，如今已经可以算是现代大学教育思想的基本内核，“人是目的，而不仅仅是手段”，更是在18世纪就被总结出来的社会学基础。但经过这样的通识污染后，让一个普通人在人的基础目的层面上就难以实现现代文明化，即使他受到了教育甚至走上学术道路，最终也只能异化为牢牢捆绑在某个狭窄岗位上的工具性人才，学建筑的不懂医学常识，学医的不懂简单的机械物理原理，学机械的没有哪怕一点人文艺术修养，等等，再次说明这里说的不懂不是指无法成为某个领域的专业人士，而是不具备很多现代社会的基本素质。结果是只要出了这一行就立马变成小学生，没权力的要受骗受欺负，有权力的就瞎指挥，这真是我们天性愚钝，罪该如此吗？绝不，这一切落后都是人为施行的结果，我想其目的也是显而易见的，到底来讲，他们压根不希望真正的通识教育在这片土地上得以普及，也不想看到人民中诞生出不只为某些利益团体服务的、自由的通识性人才。</p><p>&emsp;&emsp;最后，不得不说，Wikipedia是我真正意义上老师之一，它让我学会了无数有价值的东西。反过来说，也让我看清了在一个不那么正常的体系里的公立教育的弊端和危害性——一个“正常”环境里永远不会通过正常渠道交给最普通的人们去保管的、最应得的知识、财产与权利。所以我一直在支持它，就像创始人Jimmy Wales说的：“Imagine a world in which every single person on the planet is given free access to the sum of all human knowledge. That’s what we’re doing.” 在这之上，我看到了一种原始的、可贵的互联网精神，这种精神首先带来一种可能性，一种破除那些由权力意志主导的企图蒙蔽、劣化普通人的文明性，从而把人变成纯粹的工具和手段的可能性，在我看来，这便是国际互联网最伟大的意义所在。</p><img src="/2022/01/15/通识污染——某搜索引擎离谱的医学词条/10.png" title="j">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;真给我整蒙了.jpg&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="生活" scheme="https://caelica.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="翻译" scheme="https://caelica.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>TrinityCore服务端的初步认识</title>
    <link href="https://caelica.github.io/2021/12/16/TrinityCore%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"/>
    <id>https://caelica.github.io/2021/12/16/TrinityCore%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</id>
    <published>2021-12-16T09:25:21.000Z</published>
    <updated>2022-06-09T09:15:11.041Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>简述以TrinirtCore为基础的WOW服务端的结构、作用以及一些架设要点，不涉及源码编译。 <a id="more"></a></p></blockquote><p>&emsp;&emsp;在之前的文章《<a href="https://caelica.github.io/2021/09/01/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E6%88%98/"><font color="blue">云服务器搭建游戏服务器实战</font></a>》中初步实现了对一般意义上的MMORPG的服务端搭建，但问题也很明显，就是服务端稳定性普遍不足。本次使用比较普遍的端核即TrinityCore，在不涉及源码编译的情况下（也就是直接使用别人编译好的端）进一步了解WOW服务端结构。相信这篇文章也适用于想了解WOW服务端工作原理的新手小白。因为本人也只是初学者，难免有认识错误的地方，本文也将在后续的学习中进行修正。</p><p>TrinityCore的官方wiki页面为：<a href="https://trinitycore.atlassian.net/wiki/spaces/tc/overview" target="_blank" rel="noopener">https://trinitycore.atlassian.net/wiki/spaces/tc/overview</a> ，可查询具体细节问题；<br>TrinityCore的Github项目为：<a href="https://github.com/TrinityCore" target="_blank" rel="noopener">https://github.com/TrinityCore</a> ，可于此找到项目源码及搜索各种issue。</p><h2 id="什么是TrinityCore"><a href="#什么是TrinityCore" class="headerlink" title="什么是TrinityCore"></a><p align="left">什么是TrinityCore</p></h2><p>&emsp;&emsp;Trinity是基于MANGOS、SD2、UDB、ACID及其他各种补丁之上发展而来的一个MMORPG服务端项目，Trinity最著名的服务端是3.3.5a的WLK版本。多年来在TrinityCore的技术基础上诞生了很多自制端，可以说目前市面上能看到的很多私服都是基于Trinity的技术修改而来。</p><p>&emsp;&emsp;Trinity本身发展较早，在网络上多年来拥有了相当多的衍生端，以及团队、社区、论坛、技术文件等，这使得Trinity端的各种问题解决起来都相对方便。本人测试过的Trinity 3.3.5 12340（TW）相当稳定，故十分推荐从Trinity 3.3.5开始学习WOW端的搭建，能少走很多弯路，且3.3.5可以说是WOW历史上公认的最经典的版本，也具有一定的收藏和娱乐价值。</p><p>&emsp;&emsp;Trinity的端一般都需要安装VC++和OpenSSL的的运行环境，环境包一般都在下载的端里带的有，简述如下：</p><ol><li>安装 vcredist_x86；</li><li>安装 Win32OpenSSL，路径默认到C盘，中途选择“The OpenSSL binaries”的选项；</li></ol><h2 id="TrinityCore的文件结构及说明"><a href="#TrinityCore的文件结构及说明" class="headerlink" title="TrinityCore的文件结构及说明"></a><p align="left">TrinityCore的文件结构及说明</p></h2><p>&emsp;&emsp;Trinity的结构可以说是比较简单明了的，我这里简单用一个图来说明TrinityCore的文件结构：</p><img src="/2021/12/16/TrinityCore服务端的初步认识/1.jpg" title="a"><p>&emsp;&emsp;Trinity文件夹下应当存在两个主要文件夹，名称不一定，这里将其称为Server和Core。另外还最好存在一个名为JRC.exe的辅助工具，全名应为Jeutie’s Repack Restarter，它将worldserver、Authserver以及MySQL和Apache服务的启动停止功能集成在一个软件里，并可以快捷打开.conf配置文件，只要指定好路径以后就可以使用这些功能，是一个很方便的工具。</p><p>&emsp;&emsp;回到Trinity本身，Server下主要是服务器的数据库与程序，其中MySQL集成了MySQL（至于版本，一般都是MySQL5）程序本体以及数据库，但是注意这里并没有带数据库管理工具，需要自行安装（我使用Navicat8，建立一个localhost3306就可以连接数据库了）；Apache是一个Web服务器软件，用来提供一个可以自助注册的注册页面；剩下的php等文件是该注册页面的内容，如果在启动Apache后无法从127.0.0.1打开注册页面，多是因为缺少了注册页面的内容。</p><p>&emsp;&emsp;Core下存在三类内容，maps、vmaps、mmaps、dbc、logs等文件夹；启动器和启动器配置文件；.dll文件。</p><p>&emsp;&emsp;先说第一类，maps、vmaps、mmaps、dbc这四项内容是非常重要的，可以说这些内容直接决定了一个端的基本质量。这里很有必要详细说明各种文件的作用，而且强调一点，这四项都是一定要有的，否则根本没法正常使用，并非很多内容里说的除了maps都是“可选”；且就算服务端的确包含了这些地图数据，但在配置文件（worldserver.conf）里有可能默认禁用了vmaps等模组（其值为0），一定要将其全部启用（值改为1）：<br>maps是世界的逻辑地图，各种坐标定位、坐标名称、传送关系等均靠maps实现，没有maps内容是绝对不行的。</p><p>vmaps（vector maps）是矢量地图，可以理解为是一种具有真实矢量关系的视觉地图，它控制地图的方向关系。若缺少mmaps则会出现野怪单位arggo（wow术语，即产生仇恨）离它们距离虽近，但实际上无法看到的地方（比如墙后、地下室等）的bug。</p><p>mmaps（movement maps）是移动地图，它控制行动路线上的关系，若缺少vmaps则会导致怪物穿墙杀向玩家，掉入虚空、单位一跳一跳踏空而行的典型bug。</p><p>dbc是一系列功能性内容，控制如成就、天赋、法术施放时间、地图势力范围等等众多功能性内容。网络上有一张表注明了dbc文件中各个文件的作用：</p><details><summary><p align="left"><font size="4"><font color="#2A65FF">点此展开dbc具体内容</font></font></p></summary><p>Achievement.dbc 记录了成就的详细内容–名字，描述等等 !<br>Achievement_Category.dbc 成就的分类[像：”经典旧世”、”任务”、”战场”、”荣誉击杀” 、”战斗、”消耗品”……等等]<br>Achievement_Criteria.dbc 记录了成就的达成要求<br>AnimationData.dbc 里面是各种行为、动作的镜头动作<br>AreaTable.dbc 地区表，记录了小地区的信息–名字、范围等[比如” 奈辛瓦里远征队营地”、” 莫格罗什要塞”等……] )<br>AreaTrigger.dbc 传送点坐标<br>AuctionHouse.dbc 拍卖行种类 )<br>BankBagSlotPrices.dbc 开银行栏位的价钱<br>BarberShopStyle.dbc 理发店能做的发型<br>BattlemasterList.dbc 战场、竞技场种类<br>Cfg_Categories.dbc 记录了WOW的各个服务大区[居然还有一到十区、网易的3.13果然很赶工]<br>由Char打头的dbc 记录了角色的脸型、发型、发色、肤色、特征[胡须、耳环]等包含的种类<br>CharSections.dbc 角色的各部位贴图文件<br>CharStartOutfit.dbc 出生时的装备<br>CharTitles.dbc 角色能获取的称号总类别ChatChannels.dbc 系统默认频道总类别<br>ChatProfanity.dbc 敏感字眼 开启过滤后会显示成****的那些词<br>ChrClasses.dbc 职业总类别<br>ChrRaces.dbc 所有种族[包括但不仅限于玩家]<br>CinematicCamera.dbc 每个种族出生的种族介绍的镜头[比如，你建了一个人类，背后就有一个家伙唠叨人类的起源、特长、特征等等，然后同时，镜头从暴风城一路飞到北郡，介绍完最后一句话，镜头刚到走到你身上，就是记录的这个玩意]<br>CreatureDisplayInfo.dbc和CreatureDisplayInfoExtra.dbc 两个记录了生物的ID、模型、贴图、装备等。这其中的关联要理清的话，要花很大的功夫。猫扑模型区有很详细的介绍<br>CreatureFamily.dbc 生物所属的类型[其实就是指野兽的分类，Family是野兽独有的属性，“生物”在这特指野兽]<br>CreatureModelData.dbc 生物模型信息<br>CreatureSoundData.dbc 生物语音路径<br>CreatureSpellData.dbc 生物的法术信息<br>CreatureType.dbc 生物类型[人型、亡灵、野兽、龙类……这种分类]<br>CurrencyCategory.dbc 货币的大分类<br>SCurrencyTypes.dbc 货币细类<br>SEmotes.dbc 表情动作的名字<br>EmotesText.dbc 表情动作的命令[/dance、/cry……]<br>EmotesTextData.dbc 表情动作的提示文字[一般分这几种：你看到的，A对B做了什么，A对自己做了什么，某人对你做了什么，你对某人做了什么，你对自己做了什么]<br>EmotesTextSound.dbc 做表情时发出什么样的声音<br>Exhaustion.dbc 玩家的休息状态及处于这种状态下的收益减益设定[精力充沛、正常、疲倦1、疲倦2、精疲力竭、战友招募]<br>Faction.dbc 记录了WOW里所有的阵营[名字，阵营ID等]<br>FactionGroup.dbc 阵营分类[玩家、联盟、部落、怪物]<br>FileData.dbc 开场动画的名字<br>GameObjectArtKit.dbc 旗杆[战场里，被联盟占下的旗，部落占下的旗，还有争夺中的旗，还有火焰节的那个旗……等等]<br>GameObjectDisplayInfo.dbc 游戏中的对象外观[对象就是WOW里的摆设啦等，比如一本魔法宝典，等]<br>GameTables.dbc 游戏公式表[比如，抗性的设定、升一级需要的经验、NPC魔法消耗倍数等。这个与游戏中各种各样的公式计算有关]<br>GameTips.dbc 角色登录的时候，Loading条上面的“小窍门” GMSurveyAnswers.dbc 、GMSurveyQuestions.dbc GM评价问卷的答案、题目 !<br>GMTicketCategory.dbc 联系GM时的问题分类<br>GroundEffectDoodad.dbc 地表模型<br>GroundEffectTexture.dbc 地表模型的材质贴图<br>gtBarberShopCostBase.dbc 理发店的价钱<br>HolidayDescriptions.dbc 节日描述<br>HolidayNames.dbc 节日名字、ID<br>Holidays.dbc 节日设定<br>Item.dbc 物品总汇<br>ItemBagFamily.dbc 物品可放入包裹[按包裹的属性，箭矢、灵魂碎片、附魔材料、矿物……]<br>ItemClass.dbc 物品种类[武器、护甲、配方、消耗品……在AH浏览时的那个分类就用的这个]<br>ItemCondExtCosts.dbc、ItemExtendedCost.dbc物品的售出与购回价<br>ItemDisplayInfo.dbc 物品外观<br>ItemGroupSounds.dbc 各类物品的声音<br>ItemPetFood.dbc 宠物食物总类别<br>ItemRandomProperties.dbc 物品的随机属性[灵猴之、孤狼之、雄鹰之……]<br>ItemRandomSuffix.dbc 随机属性的加成方法<br>ItemSet.dbc 套装总汇<br>ItemSubClass.dbc 物品子类[容器、灵魂袋、法杖、红色、多彩……AH的子类搜索就是用的这个分类]<br>ItemVisualEffects.dbc 视觉特效<br>Languages.dbc WOW中的语言[达纳苏斯语、侏儒二进制语等]<br>LanguageWords.dbc 不同语言的字符映射<br>LFGDungeons.dbc 组队功能中的地下城、地下城的等级范围、ID<br>LightSkybox.dbc 天空模型<br>LiquidMaterial.dbc 流体的材质[猜测是岩浆、普通水、烫水……这种分类]<br>LiquidType.dbc 不同类型的流体的贴图<br>LoadingScreens.dbc 切换场景时的Loading画面路径<br>LoadingScreenTaxiSplines.dbc 乘坐飞艇和船时的航线图<br>Lock.dbc 锁的位置<br>LockType.dbc 箱子的类型 MailTemplate.dbc 邮件模板[NPC经常会寄信给你，这个dbc就管的这个信的内容]<br>Map.dbc 大地图区域<br>Movie.dbc 开场电影怎么放[先来个BLZ的LOGO，再来一段正式CG]<br>NameGen.dbc 名字不能包含的字符（提示为已注册？）<br>NamesProfanity.dbc 名字禁止包含的字符<br>NamesReserved.dbc 名字已存在<br>NPCSounds.dbc NPC声音文件<br>PageTextMaterial.dbc<br>PaperDollItemFrame.dbc 装备栏贴图<br>ParticleColor.dbc 粒子颜色（可能是各个场合的粒子外观）<br>PetitionType.dbc 签名表[包括公会、战队]<br>QuestInfo.dbc 任务难度[地下城、组队、团队、PVP、团队-10、团队-20，这个在任务名的后面有一个括号会说明]<br>QuestSort.dbc 任务归类[季节性、法师、猎人、制皮……等]<br>Resistances.dbc 抗性分类<br>ServerMessages.dbc 服务器提示消息[还有多少时间关机啦、多少时间重启什么的]<br>SkillCostsData.dbc 法术的消耗需求<br>SkillLine.dbc 技能面板技能总类别[快键 K]<br>SkillLineAbility.dbc 技能面板上的技能熟练度<br>SkillLineCategory.dbc 技能大类<br>SoundEntries.dbc 声音文件的入口[详细定义了每一个”引用”]<br>SoundProviderPreferences.dbc 同类场景的引用[比如,冬泉谷和丹莫罗的音乐都是MOUNTAINS]<br>SoundWaterType.dbc 各类”水”的声音<br>SpamMessages.dbc “乱码”的转换方法<br>Spell.dbc 技能定义[最大的dbc文档！！！]<br>SpellCastTimes.dbc 施法时间分类<br>SpellDispelType.dbc 法术类型[诅咒、魔法、疾病……]<br>SpellFocusObject.dbc 技能施放对象[object，一般是指游戏内的对象]<br>SpellIcon.dbc 技能-图标对应<br>SpellItemEnchantment.dbc “使用”类物品提供的效果<br>SpellMechanic.dbc 技能命中的效果[被魅惑、被缴械、被变形、流血、瘫痪……]<br>SpellMissileMotion.dbc 技能算法<br>SpellRange.dbc 技能距离、范围<br>SpellShapeshiftForm.dbc 各种形态……<br>SpellVisualEffectName.dbc 技能外观模型<br>Startup_Strings.dbc WOW.exe的提示字符串<br>Talent.dbc 天赋总汇<br>TalentTab.dbc 天赋系别<br>TaxiNodes.dbc 出租车节点<br>TaxiPath.dbc 节点对应的行走路径<br>TaxiPathNode.dbc 节点坐标<br>TerrainType.dbc 地区类型[比如 山、平原、干地等]<br>TerrainTypeSounds.dbc 各种地区类型对应的音乐<br>TotemCategory.dbc 工具分类[指”需要XX物品”的情况下，被需求的物品<br>WeaponImpactSounds.dbc 武器攻击声效<br>WeaponSwingSounds2.dbc 武器挥舞声效<br>Weather.dbc 天气配置<br>WMOAreaTable.dbc “小地区”表<br>WorldMapArea.dbc 地图区域划分<br>WorldStateUI.dbc 区域内战斗提示[麦迪文的剩余护盾：X%；部落控制了内城区！]<br>WowError_Strings.dbc WOW出错界面及错误报告界面字符<br>ZoneIntroMusicTable.dbc 地区介绍音乐[这个音乐作为IntroMusic一般是主题性质的音乐]<br>ZoneMusic.dbc 地区音乐</p></details><p>&emsp;&emsp;有必要说明，这些内容即使缺失服务端仍能运行起来，但结果可想而知。这也就是为什么网络上能找到的很多野生端bug奇多，因为很多野生端都没有包含vmaps、mmaps等文件。vmaps、mmaps等文件的获取难点在于它们和服务端及客户端版本是严格对应的，若做不到版本的严格对应则无法使用其文件。一般来说它们可以从对应的客户端进行手动提取，这里需要用到地图数据提取工具，这些工具一般都是直接从服务端源码里直接编译出来的，因本文不涉及源码编译工作，所以需要从其他途径获取，它们通常如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mapextractor</span><span class="selector-class">.exe</span></span><br><span class="line"><span class="selector-tag">mmaps_generator</span><span class="selector-class">.exe</span></span><br><span class="line"><span class="selector-tag">vmap4assembler</span><span class="selector-class">.exe</span></span><br><span class="line"><span class="selector-tag">vmap4extractor</span><span class="selector-class">.exe</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;将这几个文件放置在客户端根目录（和wow.exe一个目录）运行即可生成出对应的文件夹，然后将这些文件夹置于服务器目录即可。经测试不同的版本的extractor无法互通。老实说这部分问题贼多，通常我认为，自己手动提取的文件（前提是有效）是最好的，但不能保证自己提取的文件就和服务端完全适配，因为网上下载的那些客户端也是有可能出这样那样的问题的。实在不行的话还是考虑在服务端提供方那里弄到对应的文件，一般也都会有的。</p><p>&emsp;&emsp;再下来是启动器和配置文件，Authserver主要控制和账户、登录、服务器相关的功能，而worldserver主要控制和游戏具体内容相关的功能，如常用的经验倍率、掉落倍率等等，其实.conf里已经写的很明白了，读一遍就能解决很多问题。这里我们最关心的是端口、IP地址、数据库名和数据库密码。首先是端口，Trinity的端通常会使用这些端口，确保这些端口不被占用：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">80 </span>//Apache服务的端口，运行Apache注册页面网站所需</span><br><span class="line"><span class="symbol">3306 </span>// MySQL的端口，必需，否则无法连接数据库</span><br><span class="line"><span class="symbol">3343 </span>// 远程连接的端口，必需</span><br><span class="line"><span class="symbol">7878 </span>// 简单对象访问协议的默认端口</span><br><span class="line"><span class="symbol">3724 </span>// wow服务器列表中默认服务器（realm）的端口，必需。我们默认这里只有一个realm</span><br><span class="line"><span class="symbol">8085 </span>// 世界服务器端口，必需</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里简述一下如何查看哪个服务占用了哪个端口：CMD&gt;键入netstat -ano&gt;回车&gt;看到本地地址列中地址的最后一个数即是端口名，找到其对应的PID，然后在任务管理器中的服务中找到该PID对应的服务即可。</p><p>&emsp;&emsp;Trinity下，IP地址、数据库名和数据库密码通常不需要修改，即使是架设在远程服务器上，也只需用Navicat8修改数据库中auth下realmlist中的两个ip地址（address和localaddress）为服务器公网IP地址即可，服务端配置文件中均使用127.0.0.1。不过如果你的端是自行组装的话，这些内容有可能是需要自定义的。</p><p>&emsp;&emsp;接下来是三个.dll文件，这些dll文件控制启动器程序和数据库的连接，因为版本和运行环境的原因很容易出问题，上面说到，服务端安装包中一般都带有服务端运行环境（vcredist_x86和OpenSSL），确保运行环境已经被正确安装后，启动服务端（authserver或worldserver）若报错（无法启动程序等错误）或显示缺少 libeay32.dll、ssleay32.dll，，考虑手动提取，在C:\OpenSSL-Win32\bin 中复制 libeay32.dll 和 ssleay32.dll，到服务端文件夹中（即authserver和worldserver所在的文件夹），通常即可解决问题。</p><p>&emsp;&emsp;若出现缺少msvcr.dll（及形如此类的.dll）的情况，显示错误为：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无法启动此程序,因为计算机中丢失<span class="module-access"><span class="module"><span class="identifier">MSVCR100</span>.</span></span>dll。尝试重新安装该程序以解决问题</span><br><span class="line">无法启动此程序,因为计算机中丢失<span class="module-access"><span class="module"><span class="identifier">MSVCP100</span>.</span></span>dll。尝试重新安装该程序以解决问题</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;若安装包中没有提供，建议从网上下载或直接从别的机器复制对应的.dll到服务器/本机，对windows系统进行补全。若是32位系统，dll放在：WindowsSystem32；若是64位系统需要放两个dll文件，一个32位，一个64位（下面两个一定要看仔细，反的）：32位dll放在：WindowsSysWOW64, 64位dll放在：WindowsSystem32</p><p>&emsp;&emsp;若设备缺少zlib1.dll和bzip2.dll，采取和上述同样的方式对设备进行补全。</p><p>有关TrinityCore的文件结构差不多就到这里了。</p><h2 id="Trinity端的启动"><a href="#Trinity端的启动" class="headerlink" title="Trinity端的启动"></a><p align="left">Trinity端的启动</p></h2><p>&emsp;&emsp;通常来说我们首先需要启动数据库，也就是MySQL服务，确保数据库相关的服务上线运行后才能进行数据库管理，以及开启authserver和worldserver。因为Trinity的MySQL程序是自带的，启动前应确保设备上没有其他相关的MySQL服务运行，否则有可能因为这些数据库服务都使用3306端口而引发端口冲突。在之前的测试中发现，冲突后旧的localhost_3306会连不上，报出denied错误，这时通常右键断线数据库再连接即可解决。</p><p>&emsp;&emsp;一般情况下不建议将Trinity自带的MySQL端口改成3307或其他值，因为需要修改的地方实在太多，各种配置文件里也都需要修改，难免出现问题，除非需要运行多个WOW数据库内容。一般来说将数据库都集成到3306即可。在之前的测试中合并了一个Maplestory079的数据库，二者都能正常运行。</p><p>&emsp;&emsp;如果需要使用注册信息的页面则需要启动Apache服务，本机的话从127.0.0.1即可进入注册页面。如果服务端在服务器上的话，将地址改为公网IP地址即可，或者如果拥有服务器域名的话也是可以通过域名进入的。</p><p>&emsp;&emsp;启动数据库后依次启动authserver和worldserver，注意其是否报错。worldserver启动完毕通常需要30s左右的时间。</p><p>&emsp;&emsp;数据库、authserver和worldserver都启动完毕后即可运行客户端，客户端运行中也留意一下Worldserver是不是会继续报错，通常worldserver多多少少都会报出一点问题，出现非致命问题一般来说是可以忽略的，只要不闪退或出现严重刷屏的错误就行。</p><h2 id="关于修改角色的名称、种族、职业、性别、外观等固有数据"><a href="#关于修改角色的名称、种族、职业、性别、外观等固有数据" class="headerlink" title="关于修改角色的名称、种族、职业、性别、外观等固有数据"></a><p align="left">关于修改角色的名称、种族、职业、性别、外观等固有数据</p></h2><p>&emsp;&emsp;相信玩过一段时间GM权限账号后，我们应该都知道如何通过GM命令给自己角色加钱加装备等常规操作。其实理论上讲任何角色都是可以直接在数据库中修改的，难点在于数据库内的数据记录方式可能不太好懂，某些数据可能是以二进制或者是某种算法结果的形式存在，造成了修改的困难性。</p><p>&emsp;&emsp;这里将角色的名称、种族、职业、性别、外观等数据称为角色的“固有数据”，因为这些内容在正常游戏中通常是不会改动的。如果我们这里的服务端是老版本的话，要想修改这些数据只能从数据库里改。这里说点题外话，从WOW发展历史来看，随着版本更新，玩家对这些“固有数据”的修改权限也是在一步步扩大的。从没有理发店的60版本到80版本开设理发店可以修改发型，再到更晚的版本里可以更改脸型，听说现在9.0当下的理发店已经能变性了…花一点金币就能从白色精灵男秒变黑色精灵妹，可以说Blizzard的这些动作也算是这几年老美在种族、LGBT等问题上的一个很直观的反映。以前不能改这些东西的时候，这些通常是一项收费项目，无论是国服还是外服基本要花大概10-15$。</p><p>这里列一下我掌握的修改方法。</p><p>&emsp;&emsp;这些角色固有数据均存在于Char的character表中，name为名称，修改name可直接改名，但注意不要使用服务端不支持的字符。gender栏目为性别ID，gender=0则为男性，gender=1为女性，修改这个项目可以直接变性。</p><p>race为种族ID，修改这项将改变种族。不同种族对应的ID为（不包含后续版本的同盟种族等）：</p><style>table th:first-of-type {    width: 20%;}table th:nth-of-type(2) {    width: 30%;}table th:nth-of-type(3) {    width: 30%;}</style><table><thead><tr><th align="center">ID</th><th align="center">Value</th><th align="center">Name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">Human</td></tr><tr><td align="center">2</td><td align="center">2</td><td align="center">Orc</td></tr><tr><td align="center">3</td><td align="center">4</td><td align="center">Drawf</td></tr><tr><td align="center">4</td><td align="center">8</td><td align="center">Night Elf</td></tr><tr><td align="center">5</td><td align="center">16</td><td align="center">Undead</td></tr><tr><td align="center">6</td><td align="center">32</td><td align="center">Tauren</td></tr><tr><td align="center">7</td><td align="center">64</td><td align="center">Gnome</td></tr><tr><td align="center">8</td><td align="center">128</td><td align="center">Troll</td></tr><tr><td align="center">9</td><td align="center">256</td><td align="center">Goblin (4.x)</td></tr><tr><td align="center">10</td><td align="center">512</td><td align="center">Blood Elf</td></tr><tr><td align="center">11</td><td align="center">1024</td><td align="center">Draenei</td></tr><tr><td align="center">12</td><td align="center">2048</td><td align="center">Fel Orc</td></tr><tr><td align="center">13</td><td align="center">4096</td><td align="center">Naga</td></tr><tr><td align="center">14</td><td align="center">8192</td><td align="center">Broken</td></tr><tr><td align="center">15</td><td align="center">16384</td><td align="center">Skeleton</td></tr><tr><td align="center">16</td><td align="center">32768</td><td align="center">Vrykul</td></tr><tr><td align="center">17</td><td align="center">65536</td><td align="center">Tuskarr</td></tr><tr><td align="center">18</td><td align="center">131072</td><td align="center">Forest Troll</td></tr><tr><td align="center">19</td><td align="center">262144</td><td align="center">Taunka</td></tr><tr><td align="center">20</td><td align="center">524288</td><td align="center">Northrend Skeleton</td></tr><tr><td align="center">21</td><td align="center">1048576</td><td align="center">Ice Troll</td></tr><tr><td align="center">22</td><td align="center">2097152</td><td align="center">Worgen (4.x)</td></tr><tr><td align="center">24</td><td align="center">8388608</td><td align="center">Pandaren Neutral (5.x)</td></tr><tr><td align="center">25</td><td align="center">16777216</td><td align="center">Pandaren Alliance (5.x)</td></tr><tr><td align="center">26</td><td align="center">33554432</td><td align="center">Pandaren Horde (5.x)</td></tr></tbody></table><p>（注：本表由Trinitycore官方页面提供，如果是旧版本的话只用前面的内容即可，为什么ID没有23号？我也不清楚..）</p><hr><p>class栏目为职业的ID，修改这项将改变职业。不同职业对应的ID为：</p><table><thead><tr><th align="center">ID</th><th align="center">class</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Warrior</td></tr><tr><td align="center">2</td><td align="center">Paladin</td></tr><tr><td align="center">3</td><td align="center">Hunter</td></tr><tr><td align="center">4</td><td align="center">Rogue</td></tr><tr><td align="center">5</td><td align="center">Priest</td></tr><tr><td align="center">6</td><td align="center">Death Knight</td></tr><tr><td align="center">7</td><td align="center">Shaman</td></tr><tr><td align="center">8</td><td align="center">Mage</td></tr><tr><td align="center">9</td><td align="center">Warlock</td></tr><tr><td align="center">10</td><td align="center">Monk</td></tr><tr><td align="center">11</td><td align="center">Druid</td></tr><tr><td align="center">12</td><td align="center">Demon Hunter</td></tr></tbody></table><p>&emsp;&emsp;外观选项由playerBytes和playerBytes2控制。playerBytes控制肤色、脸型、发型、发色，playerBytes2则是角色的“特征”，也就是老版本中我们在建立角色时能修改的第五项内容，这项具体是什么根据种族和性别有所变化：如男性人类是改变胡须，女性人类则是改变耳环，女性暗夜精灵是改变面纹，等。</p><p>&emsp;&emsp;playerBytes和playerBytes2似乎使用取余数的算法来记录数据，总之我很难看懂，而且我们也不清楚到底哪个脸型和特征对应了哪个数值，所以靠谱的办法是直接以修改目标新建一个模板角色，再从character中找到该新角色，复制它的playerBytes和playerBytes2数值覆盖到我们想要修改的旧角色即可，实现人脸“克隆”，然后再在游戏中将模板角色删除。</p><h2 id="（4-3-4）问题解决-“无法传输所需的压缩数据”"><a href="#（4-3-4）问题解决-“无法传输所需的压缩数据”" class="headerlink" title="（4.3.4）问题解决 - “无法传输所需的压缩数据”"></a><p align="left">（4.3.4）问题解决 - “无法传输所需的压缩数据”</p></h2><p>&emsp;&emsp;Trinity 4.3.4版本中，若打开wow.exe出现：无法传输所需的压缩数据，请检查网络连接。（英文为 cannot stream required archive data. please check the network connection.）的框，一般是客户端根目录的WoW.mfil出了问题，这个文件只有1kB，和能正常工作的文件只有内容上的区别。其内容为：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version</span>=<span class="number">2</span></span><br><span class="line"><span class="attr">server</span>=limelight</span><br><span class="line"><span class="attr">location</span>=http://cdn.twinstar-wow.com/<span class="number">15050</span>.direct/</span><br><span class="line"><span class="attr">manifest_partial</span>=wow-<span class="number">15595</span>-<span class="number">0</span>C3502F50D17376754B9E9CB0109F4C5.mfil</span><br></pre></td></tr></table></figure><p>所以我们可以将其编辑为:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>=2</span><br><span class="line"><span class="attribute">server</span>=limelight</span><br><span class="line"><span class="attribute">location</span>=http://blizzard.vo.llnwd.net/o16/content/wow-pod-retail/EU/15050.direct/</span><br><span class="line"><span class="attribute">server</span>=akamai</span><br><span class="line"><span class="attribute">location</span>=http://ak.worldofwarcraft.com.edgesuite.net/wow-pod-retail/EU/15050.direct/</span><br><span class="line"><span class="attribute">manifest_partial</span>=wow-15595-0C3502F50D17376754B9E9CB0109F4C5.mfil</span><br></pre></td></tr></table></figure><p>并关掉网络代理程序，则可以解决问题。或手头有能正常工作的客户端的话，直接复制过来也行。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简述以TrinirtCore为基础的WOW服务端的结构、作用以及一些架设要点，不涉及源码编译。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="服务器" scheme="https://caelica.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>记录一个梦境</title>
    <link href="https://caelica.github.io/2021/10/28/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E6%A2%A6%E5%A2%83/"/>
    <id>https://caelica.github.io/2021/10/28/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E6%A2%A6%E5%A2%83/</id>
    <published>2021-10-28T00:52:47.000Z</published>
    <updated>2022-06-09T09:26:37.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>据说人在一晚上会做多个梦，而能记起的梦通常是将醒的那一个，所以它应该发生于2021年10月28日6点左右。<a id="more"></a></p></blockquote><p>我预计这个文章会比较杂乱，就和梦境本身一样。</p><h2 id="27日做了什么："><a href="#27日做了什么：" class="headerlink" title="27日做了什么："></a>27日做了什么：</h2><p>我已经想不起来27日的早上和中午都干了啥，但可以确定的是几乎整个白天都泡在互联网上游荡，近些年我似乎变得越来越“Cyber”。在下午玩了玩Discord，看到一个哥们在Diablo服务器群组下的一个空无一人的频道里玩，他似乎已经在那里呆了有几天了，出于好奇我进入频道和他聊了一阵子，是一个33岁的加拿大老哥，老哥贴心地把他的Diablo2重制版的电脑屏幕开了直播投给我看，我们从Diablo这个游戏聊到魔兽、暴雪，童年、文化等，他似乎是一个很好打交道的家伙，虽然我口语很烂，但对方很耐心，又或许刷装备本来就是很无聊的事情，他说他看到了中国限制未成年人周末每天玩一小时网络游戏的新闻，觉得很扯淡，直言这是dictatorship，临走时他还不忘向我炫耀他的台湾女朋友教了他几句中文，可惜我一句也没听懂，在对方再三解释下我终于明白那是一个“啤酒”，然而听上去更像是“必救”。这似乎算是我第一次和一个native speaker交流这么长的时间，并且谈论的东西也比较广泛，我确实是想把英语练好的，Discord似乎是一个不可多得的工具，前提是我得有足够的时间先去享受一些游戏才行，不然连话都没得说。</p><p>晚上在家吃完饭父亲邀请我一同观看了索科洛夫于1998年拍摄的纪录片《对话索尔仁尼琴》，他想了解这个人，而我在大学期间读过不少索尔仁尼琴的书，从他的《古拉格群岛》、《癌症楼》到《牛犊顶橡树》等的一些小短篇，我当时就得知索尔仁尼琴已于2008年去世，享年89岁，也就是说，1998年拍摄这部影像时他已经几乎80岁了，虽然我读过他的书，但我还真没看过关于他的影像作品，我惊讶于一个80岁的老人仍能有敏捷的思维和判断力，而且明显能够看出他的观念不像很多老人那样顽固守旧，他是能够理解新世界的人，简直就像一个年轻人一般。期间和之后的时间里又和父亲聊了很多东西，传统音乐、俄罗斯和东正教、公共教育的落后、三十年战争，再到信息不灭和宇宙模拟论。父亲似乎在这些年变成了一个很好学的人，其实我认为他一贯如此，他确实是个普通人，但我后来才发现那是很不寻常的特点：一种对知识及探索未知的单纯的向往，而并非完全是由生存恐惧导致寻求物质利益的自保行为，抑或是寻求社会地位、名望所驱动的。它如同柴米油盐、刀俎鱼肉间的一股灵光，哪怕人的思想和灵魂里只有那么一点点也好，但从许多平凡的普通的劳动者到自命为知识分子的学术阶层里，我几乎从没见到多少人有过。</p><p>这样晚上剩下的时间也不多了，我在电脑上又看了一遍<br>那个很专业的、由Tod’s Workshop于19年8月主导的“长弓穿甲”测试，以及一个日本漫画家的铅笔作画过程记录，看完几乎已经快凌晨1点了，我决定这一天就这么结束。</p><h2 id="梦境的开始"><a href="#梦境的开始" class="headerlink" title="梦境的开始"></a>梦境的开始</h2><p>人确实是很奇特的生物，睡梦如同是得了精神分裂症一般，当你决定如同关闭一场游戏一般结束一天时，人的另一部分灵魂却又偷偷在一个虚拟世界以更加奇特的形式开始活动，就像一个独裁的官员政客正在向人民许诺自由和幸福，而同时他的一部分又回到了那个只有少数同僚的“烟雾缭绕的小房间（Smoke-filled room）”。几乎可以说梦中的东西都是真实的组合，比如很难在梦中见到陌生人，因为人的大脑难以生成一个完整的的陌生人的面孔的全部信息。所以说最常见的还是亲人熟人，不然只能是面部信息混乱不全的人，或干脆就是“无脸人”。我们经常听说有作家能在梦中构思、写作，音乐家在梦中作曲等，我不怀疑它的真实性，事实上我自己在狂热投入某些活动再加上没睡好的情况下也有着类似的经历。</p><p>它开始于一个繁忙的街道，这是这个小城里的一个商业街，向来都是一个人流量很大的地方，它已经有些老旧了，拥有很多又黑又窄的未知小巷，我很少前去那里，只有父母去逛市场的时候才会带我钻进去。前段时间我还去那里转了一圈，人流量早已没有我小时候记忆中那么多了，可能人们都不爱上街了吧，所以那些当年开食物店摆摊、临街叫卖的，甚至是耍骗术的骗子也都消失不见了（我在那条街见识过好几回杂技型的骗术）。而楼上的超市和室内商场也显得有些衰败：一家在2000年曾经是城里最大的大型商场的运营方据说已经濒临破产，里面的店铺几乎倒闭了一半，在里面走了一圈，只有少数仍然开着的店铺还有那么一两个服务员在，她们仍要以一个较高的音量对顾客展示欢迎语，这个声音在这样一个人流稀少的商场里显得更加冷清。</p><p>而梦境又向我呈现出二十年前的景象，内容似乎映射了一段我当服务员的日子。于是就在某一个人流熙攘、外面摆满了临街小吃店摊位的小巷口里，我在一个明显是由一层仓库改成的廉价服装商铺里工作。像那时很多的服装批发市场一样，这间仓库里在白天几乎不开灯，地上也扔满了包装拆下来的废旧硬纸板，衣架间穿行的服务员和想要试鞋子的顾客时不时互相交流，店里人们的声音都比较大，因为店面离巷口不远，街道上的嘈杂声很容易就能盖过这里的正常音量。我以前只做过餐饮服务员，的确没有当过服装店的服务员，我对自己的“工作”的想象也只能基于自己见到的场景：将一包包衣服从包装箱里拆出来，一件件整理好，再一件件将他们挂到墙上或衣架上去。和如今我能够睡个懒觉相比，当服务员只是看起来轻松，实际却是很累很耗时间的工作。我在梦里的全部时间似乎都要彻底消耗在这些重复体力劳动上了，但梦境并没有给我更多关于这项工作的具体内容，我似乎又变成了一个经理一般的角色，还是那家商铺，只不过我变成了管理者，像我以前的老板那样训斥员工们——他们的衣服叠的实在太乱了。</p><p>我在服装商店老旧的的卷帘门前遇到了熟人，一个中学时代关系还算好的女同学，她似乎并不是某一个特定的我认识的人，而是由多个女孩的元素拼成的，但我很确定的是我在中学时代就喜欢过她，是很老套的情节。但她看起来不像中学时代那么富有魅力了，她标志性的黑色长头发被剪到很短很短，几乎和男生的头发差不多了。我这时应该是扔下了服装店的工作，跑出去和她聊天。她的头发几乎算是我见过的所有女生里发质最好、最密的那个，我问到她长头发为什么剪掉了，她不肯说话，我开玩笑说你的头发也太短了，比我在网上看到的乌克兰女兵都短（其实我想说“你像俄罗斯最凶狠的光头党女混混”，当然这太过分了，不会真这么干的xD）。和她分开后又遇到了熟人同学，他告诉我那个女孩其实把头发卖掉了，卖了500万，这个数字当然很离谱，但我的第一反应居然是嫉妒，就像人听说周围哪个朋友中了百万大奖一样产生嫉妒情绪，并且因为刚刚才嘲笑人家头发短，我不得不接受一位“富婆”很可能已经把我“拉黑”了的事实。醒来后我还很好奇地专门查了一下女生的头发到底能卖多少钱，大概得出结论后我觉得，假设那个现实中的女孩真的就把头发给卖了，卖到上千块钱是绝对没问题的，她的头发太好了，确实少见。而且我还查到了莫文蔚为头发投保1000万人民币，詹妮弗·洛佩兹为屁股投保2700万美元等信息，看来现实远比梦境离谱。</p><p>于是我又得回到那个昏暗的库房里当我的服务员，似乎又不再是经理了，场景也变到了另一个同样拥有很多小商铺的邻近街道上，我找了好几家店却都不是我在的那个，我意识到我似乎并不想回去工作，这并不是因为那500万的铂铑钯铱神奇头发刺激到了我，我在梦中也压根没有工资的概念，单纯是因为我认为服装店服务员的工作实在太无聊、太辛苦，就像一个小学生不愿意进学校的门那样。梦境也随着我的失落变得模糊，也就无法找到后面的记忆了。</p><h2 id="梦境的原像"><a href="#梦境的原像" class="headerlink" title="梦境的原像"></a>梦境的原像</h2><p>回想我真正做餐饮服务员的经历，以及和身边其他做过餐饮服务业的人交流得出的结论，它确实是很累的，比高三都累的多，因为在学校你起码可以选择“不学”，只要保证自己能考进大学门就行了。通过摆烂和不求上进，等到老师或家长眼睁睁看着你这个明晃晃的“业绩”蜕变成一个不仅不会再升值，反而还在慢慢掉价的“垃圾股”的时候，他们脑子里就只有尽快“抛售”，于是自由便降临了。这样即使是面临高考你也能轻松地过下去，事实上我在高中就是这么做的。从这个角度讲，所谓的“摸鱼哲学”、“躺平摆烂”等消极抵抗行为天然有其作用优势，因为业绩教师和鸡娃家长们其实就像是一个个股市投机者，他们凭借自己的能力参赌，却无法随意处置发生的后果，对于手中的“垃圾股”的处理手段十分有限，一旦学生/子女变成了摆烂咸鱼，他们就陷入了套牢散户的处境。这时的主场其实已经变成“股票”了。我着实要感谢高中时的两个不仅不鸡娃，甚至连自己上班上课都在摸鱼的语文老师，他们称得上是世外高人。感谢他们让我用他们所有的语文课，拿一个简易电子设备读完了E. B. Potter的《世界海军史（Sea Power: A Naval History）》、梭罗的《瓦尔登湖》，托尔斯泰的《复活》等对我影响深远的作品，当然也有《最后的莫西干人》、《麦田里的守望者》等经典小说，并在语文课本和练习册上画出我想象中“汉普顿锚地海战”里Monitor号和Merrimack号的正面对决，以及比克卡战役（Battle of Bicocca）中佩斯卡拉侯爵（Fernando d’Ávalos）的西班牙火枪队。我觉得我当时的同桌完全可以证实这些。</p><p>但工作却往往不同，如果老板不愁招不到工人的话，他拥有随时踢出不合格者的权力，这里完全是老板的世界，他可以无视劳动法而把每周的高强度劳动时间提高到令人瞠目结舌的水平，50、60小时已是家常便饭，“高强度劳动”这个词是我自创的，目的是区别于一般的低强度劳动时间，例如学生上课睡觉、公务员闲时玩手机、管理人员带薪出差旅游等等，虽然也都算作一般意义上的劳动时间之内，但其对人精力的消耗明显没有全天加班的码农、一单接一单的外卖小哥或是体力活工人明显。反正韭菜割倒一批又一批，哪怕就是把你当成燃料消耗掉，黑心企业家们连眉头都不会皱一下的。</p><p>如果一个社会的劳动福利够好、法制完善的话，即使丢了工作通常也是吃喝不愁的，也就不会对被解雇怀着那么明显的生存恐惧，这样往往还是有机会把握一些基本权利的，企业家们也不敢那么肆意妄为；但现实让我们看到，许多“社畜”连摆烂的机会都没有，完全就是脖子上上了套一般任人驱使，和封建时代的奴仆没有多少区别。</p><p>很多年前我见过一家餐馆的一个服务员，那家餐馆菜价并不贵，厨师也挺有水平，所以每天人都特别多，当然一到饭点服务员也都忙飞了。其中一个服务员女孩看起来确实比较好看，身材又好个子也不矮，年龄看起来比我大不了几岁，总之是一个很好看的姐姐。要是碰巧是她来给我收拾餐桌的话，我一定会提前把饭菜吃干净（虽然我一直吃的都很干净），尽量减少桌子上的垃圾，好让她收拾起来方便。我时不时观察她，她从头到尾也没有表现出一点笑容，甚至就是在收拾一个脏乱不堪、黏糊糊的啤酒瓶跌的到处都是的大桌的时候也没有露出一点厌恶之情，只是在像执行程序一样不停地端盘擦桌，偶尔用本地方言和别的服务员沟通，她的声音也和普通的本地女孩一样没什么特别的，可能是因为成长环境或是长期劳动的原因，她的皮肤不像那些不用从事体力劳动的女性那样柔顺，衣服上也总是沾着好些油渍。类似的还有我在工厂里见到的一个年轻工人，他的年纪明显比别的工人小得多，和我差不多。那里的工人平均估计都在四五十岁了，长期的重体力劳动再加上年龄的因素，再换上一身脏兮兮的工作服，如果他们就这样走在街上，你是一定不愿意靠近的。而那个年轻工人的长相和皮肤确实比一般的年轻人都好得多，戴着一副金属边框的眼镜，文质彬彬的。而当工人下班后脱下工作服，我才发现他们一下子好看了许多，平常让人觉得最不想接近的老工人都变得像是一个可爱的邻家大叔一般，而我有幸在这时又见到了那个年轻工人，说实话有点“惊为天人”，他给人的感觉就是普朗克年轻时那个照片的翻版，要不是在工厂里，你一定会想到在哪个大学的数学/物理系的楼道里，那个手里抱着书，学习最好、教授最喜欢的优秀学生。这样的学生要是往图书馆一坐，该是要吸引多少女孩的目光了；同样的，那个餐厅里见到的姐姐要是坐在教室里上课，也一定会成为大家追捧的对象。</p><p>我的审美似乎对人的外形有着一种执着的追求，有人可能会说我颜控了，而我个人却认为这是一种很自然、甚至可以说很古典的审美感，就和今天的人同样欣赏《米洛斯的阿芙洛蒂特》、《大卫》等作品一样，这种美不是吹出来的，而是实打实存在着的感觉。然而我和这些人的确没有什么交集，我不知道他们的名字，连一句话也没有说过，更让人觉得残酷的现实是：漂亮姐姐在餐馆做了起码三年以上的工，之后便不知去向了，她大概率还留在这个城市，我想她可能已经嫁给了某个男人，又或是换了一份服务工作；而那个年轻人，在我离开工厂的时候，那天早上领导刚训完话，我看到他仍在这个厂里最累最热、环境最差的岗位上——那是一个连车间里一个干了二十年农活的农村大爷都不愿意碰的苦差。他面无表情、慢慢地推着一个运载车朝车间的另一端走去。他很可能没有上过大学，我不知道他是什么时候、从哪里来这个工厂的，也不清楚现在他还在不在那。上帝啊，我真希望他赶快离开那个反人类的工作岗位，让那些领导们自个上；对于那个曾在餐馆里工作的姐姐，我也只能祝愿她生活幸福、工作顺利，少遇那些烂人破事。</p><h2 id="现实的指引"><a href="#现实的指引" class="headerlink" title="现实的指引"></a>现实的指引</h2><p>梦境有它真实的一面，而我们的生活还有多少真实的东西呢，我们现在可真算是谎言遍地了：媒体不说真话、官员不说真话、就连一个个普通人也因为害怕说真话而给自己带来麻烦选择沉默：老师家长不说真话，领导员工不说真话，甚至有些夫妻之间都不肯掏心掏肺了，年轻人也一个个学会了尔虞我诈之本事，也难怪汉娜·阿伦特（Hannah Arendt）认为现代极权主义建立在谎言之上。这往往和很多人想的不一样，这架庞大的机器的运作核心并非是暴力，暴力只是一个成效低下、早已过时的、且在捉襟见肘时才被统治者们使用的下策，而这一代人所面对力量的却更为可怕：古老的奴隶主们在高科技手段和现代经济理论所加持下，用两百年以上的社会实践经验以及两次世界大战的所有残酷流血共同锻造了一副前所未有的武器装甲，其名为谎言与蒙昧。今年的离谱之事真可谓是铺天盖地，如7月的河南水灾，7月20日当晚我就看到了郑州地铁里传出的信息，从后续的结果看，河南那次的死伤人数绝对是一个不小的数字，我当时每天都在关注这个新闻，但官媒在那几天的时间里几乎天天报平安。最离谱的要属被全淹的京广北路隧道，可以说是这次事件最神秘的地方，这条全长1.8公里、挤满了车辆的隧道被彻底淹没，仅拖出来的泡水车就有上千辆之多，隧道随后被军管。而官方26日的通报显示隧道只有6人死亡。再加上更加传不出消息的郑州周边被淹没的广大农村地区，真相至今成谜。我想，任何一个有良心且不是傻子的人都不得不承认，我们的官方媒体已经彻底失去作用，这是一个危险的信号，你再也无法得知那些人的脑子里到底在盘算些什么了，“闷声发大财”这套已被他们玩到炉火纯青，而这种建立在谎言之上的阴谋与权术，却为街头巷尾在暗地里所推崇，被世人冠以“能人”之名号——人人皆以当镰刀为荣，对真理和智慧的信仰早已毁灭，自由之神不再眷顾我们——或许也根本不曾存在过。似乎这就是索尔仁尼琴言晚年所描述的——“21世纪的真面目”，一个世界问题，但对我们来说尤为严重。</p><p>所以我经常对周围的人强调，我们被逼无奈可以考虑躺平摆烂，但躺平摆烂的要义是人要有一个强大的灵魂，要相信自己的判断，而不是镰刀们的贬损和诋毁。相信狼们镰刀们和你一样都是一个脑袋四条腿，无论是探索未知的悟性和效率，又或是战斗的意志与技巧，都不见得比你高明到哪里去。实在不行的话，只是活下去便是，不仅要健康地活着，而且是带着精神和思想健康地活着，思想和灵魂的成毁要远比物质的得失重要得多，将火种传给更多的年轻人，真理和智慧终将破除一切谎言与蒙昧，成功不必在我。</p><p>以斯诺登（Edward Snowden）的一句话作为结尾吧，8月份斯诺登本人关注到了中国目前年轻人的状态，他写下了这么一句话，甚至同时使用了中英双语：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“系统的目的不是帮助你，而是控制你。 无论您感到多么孤立，请永远不要忘记您并不孤单：对新兴世代的剥削是一场全球斗争。”(对不起，我可怜的中文。'-.-)。</span><br><span class="line"></span><br><span class="line">"The system was not designed to <span class="keyword">help</span> you, but <span class="keyword">to</span> control you. <span class="keyword">No</span> matter how isolated you feel, <span class="keyword">never</span> forget that you <span class="keyword">are</span> <span class="keyword">not</span> alone: the exploitation <span class="keyword">of</span> rising generations <span class="keyword">is</span> a <span class="keyword">global</span> issue.<span class="string">"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;据说人在一晚上会做多个梦，而能记起的梦通常是将醒的那一个，所以它应该发生于2021年10月28日6点左右。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="生活" scheme="https://caelica.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>画一个Q版二头身</title>
    <link href="https://caelica.github.io/2021/10/26/%E7%94%BB%E4%B8%80%E4%B8%AAQ%E7%89%88%E4%BA%8C%E5%A4%B4%E8%BA%AB/"/>
    <id>https://caelica.github.io/2021/10/26/%E7%94%BB%E4%B8%80%E4%B8%AAQ%E7%89%88%E4%BA%8C%E5%A4%B4%E8%BA%AB/</id>
    <published>2021-10-26T05:42:39.000Z</published>
    <updated>2022-06-09T09:25:14.321Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>并制作成亚克力挂件~！<a id="more"></a></p></blockquote><img src="/2021/10/26/画一个Q版二头身/1.png" title="A"><p>下面是制成亚克力挂件后的效果：</p><img src="/2021/10/26/画一个Q版二头身/2.png" title="B"><hr><p>一直很想画这种萌版二头身，奈何以前技术不行，现在总算掌握了一些方法能够实现一点自己想要的效果，于是也就迫不及待地在某宝上找了个义乌小厂20块钱定做了几个亚克力挂件，坑爹的是亚克力做出来颜色有点失真，可能是商家制作亚克力的设备不支持某些色域，或许转CMYK效果会好一点，反正这制造设备不在自己手上也就基本没什么调试的可能性了，能做出啥效果算啥效果吧。</p><p>应该是早年玩冒险岛的时候最早对这种Q版漫画人物产生兴趣，小学那会还跟同学们在课本上一块临摹冒险岛的原画人物，所以直到现在我在作画的时候也参考冒险岛的各种原画作品。不过韩国人偏好的画风实在是要更萌更幼一点，可以说无论是头的比例还是眼睛的占比都远超过我认为的“萌系角色”的范围上限，可以算是韩国人的一大画风特点了。我记得之前玩一款叫VRchat的换皮聊天游戏，里面一个朋友就告诉我“他这个模型一看就是韩国人做的”，我当时还不理解为啥能一眼就看出是韩国人做的，后来我们找到了那个模型的源房间，果然是韩国人开的，里面摆满了各种又萌又小的卡通模型…于是到最后变成了我和一个韩国妹子用磕磕绊绊的英语互相尬吹然后我那个朋友坐在一旁干瞪眼（他英语盲xD）…</p><p>所以我觉得既然我模仿不来韩国人那种萌幼型，倒不如整一个偏成熟一点的角色，不自然就画了一套制服，觉得只有制服也太单调了于是又给帽子上加了一个羽毛装饰 <del>列克星敦</del>，相对于头盔来说我确实不太熟悉各种制服帽、军帽的样式和结构，也就随便凑合了一下。</p><p>右手参考了一些军用电脑，也就是俗称的“三防笔记本”。画完感觉有点变得像是个卖笔记本电脑的广告…</p><p>因为一开始就做好了制作亚克力的打算，所以刻意加厚了最外层的轮廓线以提高外形辨识度，也没有对这部分做变色处理，从实际效果来看这是个正确的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;并制作成亚克力挂件~！&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="绘画" scheme="https://caelica.github.io/tags/%E7%BB%98%E7%94%BB/"/>
    
      <category term="设计" scheme="https://caelica.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>当年那些经典的Windows迷你小游戏</title>
    <link href="https://caelica.github.io/2021/09/22/%E5%BD%93%E5%B9%B4%E9%82%A3%E4%BA%9B%E7%BB%8F%E5%85%B8%E7%9A%84Windows%E8%BF%B7%E4%BD%A0%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>https://caelica.github.io/2021/09/22/%E5%BD%93%E5%B9%B4%E9%82%A3%E4%BA%9B%E7%BB%8F%E5%85%B8%E7%9A%84Windows%E8%BF%B7%E4%BD%A0%E5%B0%8F%E6%B8%B8%E6%88%8F/</id>
    <published>2021-09-22T15:29:33.000Z</published>
    <updated>2022-06-09T09:23:27.244Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>考古1999年前后的一批Windows小游戏的真名及其背景等。<a id="more"></a></p></blockquote><p>&emsp;&emsp;说到99年前后的游戏相信很多人第一反应都是红警、星际、帝国、CS等根本不用叫全名就耳熟能详的大作，当然还有暗黑2、仙剑1、英雄无敌3、大航海4、三国群英传等等经典作品，这些当年的“3A大作”的名字已经成为游戏玩家们最深刻的记忆，有的甚至开创了一个系列的作品。但是游戏世界从来都不是只是由大作，还有那些同样经典但却没人能叫得出来名字的小游戏们，它们基本都是由那个年代的独立开发者们制作的，没想到也居然成了很多人的重要回忆，所以今天说的这些小游戏，或许其中也有你玩过但不知道名字的那一款？</p><p>&emsp;&emsp;那时候大概是2002年，家里新买了电脑不久，父亲在一次逛街的时候去软件影音店里买软件，那时候都是用光盘的，我记得当时其中有一个红色光盘，这个光盘等于是店家自己将金山画王2002（这个也挺好玩的）、瑞星杀毒2002等常用软件做成的盗版盘合集，当年的新电脑嘛总要装点这些玩意。然而就在这时..命运的齿轮它转动了！我爸买完那些光盘后居然顺手又买了一个“迷你GAMES超市”的小游戏光盘，像我爸这样的人其实几乎不和游戏打交道的，于是这个盘就到我手里了，接下来的时间里我将玩遍这个盘里几乎所有的游戏…它的盘面有一个画风很九十年代的卡通少女，其实我记得还有个塑料包装盒和纸质说明书的，包装盒和这个盘面差不多，而那个纸质说明书很关键，因为好多游戏都是英文的，而这个说明书则用中文介绍了大部分游戏的简介内容，应该是光盘制作者自己编写的。虽然它没有包含这个盘里所有的游戏，却给了我不小的帮助。遗憾的是包装盒和纸质说明书早已不知道丢在哪里了，只有这个盘我一直还保存了下来：</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/0.png" title="a"><p>&emsp;&emsp;光盘启动后可以进入这样一个界面。右边居然是拳皇里的马克西玛么？不过我那时还没玩过KOF…</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/1.png" title="b"><p>&emsp;&emsp;总共被分了六类的游戏一共有大概230个左右，大部分都是以安装包/压缩包的形式保存在光盘里的。话不多说，搬出我的旧电脑（新电脑没光驱…）用UltraISO直接将光盘做成.ISO，同样也顺便对那张也保存至今的红色光盘再加上一个《雷曼2》的光盘也都做了镜像。将这些ISO都复制到新电脑上就好处理多了。打开的时候我惊奇地发现，光盘内容里原来一直躺着一个txt文本，里面正是丢失掉的那张纸质说明书的内容！感觉又一次验证了“信息不灭理论”啊…于是解压了一连串的游戏之后我又开开心心地都打了一遍，总结了以下十几个我当年就觉得很好玩的游戏，并且简单考证了它们的内容、背景以及发行的时间。因为很多游戏过于古老无法在Win10及64位系统上运行，虚拟机我也懒得去开了，所以这里有些游戏的画面就直接截自Youtube上的视频。</p><hr><p><strong>《暴力摩托2000（Road Rush）》</strong>，2000年。这个不解释了，经典刘沛松战庄臣。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/2.png" title="c"><p><strong>《反潜驱逐战（SuperDepth）》</strong>，1999年。也就是俗称的军舰炸潜艇，很多人应该都玩过。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/3.png" title="d"><p><strong>《Mario &amp; Luigi (DOS)》</strong>，1994年。这个马里奥游戏是由Mike Wiering于1994年制作的DOS系统的重制版，属于同人作品，但是质量非常优秀。这个游戏当年在国内很流行，几乎每个”电脑房”的某几台机器上都会有一个，这也是我玩的第一款马里奥游戏，之后才接触到FC。不过我小时候玩的那个版本好像还没做完，打到第四关会被困在关底的黑色长廊中无法继续前进。我后来还玩过完整版，黑色长廊里有很多金币，过了就是NG+了。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/4.png" title="e"><p><strong>《おでんととどのお鱼钓りゲーム☆》</strong>，1997年。翻译过来其实叫【关东煮和北海狮的钓鱼游戏】，这个游戏很多人应该都玩过，音效超级魔性洗脑的…</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/5.png" title="f"><p><strong>《Zeek the geek》</strong>，1995年。一个吃花过关的益智小游戏。这下才发现游戏背景音乐基本都是一些很有名的美国民歌，Little Brown Jug、Oh Susanna、I’ve Been Working on The Railroad等等。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/6.png" title="g"><p><strong>《Troy 2000》</strong>，2000年。一个恐龙吐泡泡闯关的游戏，画风精致也很好玩，试玩版只能玩20关。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/7.png" title="h"><p><strong>《紫色小精灵（Dweep）》</strong>，1999年。超可爱的小游戏，音乐也很好听，就是后面关卡难度对小学生来说还是挺高的。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/8.png" title="i"><p>下面几个游戏从Youtube上看关注度都比较高，应该是很多老外的童年回忆了，虽然国内玩过的人可能不多：</p><p><strong>《Kung Fu Kim》</strong>，1997年。主角明显是一个跆拳练习者，用四个方向键阻挡异物的进攻，可以不断升级腰带，玩起来的确能感受到一点练功的意境。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/9.png" title="j"><p><strong>《Rat Poker》</strong>，1997年。微软做的一个拼同色老鼠的游戏，这游戏的背景音乐超级好听。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/10.png" title="k"><p><strong>《Hot Wheels: Crash!》</strong>，1999年。看起来应该是美泰公司旗下的车模品牌Hot Wheels（风火轮）和车模玩具同步推广的游戏，游戏内容就是发射一辆“自爆卡车”撞毁建筑、汽车和公共设施，破坏得越厉害得分越高。这个游戏确实有意思，因为它是真3D游戏（99年那会真3D真的很少的），并且拥有简单的物理引擎。每次发射车辆还有跟电影镜头一样的特效，看着很爽。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/11.png" title="l"><p><strong>《Elf Bowling》</strong>，1998年。圣诞老人扔保龄球砸小矮人的搞笑游戏，保龄球甚至能在特定角度砸倒路过的动物，很有意思。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/12.png" title="m"><p><strong>《Baroque Shooting》</strong>，2000年。一个名为《巴洛克（Baroque）》的日本游戏衍生的STG游戏，末世世界观和哥特恐怖题材画风，感兴趣的可以Google一下这个游戏的历史，讲道理这种玩意对小学生来说还是有点吓人的，小时候放大招弹出的那个娃娃感觉有点恐怖。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/13.png" title="n"><p>&emsp;&emsp;最后当这个光盘点击退出的时候，还会出来个八神和京的背景，这张图应该是拳皇97的CG，背景音乐还是仙剑1主题曲，感觉直接是把仙剑的MIDI复制过来了。</p><img src="/2021/09/22/当年那些经典的Windows迷你小游戏/14.png" title="b"><p>&emsp;&emsp;总的来说可以看出，这些游戏基本都是国外独立制作者们在网站上放出的免费试玩版，或者是Demo，往往只能体验游戏的一部分内容，而要想购买完整版则差不多都需要付费5-10美元不等。而光盘的制作者“佳鑫科技”则是将这些免费试玩版都收录了下来，然后放到国内市场上售卖。现在想想好像是有点“恰烂钱”的感觉，不过能将这么多经典游戏收录到一起也未尝不是一项有意义的工作，也让我们这帮小学生能够玩到当时国际上的经典作品。</p><p>&emsp;&emsp;其实这件事的契机是有一个人问我一款20年前的Windows飞镖小游戏的名字，我刚好记得我那张光盘里有那个小游戏，最后考证出游戏是一个叫Dart’m up的荷兰游戏，被翻译成“休闲飞镖”。于是借着这个机会才重新审阅了那张远古游戏光盘，我相信学历史的人都一定有着深厚的考古情节吧，借助技术手段复原那些被遗忘的信息，还原出更清晰的“我的历史”，似乎觉得自己对自己的认识又上了一层，确实是一种很奇妙的感觉。</p><p>&emsp;&emsp;最后还有一个推断。既然那么多“机房”都安装着这些游戏，说明很多人手里也都有类似的光盘（当年没U盘，流行的3.5inch软盘只有1.44MB容量），你手里有这种光盘吗？会不会和我的一样？</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;考古1999年前后的一批Windows小游戏的真名及其背景等。&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="游戏" scheme="https://caelica.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="生活" scheme="https://caelica.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
